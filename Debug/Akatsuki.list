
Akatsuki.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  08007948  08007948  00017948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007efc  08007efc  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  08007efc  08007efc  00017efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f04  08007f04  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f04  08007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08007f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200001cc  080080d8  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080080d8  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ab78  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c40  00000000  00000000  0002adb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  0002d9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a35  00000000  00000000  0002e808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014fd5  00000000  00000000  0002f23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1e0  00000000  00000000  00044212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006a9c4  00000000  00000000  000523f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004724  00000000  00000000  000bcdb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c14dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001cc 	.word	0x200001cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007930 	.word	0x08007930

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d0 	.word	0x200001d0
 80001dc:	08007930 	.word	0x08007930

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee4:	2b40      	cmp	r3, #64	; 0x40
 8000ee6:	d101      	bne.n	8000eec <LL_SPI_IsEnabled+0x18>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <LL_SPI_IsEnabled+0x1a>
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d101      	bne.n	8000f12 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d101      	bne.n	8000f38 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	330c      	adds	r3, #12
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b085      	sub	sp, #20
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	330c      	adds	r3, #12
 8000f72:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	78fa      	ldrb	r2, [r7, #3]
 8000f78:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	619a      	str	r2, [r3, #24]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	041a      	lsls	r2, r3, #16
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SPI_Control>:
* @return
* (@sa Functions to should refer to)
* @details
*/

void SPI_Control(SPI_TypeDef *SPIx, uint8_t *tx_data, uint8_t *rx_data,uint8_t length) {
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	70fb      	strb	r3, [r7, #3]
	uint8_t count = length;
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	75fb      	strb	r3, [r7, #23]

	LL_GPIO_SetOutputPin(ADC_CS_GPIO_Port, ADC_CS_Pin);
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	4822      	ldr	r0, [pc, #136]	; (8001060 <SPI_Control+0xa0>)
 8000fd6:	f7ff ffd6 	bl	8000f86 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GYRO_CS_GPIO_Port, GYRO_CS_Pin);
 8000fda:	2140      	movs	r1, #64	; 0x40
 8000fdc:	4820      	ldr	r0, [pc, #128]	; (8001060 <SPI_Control+0xa0>)
 8000fde:	f7ff ffe0 	bl	8000fa2 <LL_GPIO_ResetOutputPin>

	if(LL_SPI_IsActiveFlag_RXNE(SPIx) == SET)	LL_SPI_ReceiveData8(SPIx);
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f7ff ff89 	bl	8000efa <LL_SPI_IsActiveFlag_RXNE>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d102      	bne.n	8000ff4 <SPI_Control+0x34>
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f7ff ffa9 	bl	8000f46 <LL_SPI_ReceiveData8>
	if(LL_SPI_IsEnabled(SPIx) == RESET ) 			LL_SPI_Enable(SPIx);
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff ff6d 	bl	8000ed4 <LL_SPI_IsEnabled>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d124      	bne.n	800104a <SPI_Control+0x8a>
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f7ff ff57 	bl	8000eb4 <LL_SPI_Enable>

	  while(count > 0){
 8001006:	e020      	b.n	800104a <SPI_Control+0x8a>
	    LL_SPI_TransmitData8(SPIx, *tx_data++);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f7ff ffa5 	bl	8000f62 <LL_SPI_TransmitData8>
	    while( LL_SPI_IsActiveFlag_TXE(SPIx) == RESET );
 8001018:	bf00      	nop
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f7ff ff80 	bl	8000f20 <LL_SPI_IsActiveFlag_TXE>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f9      	beq.n	800101a <SPI_Control+0x5a>
	    while( LL_SPI_IsActiveFlag_RXNE(SPIx) == RESET );
 8001026:	bf00      	nop
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff ff66 	bl	8000efa <LL_SPI_IsActiveFlag_RXNE>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f9      	beq.n	8001028 <SPI_Control+0x68>
	    *rx_data++ = LL_SPI_ReceiveData8(SPIx);
 8001034:	687c      	ldr	r4, [r7, #4]
 8001036:	1c63      	adds	r3, r4, #1
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff ff83 	bl	8000f46 <LL_SPI_ReceiveData8>
 8001040:	4603      	mov	r3, r0
 8001042:	7023      	strb	r3, [r4, #0]
	    count--;
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	3b01      	subs	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
	  while(count > 0){
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1db      	bne.n	8001008 <SPI_Control+0x48>
	  }
	LL_GPIO_SetOutputPin(GYRO_CS_GPIO_Port, GYRO_CS_Pin);
 8001050:	2140      	movs	r1, #64	; 0x40
 8001052:	4803      	ldr	r0, [pc, #12]	; (8001060 <SPI_Control+0xa0>)
 8001054:	f7ff ff97 	bl	8000f86 <LL_GPIO_SetOutputPin>
}
 8001058:	bf00      	nop
 800105a:	371c      	adds	r7, #28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd90      	pop	{r4, r7, pc}
 8001060:	40020400 	.word	0x40020400

08001064 <readByte>:
//	@brief  IMUのデータをリクエスト・受信する
// @param addres ほしいデータのアドレス（IMU側データシートを参照）
// @return 抽出したデータ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint8_t readByte(uint8_t addres)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	uint8_t trans_data[2];
	uint8_t receive_data[2];

	trans_data[0] = addres | 0x80;
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001074:	b2db      	uxtb	r3, r3
 8001076:	733b      	strb	r3, [r7, #12]
	trans_data[1] = 0x00;
 8001078:	2300      	movs	r3, #0
 800107a:	737b      	strb	r3, [r7, #13]

	SPI_Control(SPI1, trans_data, receive_data, 2);
 800107c:	f107 0208 	add.w	r2, r7, #8
 8001080:	f107 010c 	add.w	r1, r7, #12
 8001084:	2302      	movs	r3, #2
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <readByte+0x34>)
 8001088:	f7ff ff9a 	bl	8000fc0 <SPI_Control>

	return receive_data[1];
 800108c:	7a7b      	ldrb	r3, [r7, #9]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40013000 	.word	0x40013000

0800109c <writeByte>:
//	@brief IMUにデータを送信する
// @param addres 書き込みたいデータのアドレス（IMU側データシートを参照）
// @param addres 書き込みたいデータの内容（IMU側データシートを参照）
//+++++++++++++++++++++++++++++++++++++++++++++++
void writeByte(uint8_t addres,uint8_t data)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	4613      	mov	r3, r2
 80010aa:	71bb      	strb	r3, [r7, #6]
	uint8_t trans_data[2];
	uint8_t receive_data[2];

	trans_data[0] = addres & 0x7f;
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	733b      	strb	r3, [r7, #12]
	trans_data[1] = data;
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	737b      	strb	r3, [r7, #13]

	SPI_Control(SPI1, trans_data, receive_data, 2);
 80010ba:	f107 0208 	add.w	r2, r7, #8
 80010be:	f107 010c 	add.w	r1, r7, #12
 80010c2:	2302      	movs	r3, #2
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <writeByte+0x38>)
 80010c6:	f7ff ff7b 	bl	8000fc0 <SPI_Control>
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40013000 	.word	0x40013000

080010d8 <dmpu_initIMU>:
//	@brief IMUにデータを送信する
// @param addres 書き込みたいデータのアドレス（IMU側データシートを参照）
// @param addres 書き込みたいデータの内容（IMU側データシートを参照）
//+++++++++++++++++++++++++++++++++++++++++++++++

void dmpu_initIMU(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	LL_SPI_Enable(SPI1);
 80010de:	4822      	ldr	r0, [pc, #136]	; (8001168 <dmpu_initIMU+0x90>)
 80010e0:	f7ff fee8 	bl	8000eb4 <LL_SPI_Enable>

	uint8_t who_am_i = readByte(WHO_AM_I);
 80010e4:	2075      	movs	r0, #117	; 0x75
 80010e6:	f7ff ffbd 	bl	8001064 <readByte>
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]

	if(who_am_i != GYRO_CORREST_REACTION){
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b70      	cmp	r3, #112	; 0x70
 80010f2:	d010      	beq.n	8001116 <dmpu_initIMU+0x3e>
		while(who_am_i != GYRO_CORREST_REACTION){
 80010f4:	e00c      	b.n	8001110 <dmpu_initIMU+0x38>
			printf("Gyro Error: Who am I ? -> 0x%x\n", who_am_i);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4619      	mov	r1, r3
 80010fa:	481c      	ldr	r0, [pc, #112]	; (800116c <dmpu_initIMU+0x94>)
 80010fc:	f004 fc16 	bl	800592c <iprintf>
			who_am_i = readByte(WHO_AM_I);
 8001100:	2075      	movs	r0, #117	; 0x75
 8001102:	f7ff ffaf 	bl	8001064 <readByte>
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
			LL_mDelay(100);
 800110a:	2064      	movs	r0, #100	; 0x64
 800110c:	f003 fec2 	bl	8004e94 <LL_mDelay>
		while(who_am_i != GYRO_CORREST_REACTION){
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b70      	cmp	r3, #112	; 0x70
 8001114:	d1ef      	bne.n	80010f6 <dmpu_initIMU+0x1e>
		}
	}
	printf("Who am I ? -> 0x%x\n", who_am_i);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4619      	mov	r1, r3
 800111a:	4815      	ldr	r0, [pc, #84]	; (8001170 <dmpu_initIMU+0x98>)
 800111c:	f004 fc06 	bl	800592c <iprintf>
	printf("Gyro OK\n");
 8001120:	4814      	ldr	r0, [pc, #80]	; (8001174 <dmpu_initIMU+0x9c>)
 8001122:	f004 fc69 	bl	80059f8 <puts>

	writeByte(PWR_MGMT_1,0x00);
 8001126:	2100      	movs	r1, #0
 8001128:	206b      	movs	r0, #107	; 0x6b
 800112a:	f7ff ffb7 	bl	800109c <writeByte>
	LL_mDelay(10);
 800112e:	200a      	movs	r0, #10
 8001130:	f003 feb0 	bl	8004e94 <LL_mDelay>
	writeByte(CONFIG,0x00);
 8001134:	2100      	movs	r1, #0
 8001136:	201a      	movs	r0, #26
 8001138:	f7ff ffb0 	bl	800109c <writeByte>
	LL_mDelay(10);
 800113c:	200a      	movs	r0, #10
 800113e:	f003 fea9 	bl	8004e94 <LL_mDelay>
	writeByte(GYRO_CONFIG,0x18);
 8001142:	2118      	movs	r1, #24
 8001144:	201b      	movs	r0, #27
 8001146:	f7ff ffa9 	bl	800109c <writeByte>
	LL_mDelay(10);
 800114a:	200a      	movs	r0, #10
 800114c:	f003 fea2 	bl	8004e94 <LL_mDelay>
	writeByte(ACCEL_CONFIG,0x18);
 8001150:	2118      	movs	r1, #24
 8001152:	201c      	movs	r0, #28
 8001154:	f7ff ffa2 	bl	800109c <writeByte>
	LL_mDelay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f003 fe9b 	bl	8004e94 <LL_mDelay>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40013000 	.word	0x40013000
 800116c:	08007948 	.word	0x08007948
 8001170:	08007968 	.word	0x08007968
 8001174:	0800797c 	.word	0x0800797c

08001178 <LL_SPI_Enable>:
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <LL_SPI_IsEnabled>:
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a8:	2b40      	cmp	r3, #64	; 0x40
 80011aa:	d101      	bne.n	80011b0 <LL_SPI_IsEnabled+0x18>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <LL_SPI_IsEnabled+0x1a>
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_SPI_IsActiveFlag_RXNE>:
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_SPI_IsActiveFlag_TXE>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d101      	bne.n	80011fc <LL_SPI_IsActiveFlag_TXE+0x18>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <LL_SPI_IsActiveFlag_TXE+0x1a>
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_SPI_ReceiveData8>:
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	330c      	adds	r3, #12
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_SPI_TransmitData8>:
{
 8001226:	b480      	push	{r7}
 8001228:	b085      	sub	sp, #20
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	330c      	adds	r3, #12
 8001236:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_GPIO_SetOutputPin>:
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	619a      	str	r2, [r3, #24]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_GPIO_ResetOutputPin>:
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	041a      	lsls	r2, r3, #16
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <tlaSPIControl>:
* @param2 送信データ配列
* @param3 受信データ配列
* @param4 配列サイズ
* @details　SPIペリフェラルを使うための何か
*/
void tlaSPIControl(SPI_TypeDef *SPIx, uint8_t *tx_data, uint8_t *rx_data,uint8_t length) {
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	70fb      	strb	r3, [r7, #3]
	uint8_t count = length;
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	75fb      	strb	r3, [r7, #23]

	if(LL_SPI_IsActiveFlag_RXNE(SPIx) == SET)		LL_SPI_ReceiveData8(SPIx);
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff ff91 	bl	80011be <LL_SPI_IsActiveFlag_RXNE>
 800129c:	4603      	mov	r3, r0
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d102      	bne.n	80012a8 <tlaSPIControl+0x24>
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff ffb1 	bl	800120a <LL_SPI_ReceiveData8>
	if(LL_SPI_IsEnabled(SPIx) == RESET ) 			LL_SPI_Enable(SPIx);
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f7ff ff75 	bl	8001198 <LL_SPI_IsEnabled>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <tlaSPIControl+0x36>
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f7ff ff5f 	bl	8001178 <LL_SPI_Enable>

	LL_GPIO_SetOutputPin(GYRO_CS_GPIO_Port, GYRO_CS_Pin);
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	4819      	ldr	r0, [pc, #100]	; (8001324 <tlaSPIControl+0xa0>)
 80012be:	f7ff ffc4 	bl	800124a <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(ADC_CS_GPIO_Port, ADC_CS_Pin);
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	4817      	ldr	r0, [pc, #92]	; (8001324 <tlaSPIControl+0xa0>)
 80012c6:	f7ff ffce 	bl	8001266 <LL_GPIO_ResetOutputPin>

	while(count > 0){
 80012ca:	e020      	b.n	800130e <tlaSPIControl+0x8a>
		LL_SPI_TransmitData8(SPIx, *tx_data++);
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff ffa5 	bl	8001226 <LL_SPI_TransmitData8>
		while( LL_SPI_IsActiveFlag_TXE(SPIx) == RESET );
 80012dc:	bf00      	nop
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7ff ff80 	bl	80011e4 <LL_SPI_IsActiveFlag_TXE>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f9      	beq.n	80012de <tlaSPIControl+0x5a>
		while( LL_SPI_IsActiveFlag_RXNE(SPIx) == RESET );
 80012ea:	bf00      	nop
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f7ff ff66 	bl	80011be <LL_SPI_IsActiveFlag_RXNE>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f9      	beq.n	80012ec <tlaSPIControl+0x68>
		*rx_data++ = LL_SPI_ReceiveData8(SPIx);
 80012f8:	687c      	ldr	r4, [r7, #4]
 80012fa:	1c63      	adds	r3, r4, #1
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f7ff ff83 	bl	800120a <LL_SPI_ReceiveData8>
 8001304:	4603      	mov	r3, r0
 8001306:	7023      	strb	r3, [r4, #0]
		count--;
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	3b01      	subs	r3, #1
 800130c:	75fb      	strb	r3, [r7, #23]
	while(count > 0){
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1db      	bne.n	80012cc <tlaSPIControl+0x48>
	}
	LL_GPIO_SetOutputPin(ADC_CS_GPIO_Port, ADC_CS_Pin);
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	4803      	ldr	r0, [pc, #12]	; (8001324 <tlaSPIControl+0xa0>)
 8001318:	f7ff ff97 	bl	800124a <LL_GPIO_SetOutputPin>
}
 800131c:	bf00      	nop
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}
 8001324:	40020400 	.word	0x40020400

08001328 <tlaSPIRead>:
* @param2 送信データ配列
* @param3 受信データ配列
* @param4 配列サイズ
* @details　SPIペリフェラルを使うための何か
*/
void tlaSPIRead(SPI_TypeDef *SPIx,uint8_t *tx_data, uint8_t *rx_data,uint8_t length) {
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	70fb      	strb	r3, [r7, #3]
	uint8_t count = length;
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	75fb      	strb	r3, [r7, #23]

	if(LL_SPI_IsActiveFlag_RXNE(SPIx) == SET)		LL_SPI_ReceiveData8(SPIx);
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f7ff ff3f 	bl	80011be <LL_SPI_IsActiveFlag_RXNE>
 8001340:	4603      	mov	r3, r0
 8001342:	2b01      	cmp	r3, #1
 8001344:	d102      	bne.n	800134c <tlaSPIRead+0x24>
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f7ff ff5f 	bl	800120a <LL_SPI_ReceiveData8>
	if(LL_SPI_IsEnabled(SPIx) == RESET ) 			LL_SPI_Enable(SPIx);
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f7ff ff23 	bl	8001198 <LL_SPI_IsEnabled>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <tlaSPIRead+0x36>
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f7ff ff0d 	bl	8001178 <LL_SPI_Enable>

	LL_GPIO_SetOutputPin(GYRO_CS_GPIO_Port, GYRO_CS_Pin);
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	4819      	ldr	r0, [pc, #100]	; (80013c8 <tlaSPIRead+0xa0>)
 8001362:	f7ff ff72 	bl	800124a <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(ADC_CS_GPIO_Port, ADC_CS_Pin);
 8001366:	2180      	movs	r1, #128	; 0x80
 8001368:	4817      	ldr	r0, [pc, #92]	; (80013c8 <tlaSPIRead+0xa0>)
 800136a:	f7ff ff7c 	bl	8001266 <LL_GPIO_ResetOutputPin>

	while(count > 0){
 800136e:	e020      	b.n	80013b2 <tlaSPIRead+0x8a>
		LL_SPI_TransmitData8(SPIx, *tx_data++);
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7ff ff53 	bl	8001226 <LL_SPI_TransmitData8>
		while( LL_SPI_IsActiveFlag_TXE(SPIx) == RESET );
 8001380:	bf00      	nop
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff ff2e 	bl	80011e4 <LL_SPI_IsActiveFlag_TXE>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f9      	beq.n	8001382 <tlaSPIRead+0x5a>
		while(LL_SPI_IsActiveFlag_RXNE(SPIx) == RESET );
 800138e:	bf00      	nop
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f7ff ff14 	bl	80011be <LL_SPI_IsActiveFlag_RXNE>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f9      	beq.n	8001390 <tlaSPIRead+0x68>
		*rx_data++ = LL_SPI_ReceiveData8(SPIx);
 800139c:	687c      	ldr	r4, [r7, #4]
 800139e:	1c63      	adds	r3, r4, #1
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff ff31 	bl	800120a <LL_SPI_ReceiveData8>
 80013a8:	4603      	mov	r3, r0
 80013aa:	7023      	strb	r3, [r4, #0]
		count--;
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	75fb      	strb	r3, [r7, #23]
	while(count > 0){
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1db      	bne.n	8001370 <tlaSPIRead+0x48>
	}
	LL_GPIO_SetOutputPin(ADC_CS_GPIO_Port, ADC_CS_Pin);
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	4803      	ldr	r0, [pc, #12]	; (80013c8 <tlaSPIRead+0xa0>)
 80013bc:	f7ff ff45 	bl	800124a <LL_GPIO_SetOutputPin>
}
 80013c0:	bf00      	nop
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	40020400 	.word	0x40020400

080013cc <tlaReadByte>:
// tlaReadByte
//	@brief  のデータをリクエスト・受信する
// @param addres ほしいデータのアドレス（IMU側データシートを参照）
// @return 抽出したデータ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint8_t tlaReadByte(uint8_t addres) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
	uint8_t trans_data[3];
	uint8_t receive_data[3];

	trans_data[0] = 0x10;				// readコマンド
 80013d6:	2310      	movs	r3, #16
 80013d8:	733b      	strb	r3, [r7, #12]
	trans_data[1] = addres;
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	737b      	strb	r3, [r7, #13]
	trans_data[2] = 0x00;
 80013de:	2300      	movs	r3, #0
 80013e0:	73bb      	strb	r3, [r7, #14]

	tlaSPIControl(SPI1, trans_data, receive_data, 3);
 80013e2:	f107 0208 	add.w	r2, r7, #8
 80013e6:	f107 010c 	add.w	r1, r7, #12
 80013ea:	2303      	movs	r3, #3
 80013ec:	480a      	ldr	r0, [pc, #40]	; (8001418 <tlaReadByte+0x4c>)
 80013ee:	f7ff ff49 	bl	8001284 <tlaSPIControl>
	trans_data[0] = 0x00;				// 受信専用のダミー
 80013f2:	2300      	movs	r3, #0
 80013f4:	733b      	strb	r3, [r7, #12]
	trans_data[1] = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	737b      	strb	r3, [r7, #13]
	trans_data[2] = 0x00;
 80013fa:	2300      	movs	r3, #0
 80013fc:	73bb      	strb	r3, [r7, #14]
	tlaSPIRead(SPI1, trans_data,receive_data, 3);
 80013fe:	f107 0208 	add.w	r2, r7, #8
 8001402:	f107 010c 	add.w	r1, r7, #12
 8001406:	2303      	movs	r3, #3
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <tlaReadByte+0x4c>)
 800140a:	f7ff ff8d 	bl	8001328 <tlaSPIRead>
	return receive_data[0];
 800140e:	7a3b      	ldrb	r3, [r7, #8]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40013000 	.word	0x40013000

0800141c <tlaWriteByte>:
// write_byte
//	@brief IMUにデータを送信する
// @param addres 書き込みたいデータのアドレス（IMU側データシートを参照）
// @param addres 書き込みたいデータの内容（IMU側データシートを参照）
//+++++++++++++++++++++++++++++++++++++++++++++++
void tlaWriteByte(uint8_t addres,uint8_t data) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	460a      	mov	r2, r1
 8001426:	71fb      	strb	r3, [r7, #7]
 8001428:	4613      	mov	r3, r2
 800142a:	71bb      	strb	r3, [r7, #6]
	uint8_t trans_data[3];
	uint8_t receive_data[3];

	trans_data[0] = 0x08;				//書込みコマンド
 800142c:	2308      	movs	r3, #8
 800142e:	733b      	strb	r3, [r7, #12]
	trans_data[1] = addres;
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	737b      	strb	r3, [r7, #13]
	trans_data[2] = data;
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	73bb      	strb	r3, [r7, #14]

	tlaSPIControl(SPI1, trans_data, receive_data, 3);
 8001438:	f107 0208 	add.w	r2, r7, #8
 800143c:	f107 010c 	add.w	r1, r7, #12
 8001440:	2303      	movs	r3, #3
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <tlaWriteByte+0x34>)
 8001444:	f7ff ff1e 	bl	8001284 <tlaSPIControl>
}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40013000 	.word	0x40013000

08001454 <tlaReadDataFormat>:
// tlaReadDataFormat
// @brief 手動モードでピン指定された後に呼び出される想定
// @param addres ほしいデータのアドレス（IMU側データシートを参照）
// @return 12bitに変換したADC後のデータ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t tlaReadDataFormat(uint8_t* id) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	uint8_t trans_data[3];
	uint8_t receive_data[3];
	uint16_t value = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	82fb      	strh	r3, [r7, #22]

	trans_data[0] = 0x00;				// ADCフェイズ用の待機と受信用の変換
 8001460:	2300      	movs	r3, #0
 8001462:	743b      	strb	r3, [r7, #16]
	trans_data[1] = 0x00;
 8001464:	2300      	movs	r3, #0
 8001466:	747b      	strb	r3, [r7, #17]
	trans_data[2] = 0x00;
 8001468:	2300      	movs	r3, #0
 800146a:	74bb      	strb	r3, [r7, #18]

	tlaSPIControl(SPI1, trans_data, receive_data, 3);
 800146c:	f107 020c 	add.w	r2, r7, #12
 8001470:	f107 0110 	add.w	r1, r7, #16
 8001474:	2303      	movs	r3, #3
 8001476:	4811      	ldr	r0, [pc, #68]	; (80014bc <tlaReadDataFormat+0x68>)
 8001478:	f7ff ff04 	bl	8001284 <tlaSPIControl>
	tlaSPIRead(SPI1, trans_data, receive_data, 3);
 800147c:	f107 020c 	add.w	r2, r7, #12
 8001480:	f107 0110 	add.w	r1, r7, #16
 8001484:	2303      	movs	r3, #3
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <tlaReadDataFormat+0x68>)
 8001488:	f7ff ff4e 	bl	8001328 <tlaSPIRead>

	value = ((uint16_t)receive_data[0]) << 4 | ((receive_data[1] & 0x40) >> 4);
 800148c:	7b3b      	ldrb	r3, [r7, #12]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	b21a      	sxth	r2, r3
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	111b      	asrs	r3, r3, #4
 8001496:	b21b      	sxth	r3, r3
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	82fb      	strh	r3, [r7, #22]
	*id = receive_data[1] & 0x04;
 80014a4:	7b7b      	ldrb	r3, [r7, #13]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	701a      	strb	r2, [r3, #0]
	return value;
 80014b0:	8afb      	ldrh	r3, [r7, #22]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40013000 	.word	0x40013000

080014c0 <dtla_initTLA2518>:
// initIMU
//	@brief IMUにデータを送信する
// @param addres 書き込みたいデータのアドレス（IMU側データシートを参照）
// @param addres 書き込みたいデータの内容（IMU側データシートを参照）
//+++++++++++++++++++++++++++++++++++++++++++++++
void dtla_initTLA2518(void){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	LL_SPI_Enable(SPI1);
 80014c6:	482d      	ldr	r0, [pc, #180]	; (800157c <dtla_initTLA2518+0xbc>)
 80014c8:	f7ff fe56 	bl	8001178 <LL_SPI_Enable>

	uint8_t default_value = tlaReadByte(SYSTEM_CONFIG_ADDR);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff ff7d 	bl	80013cc <tlaReadByte>
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
//			LL_mDelay(1000);
//		}
//	}
//	printf("ADC OK\n");

	tlaWriteByte(GENERAL_CFG_ADDR,GENERAL_CFG_VALUE),		LL_mDelay(10);
 80014d6:	2100      	movs	r1, #0
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff ff9f 	bl	800141c <tlaWriteByte>
 80014de:	200a      	movs	r0, #10
 80014e0:	f003 fcd8 	bl	8004e94 <LL_mDelay>
	tlaWriteByte(DATA_CFG_ADDR,DATA_CFG_VALUE),				LL_mDelay(10);
 80014e4:	2112      	movs	r1, #18
 80014e6:	2002      	movs	r0, #2
 80014e8:	f7ff ff98 	bl	800141c <tlaWriteByte>
 80014ec:	200a      	movs	r0, #10
 80014ee:	f003 fcd1 	bl	8004e94 <LL_mDelay>
	tlaWriteByte(OSR_CFG_ADDR,OSR_CFG_VALUE),				LL_mDelay(10);
 80014f2:	2100      	movs	r1, #0
 80014f4:	2003      	movs	r0, #3
 80014f6:	f7ff ff91 	bl	800141c <tlaWriteByte>
 80014fa:	200a      	movs	r0, #10
 80014fc:	f003 fcca 	bl	8004e94 <LL_mDelay>
	tlaWriteByte(OPMODE_CFG_ADDR,OPMODE_CFG_VALUE),			LL_mDelay(10);
 8001500:	2100      	movs	r1, #0
 8001502:	2004      	movs	r0, #4
 8001504:	f7ff ff8a 	bl	800141c <tlaWriteByte>
 8001508:	200a      	movs	r0, #10
 800150a:	f003 fcc3 	bl	8004e94 <LL_mDelay>

	tlaWriteByte(PIN_CFG_ADDR,PIN_CFG_VALUE),				LL_mDelay(10);
 800150e:	2132      	movs	r1, #50	; 0x32
 8001510:	2005      	movs	r0, #5
 8001512:	f7ff ff83 	bl	800141c <tlaWriteByte>
 8001516:	200a      	movs	r0, #10
 8001518:	f003 fcbc 	bl	8004e94 <LL_mDelay>
	tlaWriteByte(GPO_DRIVE_CFG_ADDR,GPO_DRIVE_CFG_VALUE),	LL_mDelay(10);
 800151c:	2132      	movs	r1, #50	; 0x32
 800151e:	2009      	movs	r0, #9
 8001520:	f7ff ff7c 	bl	800141c <tlaWriteByte>
 8001524:	200a      	movs	r0, #10
 8001526:	f003 fcb5 	bl	8004e94 <LL_mDelay>
	tlaWriteByte(SEQUENCE_CFG_ADDR,SEQUENCE_CFG_VALUE),		LL_mDelay(10);
 800152a:	2100      	movs	r1, #0
 800152c:	2010      	movs	r0, #16
 800152e:	f7ff ff75 	bl	800141c <tlaWriteByte>
 8001532:	200a      	movs	r0, #10
 8001534:	f003 fcae 	bl	8004e94 <LL_mDelay>

	printf("ADC_Status ? -> 0x%x\n", default_value);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4619      	mov	r1, r3
 800153c:	4810      	ldr	r0, [pc, #64]	; (8001580 <dtla_initTLA2518+0xc0>)
 800153e:	f004 f9f5 	bl	800592c <iprintf>
	if(default_value != SYSTEM_CONFIG_VALUE){
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b81      	cmp	r3, #129	; 0x81
 8001546:	d011      	beq.n	800156c <dtla_initTLA2518+0xac>
		while(default_value != SYSTEM_CONFIG_VALUE){
 8001548:	e00d      	b.n	8001566 <dtla_initTLA2518+0xa6>
			printf("ADC Error:ADC Status? -> 0x%x\n", default_value);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	4619      	mov	r1, r3
 800154e:	480d      	ldr	r0, [pc, #52]	; (8001584 <dtla_initTLA2518+0xc4>)
 8001550:	f004 f9ec 	bl	800592c <iprintf>
			default_value = tlaReadByte(SYSTEM_CONFIG_ADDR);
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff ff39 	bl	80013cc <tlaReadByte>
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
			LL_mDelay(1000);
 800155e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001562:	f003 fc97 	bl	8004e94 <LL_mDelay>
		while(default_value != SYSTEM_CONFIG_VALUE){
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b81      	cmp	r3, #129	; 0x81
 800156a:	d1ee      	bne.n	800154a <dtla_initTLA2518+0x8a>
		}
	}
	printf("ADC OK\n");
 800156c:	4806      	ldr	r0, [pc, #24]	; (8001588 <dtla_initTLA2518+0xc8>)
 800156e:	f004 fa43 	bl	80059f8 <puts>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40013000 	.word	0x40013000
 8001580:	08007984 	.word	0x08007984
 8001584:	0800799c 	.word	0x0800799c
 8001588:	080079bc 	.word	0x080079bc

0800158c <dtla_getAdcCH>:

//+++++++++++++++++++++++++++++++++++++++++++++++
// dtla_getAdcCH
//	@brief 特定のチャンネルからデータを抜き取る
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t dtla_getAdcCH(uint8_t hope_ch){
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
	uint16_t value = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	81fb      	strh	r3, [r7, #14]
	uint8_t ch_id = 9;
 800159a:	2309      	movs	r3, #9
 800159c:	737b      	strb	r3, [r7, #13]
	// まずは手動モードなので、チャンネル設定を書き込む
	tlaWriteByte(CHANNEL_SEL_ADDR, hope_ch);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4619      	mov	r1, r3
 80015a2:	2011      	movs	r0, #17
 80015a4:	f7ff ff3a 	bl	800141c <tlaWriteByte>
	// 読込を行うけど、レジスター読込とは少し異なるっぽい
	value = tlaReadDataFormat(&ch_id);
 80015a8:	f107 030d 	add.w	r3, r7, #13
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff51 	bl	8001454 <tlaReadDataFormat>
 80015b2:	4603      	mov	r3, r0
 80015b4:	81fb      	strh	r3, [r7, #14]
	printf("Value is %4d, ID is %d, ",value,ch_id);
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	7b7a      	ldrb	r2, [r7, #13]
 80015ba:	4619      	mov	r1, r3
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <dtla_getAdcCH+0x50>)
 80015be:	f004 f9b5 	bl	800592c <iprintf>
	if(hope_ch == ch_id)	return value;
 80015c2:	7b7b      	ldrb	r3, [r7, #13]
 80015c4:	79fa      	ldrb	r2, [r7, #7]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d101      	bne.n	80015ce <dtla_getAdcCH+0x42>
 80015ca:	89fb      	ldrh	r3, [r7, #14]
 80015cc:	e001      	b.n	80015d2 <dtla_getAdcCH+0x46>
	else					return 65535;
 80015ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	080079c4 	.word	0x080079c4

080015e0 <dbt_waitMs>:

/**
* @brief　	特定時間待機する関数
* @param	ms	待機する時間 [msec]
*/
void dbt_waitMs(uint16_t ms) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
	LL_mDelay(ms);
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 fc51 	bl	8004e94 <LL_mDelay>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	621a      	str	r2, [r3, #32]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1a      	ldr	r2, [r3, #32]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	43db      	mvns	r3, r3
 8001686:	401a      	ands	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	621a      	str	r2, [r3, #32]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_TIM_OC_SetIdleState>:
  *         @arg @ref LL_TIM_OCIDLESTATE_LOW
  *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d01c      	beq.n	80016e4 <LL_TIM_OC_SetIdleState+0x4c>
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d017      	beq.n	80016e0 <LL_TIM_OC_SetIdleState+0x48>
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2b10      	cmp	r3, #16
 80016b4:	d012      	beq.n	80016dc <LL_TIM_OC_SetIdleState+0x44>
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b40      	cmp	r3, #64	; 0x40
 80016ba:	d00d      	beq.n	80016d8 <LL_TIM_OC_SetIdleState+0x40>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c2:	d007      	beq.n	80016d4 <LL_TIM_OC_SetIdleState+0x3c>
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ca:	d101      	bne.n	80016d0 <LL_TIM_OC_SetIdleState+0x38>
 80016cc:	2305      	movs	r3, #5
 80016ce:	e00a      	b.n	80016e6 <LL_TIM_OC_SetIdleState+0x4e>
 80016d0:	2306      	movs	r3, #6
 80016d2:	e008      	b.n	80016e6 <LL_TIM_OC_SetIdleState+0x4e>
 80016d4:	2304      	movs	r3, #4
 80016d6:	e006      	b.n	80016e6 <LL_TIM_OC_SetIdleState+0x4e>
 80016d8:	2303      	movs	r3, #3
 80016da:	e004      	b.n	80016e6 <LL_TIM_OC_SetIdleState+0x4e>
 80016dc:	2302      	movs	r3, #2
 80016de:	e002      	b.n	80016e6 <LL_TIM_OC_SetIdleState+0x4e>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <LL_TIM_OC_SetIdleState+0x4e>
 80016e4:	2300      	movs	r3, #0
 80016e6:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iChannel]);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	490b      	ldr	r1, [pc, #44]	; (800171c <LL_TIM_OC_SetIdleState+0x84>)
 80016f0:	5ccb      	ldrb	r3, [r1, r3]
 80016f2:	4619      	mov	r1, r3
 80016f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f8:	408b      	lsls	r3, r1
 80016fa:	43db      	mvns	r3, r3
 80016fc:	401a      	ands	r2, r3
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	4906      	ldr	r1, [pc, #24]	; (800171c <LL_TIM_OC_SetIdleState+0x84>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	4619      	mov	r1, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	408b      	lsls	r3, r1
 800170a:	431a      	orrs	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	605a      	str	r2, [r3, #4]
}
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	08007b4c 	.word	0x08007b4c

08001720 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <dbz_enableMelody>:
* @return
* (@sa Functions to should refer to)
* @details
*/

void dbz_enableMelody(void){
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 8001760:	2110      	movs	r1, #16
 8001762:	4812      	ldr	r0, [pc, #72]	; (80017ac <dbz_enableMelody+0x50>)
 8001764:	f7ff ff86 	bl	8001674 <LL_TIM_CC_DisableChannel>
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2N);
 8001768:	2140      	movs	r1, #64	; 0x40
 800176a:	4810      	ldr	r0, [pc, #64]	; (80017ac <dbz_enableMelody+0x50>)
 800176c:	f7ff ff71 	bl	8001652 <LL_TIM_CC_EnableChannel>

	LL_TIM_OC_SetIdleState(TIM1, LL_TIM_CHANNEL_CH2N,1);
 8001770:	2201      	movs	r2, #1
 8001772:	2140      	movs	r1, #64	; 0x40
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <dbz_enableMelody+0x50>)
 8001776:	f7ff ff8f 	bl	8001698 <LL_TIM_OC_SetIdleState>
	LL_TIM_OC_SetIdleState(TIM1, LL_TIM_CHANNEL_CH2,0);
 800177a:	2200      	movs	r2, #0
 800177c:	2110      	movs	r1, #16
 800177e:	480b      	ldr	r0, [pc, #44]	; (80017ac <dbz_enableMelody+0x50>)
 8001780:	f7ff ff8a 	bl	8001698 <LL_TIM_OC_SetIdleState>

	LL_TIM_SetAutoReload(TIM1,100-1);
 8001784:	2163      	movs	r1, #99	; 0x63
 8001786:	4809      	ldr	r0, [pc, #36]	; (80017ac <dbz_enableMelody+0x50>)
 8001788:	f7ff ff55 	bl	8001636 <LL_TIM_SetAutoReload>
	LL_TIM_OC_SetCompareCH2(TIM1, 50-1);
 800178c:	2131      	movs	r1, #49	; 0x31
 800178e:	4807      	ldr	r0, [pc, #28]	; (80017ac <dbz_enableMelody+0x50>)
 8001790:	f7ff ffc6 	bl	8001720 <LL_TIM_OC_SetCompareCH2>
	LL_TIM_SetCounter(TIM1, 0);
 8001794:	2100      	movs	r1, #0
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <dbz_enableMelody+0x50>)
 8001798:	f7ff ff3f 	bl	800161a <LL_TIM_SetCounter>

	LL_TIM_EnableCounter(TIM1);
 800179c:	4803      	ldr	r0, [pc, #12]	; (80017ac <dbz_enableMelody+0x50>)
 800179e:	f7ff ff2c 	bl	80015fa <LL_TIM_EnableCounter>
	LL_TIM_EnableAllOutputs(TIM1);
 80017a2:	4802      	ldr	r0, [pc, #8]	; (80017ac <dbz_enableMelody+0x50>)
 80017a4:	f7ff ffca 	bl	800173c <LL_TIM_EnableAllOutputs>
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40010000 	.word	0x40010000

080017b0 <dbz_stopMelody>:
void dbz_disableMelody(void){
	LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2N);
	LL_TIM_DisableCounter(TIM1);
}

void dbz_stopMelody(void){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH2(TIM1, 1);
 80017b4:	2101      	movs	r1, #1
 80017b6:	4802      	ldr	r0, [pc, #8]	; (80017c0 <dbz_stopMelody+0x10>)
 80017b8:	f7ff ffb2 	bl	8001720 <LL_TIM_OC_SetCompareCH2>
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40010000 	.word	0x40010000

080017c4 <dbz_Melody>:

void dbz_Melody(uint16_t hz, uint16_t ms) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	460a      	mov	r2, r1
 80017ce:	80fb      	strh	r3, [r7, #6]
 80017d0:	4613      	mov	r3, r2
 80017d2:	80bb      	strh	r3, [r7, #4]
	LL_TIM_SetAutoReload(TIM1,100000/hz);
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <dbz_Melody+0x4c>)
 80017d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80017dc:	4619      	mov	r1, r3
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <dbz_Melody+0x50>)
 80017e0:	f7ff ff29 	bl	8001636 <LL_TIM_SetAutoReload>
	LL_TIM_OC_SetCompareCH2(TIM1, 95000 / hz );
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <dbz_Melody+0x54>)
 80017e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ec:	4619      	mov	r1, r3
 80017ee:	4809      	ldr	r0, [pc, #36]	; (8001814 <dbz_Melody+0x50>)
 80017f0:	f7ff ff96 	bl	8001720 <LL_TIM_OC_SetCompareCH2>
	LL_TIM_SetCounter(TIM1, 0);
 80017f4:	2100      	movs	r1, #0
 80017f6:	4807      	ldr	r0, [pc, #28]	; (8001814 <dbz_Melody+0x50>)
 80017f8:	f7ff ff0f 	bl	800161a <LL_TIM_SetCounter>
	LL_mDelay(ms);
 80017fc:	88bb      	ldrh	r3, [r7, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 fb48 	bl	8004e94 <LL_mDelay>
	dbz_stopMelody();
 8001804:	f7ff ffd4 	bl	80017b0 <dbz_stopMelody>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	000186a0 	.word	0x000186a0
 8001814:	40010000 	.word	0x40010000
 8001818:	00017318 	.word	0x00017318

0800181c <LL_TIM_EnableCounter>:
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	601a      	str	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_TIM_DisableCounter>:
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 0201 	bic.w	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	601a      	str	r2, [r3, #0]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <de_enableEncoder>:

/**
 * enableEncoder
* @brief　エンコーダ機能の有効化
*/
void de_enableEncoder(void){
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	// 使用するTIM関連の初期化
	TIM2->CNT = 0;
 8001860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001864:	2200      	movs	r2, #0
 8001866:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 0;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <de_enableEncoder+0x3c>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
	LL_TIM_EnableCounter(TIM2);
 800186e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001872:	f7ff ffd3 	bl	800181c <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM3);
 8001876:	4808      	ldr	r0, [pc, #32]	; (8001898 <de_enableEncoder+0x3c>)
 8001878:	f7ff ffd0 	bl	800181c <LL_TIM_EnableCounter>

	// 変数の初期化
	enc_pulse_left = 0;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <de_enableEncoder+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
	enc_pulse_sigma_left = 0;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <de_enableEncoder+0x44>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
	enc_pulse_right = 0;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <de_enableEncoder+0x48>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
	enc_pulse_sigma_right = 0;
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <de_enableEncoder+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40000400 	.word	0x40000400
 800189c:	200001e8 	.word	0x200001e8
 80018a0:	200001ec 	.word	0x200001ec
 80018a4:	200001f0 	.word	0x200001f0
 80018a8:	200001f4 	.word	0x200001f4

080018ac <de_disableEncoder>:

/* disableEncoder
* @brief　エンコーダ機能の有効化
*/
void de_disableEncoder(void){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	LL_TIM_DisableCounter(TIM2);
 80018b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018b4:	f7ff ffc2 	bl	800183c <LL_TIM_DisableCounter>
	LL_TIM_DisableCounter(TIM3);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <de_disableEncoder+0x18>)
 80018ba:	f7ff ffbf 	bl	800183c <LL_TIM_DisableCounter>
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40000400 	.word	0x40000400

080018c8 <de_resetEncoders>:

/* resetEncoders
* @brief　エンコーダ機能の有効化
*/
void de_resetEncoders(void){
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	enc_pulse_sigma_left = 0;
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <de_resetEncoders+0x1c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
	enc_pulse_sigma_right = 0;
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <de_resetEncoders+0x20>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	200001ec 	.word	0x200001ec
 80018e8:	200001f4 	.word	0x200001f4

080018ec <de_updateEncoders>:
/**
 * getEncoderData
* @brief エンコーダ関連の値を更新する、更新周期依存は関数の呼び出しタイミングに依存
* @param *TIMx 取得したいエンコーダタイマ、左:TIM3,  右: TIM2
*/
void de_updateEncoders(void){
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
	uint16_t u_count_r,u_count_l;	// レジスタから保存用
	int16_t count_r,count_l;		// 戻り値用の変数

	u_count_l = TIM3->CNT;		// 左エンコーダの値を取り出す
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <de_updateEncoders+0x80>)
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	807b      	strh	r3, [r7, #2]
	u_count_r = TIM2->CNT;		// 右エンコーダの値を取り出す
 80018f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	803b      	strh	r3, [r7, #0]

	TIM3->CNT = 0;
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <de_updateEncoders+0x80>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 0;
 8001906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800190a:	2200      	movs	r2, #0
 800190c:	625a      	str	r2, [r3, #36]	; 0x24
	// 値が逆回転していたら負に変換する
	if(u_count_l > 32767)	count_l = (int16_t)(65536 - u_count_l) *( -1);
 800190e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001912:	2b00      	cmp	r3, #0
 8001914:	da02      	bge.n	800191c <de_updateEncoders+0x30>
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	80bb      	strh	r3, [r7, #4]
 800191a:	e001      	b.n	8001920 <de_updateEncoders+0x34>
	else					count_l = (int16_t)u_count_l;
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	80bb      	strh	r3, [r7, #4]
	if(u_count_r > 32767)	count_r = (int16_t)(65536 - u_count_r) *( -1);
 8001920:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	da02      	bge.n	800192e <de_updateEncoders+0x42>
 8001928:	883b      	ldrh	r3, [r7, #0]
 800192a:	80fb      	strh	r3, [r7, #6]
 800192c:	e001      	b.n	8001932 <de_updateEncoders+0x46>
	else					count_r = (int16_t)u_count_r;
 800192e:	883b      	ldrh	r3, [r7, #0]
 8001930:	80fb      	strh	r3, [r7, #6]

	// 出力するための変数保存
	enc_pulse_left = count_l;
 8001932:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001936:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <de_updateEncoders+0x84>)
 8001938:	6013      	str	r3, [r2, #0]
	enc_pulse_right = count_r;
 800193a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193e:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <de_updateEncoders+0x88>)
 8001940:	6013      	str	r3, [r2, #0]
	enc_pulse_sigma_left += count_l;
 8001942:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <de_updateEncoders+0x8c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <de_updateEncoders+0x8c>)
 800194e:	6013      	str	r3, [r2, #0]
	enc_pulse_sigma_right += count_r;
 8001950:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <de_updateEncoders+0x90>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4413      	add	r3, r2
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <de_updateEncoders+0x90>)
 800195c:	6013      	str	r3, [r2, #0]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40000400 	.word	0x40000400
 8001970:	200001e8 	.word	0x200001e8
 8001974:	200001f0 	.word	0x200001f0
 8001978:	200001ec 	.word	0x200001ec
 800197c:	200001f4 	.word	0x200001f4

08001980 <de_getEncoderData>:
 * getEncoderData
* @brief エンコーダのパルスカウントを取得
* @param *TIMx 取得したいエンコーダ変数、左:TIM3,  右: TIM2
* @return パルスカウント数
*/
int32_t de_getEncoderData(uint8_t command){
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
	switch(command){
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d817      	bhi.n	80019c0 <de_getEncoderData+0x40>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <de_getEncoderData+0x18>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019a9 	.word	0x080019a9
 800199c:	080019b5 	.word	0x080019b5
 80019a0:	080019af 	.word	0x080019af
 80019a4:	080019bb 	.word	0x080019bb
		case LEFT_PULSE:		return enc_pulse_left; 			break;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <de_getEncoderData+0x50>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	e009      	b.n	80019c2 <de_getEncoderData+0x42>
		case RIGHT_PULSE:		return enc_pulse_right;			break;
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <de_getEncoderData+0x54>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	e006      	b.n	80019c2 <de_getEncoderData+0x42>
		case LEFT_SIGMA_PULSE:	return enc_pulse_sigma_left; 	break;
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <de_getEncoderData+0x58>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	e003      	b.n	80019c2 <de_getEncoderData+0x42>
		case RIGHT_SIGMA_PULSE:	return enc_pulse_sigma_right;	break;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <de_getEncoderData+0x5c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	e000      	b.n	80019c2 <de_getEncoderData+0x42>
	}
	return 0;	// 使うことないけど念のため
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	200001e8 	.word	0x200001e8
 80019d4:	200001f0 	.word	0x200001f0
 80019d8:	200001ec 	.word	0x200001ec
 80019dc:	200001f4 	.word	0x200001f4

080019e0 <LL_GPIO_SetOutputPin>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	619a      	str	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_GPIO_ResetOutputPin>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	619a      	str	r2, [r3, #24]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <di_lightLeftLED1>:

/**
* @brief 各個別のLEDの点灯状態を制御する関数群、正式運用時は一括のみを使う予定
* @param LEDのON・OFF、false -> OFF, true -> ON
*/
void di_lightLeftLED1(bool com){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
	if(com != 0)	LL_GPIO_SetOutputPin(IFL_LED1_GPIO_Port, IFL_LED1_Pin);
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <di_lightLeftLED1+0x1a>
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <di_lightLeftLED1+0x2c>)
 8001a30:	f7ff ffd6 	bl	80019e0 <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(IFL_LED1_GPIO_Port, IFL_LED1_Pin);
}
 8001a34:	e003      	b.n	8001a3e <di_lightLeftLED1+0x22>
	else			LL_GPIO_ResetOutputPin(IFL_LED1_GPIO_Port, IFL_LED1_Pin);
 8001a36:	2102      	movs	r1, #2
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <di_lightLeftLED1+0x2c>)
 8001a3a:	f7ff ffdf 	bl	80019fc <LL_GPIO_ResetOutputPin>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40020400 	.word	0x40020400

08001a4c <di_lightLeftLED2>:

void di_lightLeftLED2(bool com){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
	if(com)	LL_GPIO_SetOutputPin(IFL_LED2_GPIO_Port, IFL_LED2_Pin);
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <di_lightLeftLED2+0x1a>
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <di_lightLeftLED2+0x2c>)
 8001a60:	f7ff ffbe 	bl	80019e0 <LL_GPIO_SetOutputPin>
	else	LL_GPIO_ResetOutputPin(IFL_LED2_GPIO_Port, IFL_LED2_Pin);
}
 8001a64:	e003      	b.n	8001a6e <di_lightLeftLED2+0x22>
	else	LL_GPIO_ResetOutputPin(IFL_LED2_GPIO_Port, IFL_LED2_Pin);
 8001a66:	2104      	movs	r1, #4
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <di_lightLeftLED2+0x2c>)
 8001a6a:	f7ff ffc7 	bl	80019fc <LL_GPIO_ResetOutputPin>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40020400 	.word	0x40020400

08001a7c <di_lightLeftLED3>:

void di_lightLeftLED3(bool com){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
	if(com)	LL_GPIO_SetOutputPin(IFL_LED3_GPIO_Port, IFL_LED3_Pin);
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <di_lightLeftLED3+0x1c>
 8001a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a90:	4806      	ldr	r0, [pc, #24]	; (8001aac <di_lightLeftLED3+0x30>)
 8001a92:	f7ff ffa5 	bl	80019e0 <LL_GPIO_SetOutputPin>
	else	LL_GPIO_ResetOutputPin(IFL_LED3_GPIO_Port, IFL_LED3_Pin);
}
 8001a96:	e004      	b.n	8001aa2 <di_lightLeftLED3+0x26>
	else	LL_GPIO_ResetOutputPin(IFL_LED3_GPIO_Port, IFL_LED3_Pin);
 8001a98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <di_lightLeftLED3+0x30>)
 8001a9e:	f7ff ffad 	bl	80019fc <LL_GPIO_ResetOutputPin>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40020400 	.word	0x40020400

08001ab0 <di_lightRightLED1>:

void di_lightRightLED1(bool com){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	if(com)	LL_GPIO_SetOutputPin(IFR_LED1_GPIO_Port, IFR_LED1_Pin);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <di_lightRightLED1+0x1c>
 8001ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac4:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <di_lightRightLED1+0x30>)
 8001ac6:	f7ff ff8b 	bl	80019e0 <LL_GPIO_SetOutputPin>
	else	LL_GPIO_ResetOutputPin(IFR_LED1_GPIO_Port, IFR_LED1_Pin);
}
 8001aca:	e004      	b.n	8001ad6 <di_lightRightLED1+0x26>
	else	LL_GPIO_ResetOutputPin(IFR_LED1_GPIO_Port, IFR_LED1_Pin);
 8001acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <di_lightRightLED1+0x30>)
 8001ad2:	f7ff ff93 	bl	80019fc <LL_GPIO_ResetOutputPin>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40020400 	.word	0x40020400

08001ae4 <di_lightRightLED2>:

void di_lightRightLED2(bool com){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
	if(com)	LL_GPIO_SetOutputPin(IFR_LED2_GPIO_Port, IFR_LED2_Pin);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <di_lightRightLED2+0x1c>
 8001af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af8:	4806      	ldr	r0, [pc, #24]	; (8001b14 <di_lightRightLED2+0x30>)
 8001afa:	f7ff ff71 	bl	80019e0 <LL_GPIO_SetOutputPin>
	else	LL_GPIO_ResetOutputPin(IFR_LED2_GPIO_Port, IFR_LED2_Pin);
}
 8001afe:	e004      	b.n	8001b0a <di_lightRightLED2+0x26>
	else	LL_GPIO_ResetOutputPin(IFR_LED2_GPIO_Port, IFR_LED2_Pin);
 8001b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b04:	4803      	ldr	r0, [pc, #12]	; (8001b14 <di_lightRightLED2+0x30>)
 8001b06:	f7ff ff79 	bl	80019fc <LL_GPIO_ResetOutputPin>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40020000 	.word	0x40020000

08001b18 <di_lightRightLED3>:

void di_lightRightLED3(bool com){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
	if(com)	LL_GPIO_SetOutputPin(IFR_LED3_GPIO_Port, IFR_LED3_Pin);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <di_lightRightLED3+0x1c>
 8001b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2c:	4806      	ldr	r0, [pc, #24]	; (8001b48 <di_lightRightLED3+0x30>)
 8001b2e:	f7ff ff57 	bl	80019e0 <LL_GPIO_SetOutputPin>
	else	LL_GPIO_ResetOutputPin(IFR_LED3_GPIO_Port, IFR_LED3_Pin);
}
 8001b32:	e004      	b.n	8001b3e <di_lightRightLED3+0x26>
	else	LL_GPIO_ResetOutputPin(IFR_LED3_GPIO_Port, IFR_LED3_Pin);
 8001b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <di_lightRightLED3+0x30>)
 8001b3a:	f7ff ff5f 	bl	80019fc <LL_GPIO_ResetOutputPin>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40020000 	.word	0x40020000

08001b4c <di_lightLeftLEDs>:

/**
* @brief LEDの点灯状態を一括して制御する関数群、正式運用時は一括のみを使う予定
* @param 各LEDのON・OFF、上位4bit -> 左LED群、下位4bit ->　右LED群
*/
void di_lightLeftLEDs(uint8_t command){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
	uint8_t masked_commnad = (command & 0xf0) >> 4;
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	73fb      	strb	r3, [r7, #15]
	di_lightLeftLED1((masked_commnad&0x01));
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf14      	ite	ne
 8001b66:	2301      	movne	r3, #1
 8001b68:	2300      	moveq	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff55 	bl	8001a1c <di_lightLeftLED1>
	di_lightLeftLED2((masked_commnad&0x02)>>1);
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	105b      	asrs	r3, r3, #1
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf14      	ite	ne
 8001b7e:	2301      	movne	r3, #1
 8001b80:	2300      	moveq	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff61 	bl	8001a4c <di_lightLeftLED2>
	di_lightLeftLED3((masked_commnad&0x04)>>2);
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	109b      	asrs	r3, r3, #2
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf14      	ite	ne
 8001b96:	2301      	movne	r3, #1
 8001b98:	2300      	moveq	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff6d 	bl	8001a7c <di_lightLeftLED3>
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <di_lightRightLEDs>:
void di_lightRightLEDs(uint8_t command){
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
	uint8_t masked_commnad = (command & 0x0f);
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	73fb      	strb	r3, [r7, #15]
	di_lightRightLED1((masked_commnad&0x01));
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff6f 	bl	8001ab0 <di_lightRightLED1>
	di_lightRightLED2((masked_commnad&0x02)>>1);
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	105b      	asrs	r3, r3, #1
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bf14      	ite	ne
 8001bde:	2301      	movne	r3, #1
 8001be0:	2300      	moveq	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff7d 	bl	8001ae4 <di_lightRightLED2>
	di_lightRightLED3((masked_commnad&0x04)>>2);
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	109b      	asrs	r3, r3, #2
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	bf14      	ite	ne
 8001bf6:	2301      	movne	r3, #1
 8001bf8:	2300      	moveq	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff8b 	bl	8001b18 <di_lightRightLED3>
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <di_lightIndicators>:
void di_lightIndicators(uint8_t command){
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
	di_lightLeftLEDs(command&0xf0);
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	f023 030f 	bic.w	r3, r3, #15
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff95 	bl	8001b4c <di_lightLeftLEDs>
	di_lightRightLEDs(command&0x0f);
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ffbd 	bl	8001baa <di_lightRightLEDs>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <LL_TIM_DisableCounter>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 0201 	bic.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	601a      	str	r2, [r3, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_TIM_DisableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_DisableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f023 0201 	bic.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_TIM_DisableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_DisableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_CC1(TIM_TypeDef *TIMx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f023 0202 	bic.w	r2, r3, #2
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	60da      	str	r2, [r3, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_TIM_DisableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_DisableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_CC2(TIM_TypeDef *TIMx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f023 0204 	bic.w	r2, r3, #4
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	60da      	str	r2, [r3, #12]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_GPIO_SetOutputPin>:
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	619a      	str	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_GPIO_ResetOutputPin>:
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <dm_brakeLeftMotors>:
}

/**
* @brief 左モータを静止する。急速に止まるはず。
*/
void dm_brakeLeftMotors(void){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	// 左モータについて
	LL_GPIO_SetOutputPin(MOTOR_L_IN1_GPIO_Port,MOTOR_L_IN1_Pin);
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	4804      	ldr	r0, [pc, #16]	; (8001d0c <dm_brakeLeftMotors+0x18>)
 8001cfc:	f7ff ffdc 	bl	8001cb8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(MOTOR_L_IN2_GPIO_Port,MOTOR_L_IN2_Pin);
 8001d00:	2108      	movs	r1, #8
 8001d02:	4802      	ldr	r0, [pc, #8]	; (8001d0c <dm_brakeLeftMotors+0x18>)
 8001d04:	f7ff ffd8 	bl	8001cb8 <LL_GPIO_SetOutputPin>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40020000 	.word	0x40020000

08001d10 <dm_brakeRightMotors>:

/**
* @brief 右モータを静止する。急速に止まるはず。
*/
void dm_brakeRightMotors(void){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	// 左モータについて
	LL_GPIO_SetOutputPin(MOTOR_R_IN1_GPIO_Port,MOTOR_R_IN1_Pin);
 8001d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <dm_brakeRightMotors+0x1c>)
 8001d1a:	f7ff ffcd 	bl	8001cb8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(MOTOR_R_IN2_GPIO_Port,MOTOR_R_IN2_Pin);
 8001d1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d22:	4802      	ldr	r0, [pc, #8]	; (8001d2c <dm_brakeRightMotors+0x1c>)
 8001d24:	f7ff ffc8 	bl	8001cb8 <LL_GPIO_SetOutputPin>
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40020400 	.word	0x40020400

08001d30 <dm_brakeMotors>:

/**
* @brief モータを静止する。急速に止まるはず。
*/
void dm_brakeMotors(void){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	dm_brakeLeftMotors();
 8001d34:	f7ff ffde 	bl	8001cf4 <dm_brakeLeftMotors>
	dm_brakeRightMotors();
 8001d38:	f7ff ffea 	bl	8001d10 <dm_brakeRightMotors>
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <dm_driveRightMotor>:
}
/**
* @brief モータを静止する。急速に止まるはず。
* @param 回転方向, 0:Forward, 1:Back
*/
void dm_driveRightMotor(uint8_t dir){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(dir == FORWARD){
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10a      	bne.n	8001d66 <dm_driveRightMotor+0x26>
		LL_GPIO_ResetOutputPin(MOTOR_R_IN1_GPIO_Port,MOTOR_R_IN1_Pin);
 8001d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d54:	480b      	ldr	r0, [pc, #44]	; (8001d84 <dm_driveRightMotor+0x44>)
 8001d56:	f7ff ffbd 	bl	8001cd4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(MOTOR_R_IN2_GPIO_Port,MOTOR_R_IN2_Pin);
 8001d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d5e:	4809      	ldr	r0, [pc, #36]	; (8001d84 <dm_driveRightMotor+0x44>)
 8001d60:	f7ff ffaa 	bl	8001cb8 <LL_GPIO_SetOutputPin>
	}else{
		LL_GPIO_SetOutputPin(MOTOR_R_IN1_GPIO_Port,MOTOR_R_IN1_Pin);
		LL_GPIO_ResetOutputPin(MOTOR_R_IN2_GPIO_Port,MOTOR_R_IN2_Pin);
	}
}
 8001d64:	e009      	b.n	8001d7a <dm_driveRightMotor+0x3a>
		LL_GPIO_SetOutputPin(MOTOR_R_IN1_GPIO_Port,MOTOR_R_IN1_Pin);
 8001d66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d6a:	4806      	ldr	r0, [pc, #24]	; (8001d84 <dm_driveRightMotor+0x44>)
 8001d6c:	f7ff ffa4 	bl	8001cb8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(MOTOR_R_IN2_GPIO_Port,MOTOR_R_IN2_Pin);
 8001d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <dm_driveRightMotor+0x44>)
 8001d76:	f7ff ffad 	bl	8001cd4 <LL_GPIO_ResetOutputPin>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40020400 	.word	0x40020400

08001d88 <dm_driveLeftMotor>:
void dm_driveLeftMotor(uint8_t dir){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
	if(dir == FORWARD){
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d108      	bne.n	8001daa <dm_driveLeftMotor+0x22>
		LL_GPIO_ResetOutputPin(MOTOR_L_IN1_GPIO_Port,MOTOR_L_IN1_Pin);
 8001d98:	2104      	movs	r1, #4
 8001d9a:	480a      	ldr	r0, [pc, #40]	; (8001dc4 <dm_driveLeftMotor+0x3c>)
 8001d9c:	f7ff ff9a 	bl	8001cd4 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(MOTOR_L_IN2_GPIO_Port,MOTOR_L_IN2_Pin);
 8001da0:	2108      	movs	r1, #8
 8001da2:	4808      	ldr	r0, [pc, #32]	; (8001dc4 <dm_driveLeftMotor+0x3c>)
 8001da4:	f7ff ff88 	bl	8001cb8 <LL_GPIO_SetOutputPin>
	}else{
		LL_GPIO_SetOutputPin(MOTOR_L_IN1_GPIO_Port,MOTOR_L_IN1_Pin);
		LL_GPIO_ResetOutputPin(MOTOR_L_IN2_GPIO_Port,MOTOR_L_IN2_Pin);
	}
}
 8001da8:	e007      	b.n	8001dba <dm_driveLeftMotor+0x32>
		LL_GPIO_SetOutputPin(MOTOR_L_IN1_GPIO_Port,MOTOR_L_IN1_Pin);
 8001daa:	2104      	movs	r1, #4
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <dm_driveLeftMotor+0x3c>)
 8001dae:	f7ff ff83 	bl	8001cb8 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(MOTOR_L_IN2_GPIO_Port,MOTOR_L_IN2_Pin);
 8001db2:	2108      	movs	r1, #8
 8001db4:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <dm_driveLeftMotor+0x3c>)
 8001db6:	f7ff ff8d 	bl	8001cd4 <LL_GPIO_ResetOutputPin>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <dm_disableMotors>:

/**
* @brief モータ回転を無効化する。duty関連はHIGHにしておく。
*/
void dm_disableMotors(void){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	// 完全に一回止める
	LL_TIM_DisableCounter(TIM5);
 8001dcc:	4807      	ldr	r0, [pc, #28]	; (8001dec <dm_disableMotors+0x24>)
 8001dce:	f7ff ff33 	bl	8001c38 <LL_TIM_DisableCounter>

	LL_TIM_DisableIT_UPDATE(TIM5);
 8001dd2:	4806      	ldr	r0, [pc, #24]	; (8001dec <dm_disableMotors+0x24>)
 8001dd4:	f7ff ff40 	bl	8001c58 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableIT_CC1(TIM5);
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <dm_disableMotors+0x24>)
 8001dda:	f7ff ff4d 	bl	8001c78 <LL_TIM_DisableIT_CC1>
	LL_TIM_DisableIT_CC2(TIM5);
 8001dde:	4803      	ldr	r0, [pc, #12]	; (8001dec <dm_disableMotors+0x24>)
 8001de0:	f7ff ff5a 	bl	8001c98 <LL_TIM_DisableIT_CC2>

	// 念のため、モータの設定を止めておく
	dm_brakeMotors();
 8001de4:	f7ff ffa4 	bl	8001d30 <dm_brakeMotors>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40000c00 	.word	0x40000c00

08001df0 <dm_updateMotors>:
/**
* @brief PWMを生成し、LOW周期修了タイミングで呼ばれる関数
* @param 0xf0 -> 左モータ、0x0f -> 右モータ
* @return 次のタイマのcounter.period
*/
uint16_t dm_updateMotors(uint8_t which){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
	switch(which){
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d00e      	beq.n	8001e1e <dm_updateMotors+0x2e>
 8001e00:	2bf0      	cmp	r3, #240	; 0xf0
 8001e02:	d119      	bne.n	8001e38 <dm_updateMotors+0x48>
		case LEFT_MOTOR:
			dm_driveLeftMotor(motor_left_dir);
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <dm_updateMotors+0x54>)
 8001e06:	f993 3000 	ldrsb.w	r3, [r3]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ffbb 	bl	8001d88 <dm_driveLeftMotor>
			return 2*duty_left_abs;
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <dm_updateMotors+0x58>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	e00d      	b.n	8001e3a <dm_updateMotors+0x4a>
			break;
		case RIGHT_MOTOR:
			dm_driveRightMotor(motor_right_dir);
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <dm_updateMotors+0x5c>)
 8001e20:	f993 3000 	ldrsb.w	r3, [r3]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff8a 	bl	8001d40 <dm_driveRightMotor>
			return 2*duty_right_abs;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <dm_updateMotors+0x60>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	e000      	b.n	8001e3a <dm_updateMotors+0x4a>
			break;
		default:
			return 10;
 8001e38:	230a      	movs	r3, #10
			break;
	}
	return 0;
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200001f8 	.word	0x200001f8
 8001e48:	200001fa 	.word	0x200001fa
 8001e4c:	200001f9 	.word	0x200001f9
 8001e50:	200001fb 	.word	0x200001fb

08001e54 <selectMainMode>:

/**
* @brief　	モードはメインメニューから各項目が選べる形式。とりあえず再左は使わない方針にしたい
* 			メインでどのモード選択かをまず選ぶ
*/
void selectMainMode(){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
	uint8_t mode = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	71fb      	strb	r3, [r7, #7]
	// ダイアルを起動する
	ud_startDial();
 8001e5e:	f000 f93f 	bl	80020e0 <ud_startDial>
	// モード選択を実行する
	mode = ud_selectDial(1);
 8001e62:	2001      	movs	r0, #1
 8001e64:	f000 f9ac 	bl	80021c0 <ud_selectDial>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
	// ダイアルをオフにする
	ud_stopDial();
 8001e6c:	f000 f956 	bl	800211c <ud_stopDial>

	di_lightLeftLEDs(0x0f),dbt_waitMs(100);
 8001e70:	200f      	movs	r0, #15
 8001e72:	f7ff fe6b 	bl	8001b4c <di_lightLeftLEDs>
 8001e76:	2064      	movs	r0, #100	; 0x64
 8001e78:	f7ff fbb2 	bl	80015e0 <dbt_waitMs>
	di_lightLeftLEDs(0x00),dbt_waitMs(100);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff fe65 	bl	8001b4c <di_lightLeftLEDs>
 8001e82:	2064      	movs	r0, #100	; 0x64
 8001e84:	f7ff fbac 	bl	80015e0 <dbt_waitMs>
	di_lightLeftLEDs(0x0f),dbt_waitMs(100);
 8001e88:	200f      	movs	r0, #15
 8001e8a:	f7ff fe5f 	bl	8001b4c <di_lightLeftLEDs>
 8001e8e:	2064      	movs	r0, #100	; 0x64
 8001e90:	f7ff fba6 	bl	80015e0 <dbt_waitMs>
	di_lightLeftLEDs(0x00),dbt_waitMs(100);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff fe59 	bl	8001b4c <di_lightLeftLEDs>
 8001e9a:	2064      	movs	r0, #100	; 0x64
 8001e9c:	f7ff fba0 	bl	80015e0 <dbt_waitMs>

	switch(mode){
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	2b07      	cmp	r3, #7
 8001ea4:	d824      	bhi.n	8001ef0 <selectMainMode+0x9c>
 8001ea6:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <selectMainMode+0x58>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001ecd 	.word	0x08001ecd
 8001eb0:	08001ed5 	.word	0x08001ed5
 8001eb4:	08001edd 	.word	0x08001edd
 8001eb8:	08001ee5 	.word	0x08001ee5
 8001ebc:	08001ef1 	.word	0x08001ef1
 8001ec0:	08001ef1 	.word	0x08001ef1
 8001ec4:	08001ef1 	.word	0x08001ef1
 8001ec8:	08001ef1 	.word	0x08001ef1
		case 0:
			printf("Mode: No-mode Search\n");
 8001ecc:	480b      	ldr	r0, [pc, #44]	; (8001efc <selectMainMode+0xa8>)
 8001ece:	f003 fd93 	bl	80059f8 <puts>
			break;
 8001ed2:	e00e      	b.n	8001ef2 <selectMainMode+0x9e>
		case 1:
			printf("Mode: No-mode Fast Run\n");
 8001ed4:	480a      	ldr	r0, [pc, #40]	; (8001f00 <selectMainMode+0xac>)
 8001ed6:	f003 fd8f 	bl	80059f8 <puts>
			break;
 8001eda:	e00a      	b.n	8001ef2 <selectMainMode+0x9e>
		case 2:
			printf("Mode: No-mode Test Mode\n");
 8001edc:	4809      	ldr	r0, [pc, #36]	; (8001f04 <selectMainMode+0xb0>)
 8001ede:	f003 fd8b 	bl	80059f8 <puts>
			break;
 8001ee2:	e006      	b.n	8001ef2 <selectMainMode+0x9e>
		case 3:
			printf("Mode: Battery Test Mode\n");
 8001ee4:	4808      	ldr	r0, [pc, #32]	; (8001f08 <selectMainMode+0xb4>)
 8001ee6:	f003 fd87 	bl	80059f8 <puts>
			selectTestMode();
 8001eea:	f000 f80f 	bl	8001f0c <selectTestMode>
			break;
 8001eee:	e000      	b.n	8001ef2 <selectMainMode+0x9e>
		case 6:
			break;
		case 7:
			break;
		default:	// 基本は存在しないはず
			break;
 8001ef0:	bf00      	nop
	}
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	080079e0 	.word	0x080079e0
 8001f00:	080079f8 	.word	0x080079f8
 8001f04:	08007a10 	.word	0x08007a10
 8001f08:	08007a28 	.word	0x08007a28

08001f0c <selectTestMode>:

void selectRunMode(){

}

void selectTestMode(){
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
	uint8_t mode = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	71fb      	strb	r3, [r7, #7]
	di_lightLeftLEDs(0xf0);
 8001f16:	20f0      	movs	r0, #240	; 0xf0
 8001f18:	f7ff fe18 	bl	8001b4c <di_lightLeftLEDs>
	// ダイアルを起動する
	ud_startDial();
 8001f1c:	f000 f8e0 	bl	80020e0 <ud_startDial>
	// モード選択を実行する
	mode = ud_selectDial(1);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f000 f94d 	bl	80021c0 <ud_selectDial>
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
	// ダイアルをオフにする
	ud_stopDial();
 8001f2a:	f000 f8f7 	bl	800211c <ud_stopDial>

	di_lightLeftLEDs(0x0f),dbt_waitMs(100);
 8001f2e:	200f      	movs	r0, #15
 8001f30:	f7ff fe0c 	bl	8001b4c <di_lightLeftLEDs>
 8001f34:	2064      	movs	r0, #100	; 0x64
 8001f36:	f7ff fb53 	bl	80015e0 <dbt_waitMs>
	di_lightLeftLEDs(0x00),dbt_waitMs(100);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff fe06 	bl	8001b4c <di_lightLeftLEDs>
 8001f40:	2064      	movs	r0, #100	; 0x64
 8001f42:	f7ff fb4d 	bl	80015e0 <dbt_waitMs>
	di_lightLeftLEDs(0x0f),dbt_waitMs(100);
 8001f46:	200f      	movs	r0, #15
 8001f48:	f7ff fe00 	bl	8001b4c <di_lightLeftLEDs>
 8001f4c:	2064      	movs	r0, #100	; 0x64
 8001f4e:	f7ff fb47 	bl	80015e0 <dbt_waitMs>
	di_lightLeftLEDs(0x00),dbt_waitMs(100);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff fdfa 	bl	8001b4c <di_lightLeftLEDs>
 8001f58:	2064      	movs	r0, #100	; 0x64
 8001f5a:	f7ff fb41 	bl	80015e0 <dbt_waitMs>

	switch(mode){
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2b07      	cmp	r3, #7
 8001f62:	d825      	bhi.n	8001fb0 <selectTestMode+0xa4>
 8001f64:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <selectTestMode+0x60>)
 8001f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6a:	bf00      	nop
 8001f6c:	08001f8d 	.word	0x08001f8d
 8001f70:	08001f95 	.word	0x08001f95
 8001f74:	08001f9d 	.word	0x08001f9d
 8001f78:	08001fa5 	.word	0x08001fa5
 8001f7c:	08001fb1 	.word	0x08001fb1
 8001f80:	08001fb1 	.word	0x08001fb1
 8001f84:	08001fb1 	.word	0x08001fb1
 8001f88:	08001fb1 	.word	0x08001fb1
		case 0:
			printf("TestMode: No-mode\n");
 8001f8c:	480b      	ldr	r0, [pc, #44]	; (8001fbc <selectTestMode+0xb0>)
 8001f8e:	f003 fd33 	bl	80059f8 <puts>
			break;
 8001f92:	e00e      	b.n	8001fb2 <selectTestMode+0xa6>
		case 1:
			printf("TestMode: No-mode\n");
 8001f94:	4809      	ldr	r0, [pc, #36]	; (8001fbc <selectTestMode+0xb0>)
 8001f96:	f003 fd2f 	bl	80059f8 <puts>
			break;
 8001f9a:	e00a      	b.n	8001fb2 <selectTestMode+0xa6>
		case 2:
			printf("TestMode: No-mode\n");
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <selectTestMode+0xb0>)
 8001f9e:	f003 fd2b 	bl	80059f8 <puts>
			break;
 8001fa2:	e006      	b.n	8001fb2 <selectTestMode+0xa6>
		case 3:
			printf("TestMode: Battery Test\n");
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <selectTestMode+0xb4>)
 8001fa6:	f003 fd27 	bl	80059f8 <puts>
			testBattery();
 8001faa:	f000 f885 	bl	80020b8 <testBattery>
			break;
 8001fae:	e000      	b.n	8001fb2 <selectTestMode+0xa6>
		case 6:
			break;
		case 7:
			break;
		default:	// 基本は存在しないはず
			break;
 8001fb0:	bf00      	nop
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	08007a40 	.word	0x08007a40
 8001fc0:	08007a54 	.word	0x08007a54

08001fc4 <LL_TIM_OC_SetCompareCH1>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_TIM_OC_SetCompareCH2>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <doInitializeTask>:
uint32_t count1,count2,count_a,count_tim5;

/**
* @brief main loop 	前に1度だけ行う処理
*/
void doInitializeTask(void){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	dbz_enableMelody();
 8002000:	f7ff fbac 	bl	800175c <dbz_enableMelody>
	dbt_waitMs(1000);
 8002004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002008:	f7ff faea 	bl	80015e0 <dbt_waitMs>
	printf("Akatsuki System Open\n");
 800200c:	480c      	ldr	r0, [pc, #48]	; (8002040 <doInitializeTask+0x44>)
 800200e:	f003 fcf3 	bl	80059f8 <puts>
	dm_disableMotors();
 8002012:	f7ff fed9 	bl	8001dc8 <dm_disableMotors>
	dmpu_initIMU();
 8002016:	f7ff f85f 	bl	80010d8 <dmpu_initIMU>
	dtla_initTLA2518();
 800201a:	f7ff fa51 	bl	80014c0 <dtla_initTLA2518>
	um_MelodySummer();
 800201e:	f000 f935 	bl	800228c <um_MelodySummer>
	de_enableEncoder();
 8002022:	f7ff fc1b 	bl	800185c <de_enableEncoder>

//	basicTimerStart();

	// 初期化修了
	di_lightIndicators(0xff);
 8002026:	20ff      	movs	r0, #255	; 0xff
 8002028:	f7ff fdef 	bl	8001c0a <di_lightIndicators>
	dbt_waitMs(500);
 800202c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002030:	f7ff fad6 	bl	80015e0 <dbt_waitMs>
	di_lightIndicators(0x00);
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff fde8 	bl	8001c0a <di_lightIndicators>
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	08007a6c 	.word	0x08007a6c

08002044 <doloopTask>:

/**
* @brief main loop中の処理
*/
void doloopTask(void){
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	printf("Loop Task In\n");
 8002048:	4804      	ldr	r0, [pc, #16]	; (800205c <doloopTask+0x18>)
 800204a:	f003 fcd5 	bl	80059f8 <puts>
	while(1){
		selectMainMode();
 800204e:	f7ff ff01 	bl	8001e54 <selectMainMode>
		printf("Loop Task Out\n");
 8002052:	4803      	ldr	r0, [pc, #12]	; (8002060 <doloopTask+0x1c>)
 8002054:	f003 fcd0 	bl	80059f8 <puts>
		selectMainMode();
 8002058:	e7f9      	b.n	800204e <doloopTask+0xa>
 800205a:	bf00      	nop
 800205c:	08007a84 	.word	0x08007a84
 8002060:	08007a94 	.word	0x08007a94

08002064 <doCallbackTask>:
}

/**
* @brief 1kHz タイマ割込みのタスク
*/
void doCallbackTask(void){
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <doMotorLeftCallbackTask>:

/**
* @brief 左モータDutyHIGH周期 callbackで行う処理
*/
void doMotorLeftCallbackTask(void){
 8002072:	b580      	push	{r7, lr}
 8002074:	af00      	add	r7, sp, #0
	dm_brakeLeftMotors();
 8002076:	f7ff fe3d 	bl	8001cf4 <dm_brakeLeftMotors>
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}

0800207e <doMotorRightCallbackTask>:

/**
* @brief 右モータDutyHIGH周期 callbackで行う処理
*/
void doMotorRightCallbackTask(void){
 800207e:	b580      	push	{r7, lr}
 8002080:	af00      	add	r7, sp, #0
	dm_brakeRightMotors();
 8002082:	f7ff fe45 	bl	8001d10 <dm_brakeRightMotors>
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <doMotorBothCallbackTask>:

/**
* @brief 両方モータ
*/
void doMotorBothCallbackTask(void){
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH1(TIM5, dm_updateMotors(0xf0));
 8002090:	20f0      	movs	r0, #240	; 0xf0
 8002092:	f7ff fead 	bl	8001df0 <dm_updateMotors>
 8002096:	4603      	mov	r3, r0
 8002098:	4619      	mov	r1, r3
 800209a:	4806      	ldr	r0, [pc, #24]	; (80020b4 <doMotorBothCallbackTask+0x28>)
 800209c:	f7ff ff92 	bl	8001fc4 <LL_TIM_OC_SetCompareCH1>
	LL_TIM_OC_SetCompareCH2(TIM5, dm_updateMotors(0x0f));
 80020a0:	200f      	movs	r0, #15
 80020a2:	f7ff fea5 	bl	8001df0 <dm_updateMotors>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4619      	mov	r1, r3
 80020aa:	4802      	ldr	r0, [pc, #8]	; (80020b4 <doMotorBothCallbackTask+0x28>)
 80020ac:	f7ff ff98 	bl	8001fe0 <LL_TIM_OC_SetCompareCH2>

//	LL_TIM_SetAutoReload(TIM5,200-1);
//	LL_TIM_SetCounter(TIM5, 0);
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40000c00 	.word	0x40000c00

080020b8 <testBattery>:
}

/**
* @brief 壁センサの
*/
void testBattery(void){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
	uint16_t battery_adc = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	80fb      	strh	r3, [r7, #6]
	while(1){
		dtla_getAdcCH(0x00);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7ff fa62 	bl	800158c <dtla_getAdcCH>
		printf("Check Battery is %d\n",battery_adc);
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	4619      	mov	r1, r3
 80020cc:	4803      	ldr	r0, [pc, #12]	; (80020dc <testBattery+0x24>)
 80020ce:	f003 fc2d 	bl	800592c <iprintf>
		dbt_waitMs(500);
 80020d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020d6:	f7ff fa83 	bl	80015e0 <dbt_waitMs>
		dtla_getAdcCH(0x00);
 80020da:	e7f2      	b.n	80020c2 <testBattery+0xa>
 80020dc:	08007b14 	.word	0x08007b14

080020e0 <ud_startDial>:
#include"Device/d_indicator.h"

const int MAX_MODE_NUM = 8;
t_dial right,left;

void ud_startDial(){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	// ダイアル使う前の変数初期化
	right.mode = 0;
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <ud_startDial+0x34>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
	right.ratio = 0.0;
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <ud_startDial+0x34>)
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	605a      	str	r2, [r3, #4]
	right.row_value = 0;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <ud_startDial+0x34>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	805a      	strh	r2, [r3, #2]
	left.mode = 0;
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <ud_startDial+0x38>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
	left.ratio = 0.0f;
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <ud_startDial+0x38>)
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	605a      	str	r2, [r3, #4]
	left.row_value = 0;
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <ud_startDial+0x38>)
 8002108:	2200      	movs	r2, #0
 800210a:	805a      	strh	r2, [r3, #2]

	// エンコーダの有効化
	de_enableEncoder();
 800210c:	f7ff fba6 	bl	800185c <de_enableEncoder>
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	2000020c 	.word	0x2000020c
 8002118:	20000214 	.word	0x20000214

0800211c <ud_stopDial>:

void ud_stopDial(){
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	// ダイアル使った後の後処理
	right.mode = 0;
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <ud_stopDial+0x34>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
	right.ratio = 0.0;
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <ud_stopDial+0x34>)
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	605a      	str	r2, [r3, #4]
	right.row_value = 0;
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <ud_stopDial+0x34>)
 8002130:	2200      	movs	r2, #0
 8002132:	805a      	strh	r2, [r3, #2]
	left.mode = 0;
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <ud_stopDial+0x38>)
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
	left.ratio = 0.0f;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <ud_stopDial+0x38>)
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	605a      	str	r2, [r3, #4]
	left.row_value = 0;
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <ud_stopDial+0x38>)
 8002144:	2200      	movs	r2, #0
 8002146:	805a      	strh	r2, [r3, #2]

	// エンコーダ無効化
	de_disableEncoder();
 8002148:	f7ff fbb0 	bl	80018ac <de_disableEncoder>
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2000020c 	.word	0x2000020c
 8002154:	20000214 	.word	0x20000214

08002158 <ud_convertDialStruct>:

/**
* @brief　	t_dail型をTIMの生値から保存する関数
* @return   t_dial型を返すので引数で格納して欲しい
*/
t_dial ud_convertDialStruct(uint16_t cnt){
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	460b      	mov	r3, r1
 8002162:	817b      	strh	r3, [r7, #10]
	t_dial temp;
	temp.row_value = cnt;
 8002164:	897b      	ldrh	r3, [r7, #10]
 8002166:	827b      	strh	r3, [r7, #18]
	temp.ratio = (float)temp.row_value / 65536;
 8002168:	8a7b      	ldrh	r3, [r7, #18]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002172:	eddf 6a11 	vldr	s13, [pc, #68]	; 80021b8 <ud_convertDialStruct+0x60>
 8002176:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800217a:	edc7 7a05 	vstr	s15, [r7, #20]
	temp.mode = temp.ratio * MAX_MODE_NUM;
 800217e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002182:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80021bc <ud_convertDialStruct+0x64>
 8002186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002192:	edc7 7a01 	vstr	s15, [r7, #4]
 8002196:	793b      	ldrb	r3, [r7, #4]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	743b      	strb	r3, [r7, #16]
	return temp;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	461a      	mov	r2, r3
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021a8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	47800000 	.word	0x47800000
 80021bc:	00000008 	.word	0x00000008

080021c0 <ud_selectDial>:

/**
* @brief　	do_whileでこれだけ呼ばれる前提で実装を進める
* @return   戻り値は欲しいモードについて
*/
uint8_t ud_selectDial(uint8_t phase){
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]
	static uint8_t pre_mode;
	uint16_t temp_count_r,temp_count_l;
	de_resetEncoders();
 80021ca:	f7ff fb7d 	bl	80018c8 <de_resetEncoders>
	left.mode = 0;
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <ud_selectDial+0xb8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
	right.mode = 0;
 80021d4:	4b29      	ldr	r3, [pc, #164]	; (800227c <ud_selectDial+0xbc>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
	// モードを返すようにする？
	do {
		// まずはエンコーダ処理
		de_updateEncoders();
 80021da:	f7ff fb87 	bl	80018ec <de_updateEncoders>
		temp_count_l = de_getEncoderData(LEFT_SIGMA_PULSE);
 80021de:	2001      	movs	r0, #1
 80021e0:	f7ff fbce 	bl	8001980 <de_getEncoderData>
 80021e4:	4603      	mov	r3, r0
 80021e6:	82fb      	strh	r3, [r7, #22]
		temp_count_r = de_getEncoderData(RIGHT_SIGMA_PULSE);
 80021e8:	2003      	movs	r0, #3
 80021ea:	f7ff fbc9 	bl	8001980 <de_getEncoderData>
 80021ee:	4603      	mov	r3, r0
 80021f0:	82bb      	strh	r3, [r7, #20]
		left = ud_convertDialStruct(temp_count_l);
 80021f2:	4c21      	ldr	r4, [pc, #132]	; (8002278 <ud_selectDial+0xb8>)
 80021f4:	463b      	mov	r3, r7
 80021f6:	8afa      	ldrh	r2, [r7, #22]
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ffac 	bl	8002158 <ud_convertDialStruct>
 8002200:	4622      	mov	r2, r4
 8002202:	463b      	mov	r3, r7
 8002204:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002208:	e882 0003 	stmia.w	r2, {r0, r1}
		right = ud_convertDialStruct(temp_count_r);
 800220c:	4c1b      	ldr	r4, [pc, #108]	; (800227c <ud_selectDial+0xbc>)
 800220e:	463b      	mov	r3, r7
 8002210:	8aba      	ldrh	r2, [r7, #20]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff9f 	bl	8002158 <ud_convertDialStruct>
 800221a:	4622      	mov	r2, r4
 800221c:	463b      	mov	r3, r7
 800221e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002222:	e882 0003 	stmia.w	r2, {r0, r1}
		// 前との変更次第で表示を変える
		if((right.mode - pre_mode) != 0){
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <ud_selectDial+0xbc>)
 8002228:	781a      	ldrb	r2, [r3, #0]
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <ud_selectDial+0xc0>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d00d      	beq.n	800224e <ud_selectDial+0x8e>
			printf("Mode:%2d \n",right.mode);
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <ud_selectDial+0xbc>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	4812      	ldr	r0, [pc, #72]	; (8002284 <ud_selectDial+0xc4>)
 800223a:	f003 fb77 	bl	800592c <iprintf>
			di_lightRightLEDs(right.mode & 0x07);
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <ud_selectDial+0xbc>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fcae 	bl	8001baa <di_lightRightLEDs>
		}
		pre_mode = right.mode;
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <ud_selectDial+0xbc>)
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <ud_selectDial+0xc0>)
 8002254:	701a      	strb	r2, [r3, #0]
	}while(left.mode != 2);
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <ud_selectDial+0xb8>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d1bd      	bne.n	80021da <ud_selectDial+0x1a>
	// 確定した右のモードを返す
	printf("Enter Mode:%2d \n",right.mode);
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <ud_selectDial+0xbc>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4619      	mov	r1, r3
 8002264:	4808      	ldr	r0, [pc, #32]	; (8002288 <ud_selectDial+0xc8>)
 8002266:	f003 fb61 	bl	800592c <iprintf>
	return right.mode;
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <ud_selectDial+0xbc>)
 800226c:	781b      	ldrb	r3, [r3, #0]
}
 800226e:	4618      	mov	r0, r3
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd90      	pop	{r4, r7, pc}
 8002276:	bf00      	nop
 8002278:	20000214 	.word	0x20000214
 800227c:	2000020c 	.word	0x2000020c
 8002280:	2000021c 	.word	0x2000021c
 8002284:	08007b2c 	.word	0x08007b2c
 8002288:	08007b38 	.word	0x08007b38

0800228c <um_MelodySummer>:
#include "Unit/u_music.h"

#include "Device/d_basic_timer.h"
#include "Device/d_buzzer.h"

void um_MelodySummer(void){
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	dbz_Melody(g6,100);
 8002290:	2164      	movs	r1, #100	; 0x64
 8002292:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8002296:	f7ff fa95 	bl	80017c4 <dbz_Melody>
	dbz_Melody(c7,100);
 800229a:	2164      	movs	r1, #100	; 0x64
 800229c:	f640 002d 	movw	r0, #2093	; 0x82d
 80022a0:	f7ff fa90 	bl	80017c4 <dbz_Melody>
	dbz_Melody(d7,100);
 80022a4:	2164      	movs	r1, #100	; 0x64
 80022a6:	f640 102d 	movw	r0, #2349	; 0x92d
 80022aa:	f7ff fa8b 	bl	80017c4 <dbz_Melody>
	dbz_Melody(e7,100);
 80022ae:	2164      	movs	r1, #100	; 0x64
 80022b0:	f640 204d 	movw	r0, #2637	; 0xa4d
 80022b4:	f7ff fa86 	bl	80017c4 <dbz_Melody>
	dbz_Melody(d7,100);
 80022b8:	2164      	movs	r1, #100	; 0x64
 80022ba:	f640 102d 	movw	r0, #2349	; 0x92d
 80022be:	f7ff fa81 	bl	80017c4 <dbz_Melody>
	dbt_waitMs(50);
 80022c2:	2032      	movs	r0, #50	; 0x32
 80022c4:	f7ff f98c 	bl	80015e0 <dbt_waitMs>
	dbz_Melody(c7,50);
 80022c8:	2132      	movs	r1, #50	; 0x32
 80022ca:	f640 002d 	movw	r0, #2093	; 0x82d
 80022ce:	f7ff fa79 	bl	80017c4 <dbz_Melody>
	dbt_waitMs(50);
 80022d2:	2032      	movs	r0, #50	; 0x32
 80022d4:	f7ff f984 	bl	80015e0 <dbt_waitMs>
	dbz_Melody(c7,200);
 80022d8:	21c8      	movs	r1, #200	; 0xc8
 80022da:	f640 002d 	movw	r0, #2093	; 0x82d
 80022de:	f7ff fa71 	bl	80017c4 <dbz_Melody>
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f4:	4907      	ldr	r1, [pc, #28]	; (8002314 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4013      	ands	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40023800 	.word	0x40023800

08002318 <LL_GPIO_ResetOutputPin>:
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233e:	463b      	mov	r3, r7
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
 800234c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800234e:	2004      	movs	r0, #4
 8002350:	f7ff ffca 	bl	80022e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	f7ff ffc7 	bl	80022e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800235a:	2001      	movs	r0, #1
 800235c:	f7ff ffc4 	bl	80022e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002360:	2002      	movs	r0, #2
 8002362:	f7ff ffc1 	bl	80022e8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, SEN_LED_R_Pin|SEN_LED_L_Pin);
 8002366:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800236a:	4820      	ldr	r0, [pc, #128]	; (80023ec <MX_GPIO_Init+0xb4>)
 800236c:	f7ff ffd4 	bl	8002318 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, MOTOR_L_IN1_Pin|MOTOR_L_IN2_Pin|SEN_LED_FL_Pin|IFR_LED2_Pin
 8002370:	f249 112c 	movw	r1, #37164	; 0x912c
 8002374:	481e      	ldr	r0, [pc, #120]	; (80023f0 <MX_GPIO_Init+0xb8>)
 8002376:	f7ff ffcf 	bl	8002318 <LL_GPIO_ResetOutputPin>
                          |IFR_LED3_Pin|SEN_LED_FR_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, IFL_LED1_Pin|IFL_LED2_Pin|IFL_LED3_Pin|IFR_LED1_Pin
 800237a:	f241 71c6 	movw	r1, #6086	; 0x17c6
 800237e:	481d      	ldr	r0, [pc, #116]	; (80023f4 <MX_GPIO_Init+0xbc>)
 8002380:	f7ff ffca 	bl	8002318 <LL_GPIO_ResetOutputPin>
                          |GYRO_CS_Pin|ADC_CS_Pin|MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin);

  /**/
  GPIO_InitStruct.Pin = SEN_LED_R_Pin|SEN_LED_L_Pin;
 8002384:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002388:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800238a:	2301      	movs	r3, #1
 800238c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239a:	463b      	mov	r3, r7
 800239c:	4619      	mov	r1, r3
 800239e:	4813      	ldr	r0, [pc, #76]	; (80023ec <MX_GPIO_Init+0xb4>)
 80023a0:	f001 fd5e 	bl	8003e60 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOTOR_L_IN1_Pin|MOTOR_L_IN2_Pin|SEN_LED_FL_Pin|IFR_LED2_Pin
 80023a4:	f249 132c 	movw	r3, #37164	; 0x912c
 80023a8:	603b      	str	r3, [r7, #0]
                          |IFR_LED3_Pin|SEN_LED_FR_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023aa:	2301      	movs	r3, #1
 80023ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ba:	463b      	mov	r3, r7
 80023bc:	4619      	mov	r1, r3
 80023be:	480c      	ldr	r0, [pc, #48]	; (80023f0 <MX_GPIO_Init+0xb8>)
 80023c0:	f001 fd4e 	bl	8003e60 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IFL_LED1_Pin|IFL_LED2_Pin|IFL_LED3_Pin|IFR_LED1_Pin
 80023c4:	f241 73c6 	movw	r3, #6086	; 0x17c6
 80023c8:	603b      	str	r3, [r7, #0]
                          |GYRO_CS_Pin|ADC_CS_Pin|MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023ca:	2301      	movs	r3, #1
 80023cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023da:	463b      	mov	r3, r7
 80023dc:	4619      	mov	r1, r3
 80023de:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_GPIO_Init+0xbc>)
 80023e0:	f001 fd3e 	bl	8003e60 <LL_GPIO_Init>

}
 80023e4:	bf00      	nop
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40020000 	.word	0x40020000
 80023f4:	40020400 	.word	0x40020400

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db0a      	blt.n	8002486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	490c      	ldr	r1, [pc, #48]	; (80024a8 <__NVIC_SetPriority+0x4c>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	440b      	add	r3, r1
 8002480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002484:	e00a      	b.n	800249c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4908      	ldr	r1, [pc, #32]	; (80024ac <__NVIC_SetPriority+0x50>)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	3b04      	subs	r3, #4
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	440b      	add	r3, r1
 800249a:	761a      	strb	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f1c3 0307 	rsb	r3, r3, #7
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	bf28      	it	cs
 80024ce:	2304      	movcs	r3, #4
 80024d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3304      	adds	r3, #4
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d902      	bls.n	80024e0 <NVIC_EncodePriority+0x30>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3b03      	subs	r3, #3
 80024de:	e000      	b.n	80024e2 <NVIC_EncodePriority+0x32>
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	401a      	ands	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	43d9      	mvns	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	4313      	orrs	r3, r2
         );
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	; 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800251e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002522:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d013      	beq.n	8002556 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800252e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002532:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002536:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800253e:	e000      	b.n	8002542 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002540:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002542:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f9      	beq.n	8002540 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800254c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002556:	687b      	ldr	r3, [r7, #4]
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <LL_RCC_HSI_Enable+0x1c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <LL_RCC_HSI_Enable+0x1c>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800

08002584 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <LL_RCC_HSI_IsReady+0x20>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b02      	cmp	r3, #2
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40023800 	.word	0x40023800

080025a8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4904      	ldr	r1, [pc, #16]	; (80025d0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800

080025d4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <LL_RCC_SetSysClkSource+0x24>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f023 0203 	bic.w	r2, r3, #3
 80025e4:	4904      	ldr	r1, [pc, #16]	; (80025f8 <LL_RCC_SetSysClkSource+0x24>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	608b      	str	r3, [r1, #8]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40023800 	.word	0x40023800

080025fc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <LL_RCC_GetSysClkSource+0x18>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800

08002618 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <LL_RCC_SetAHBPrescaler+0x24>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	4904      	ldr	r1, [pc, #16]	; (800263c <LL_RCC_SetAHBPrescaler+0x24>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4313      	orrs	r3, r2
 800262e:	608b      	str	r3, [r1, #8]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	40023800 	.word	0x40023800

08002640 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <LL_RCC_SetAPB1Prescaler+0x24>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4313      	orrs	r3, r2
 8002656:	608b      	str	r3, [r1, #8]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40023800 	.word	0x40023800

08002668 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <LL_RCC_SetAPB2Prescaler+0x24>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002678:	4904      	ldr	r1, [pc, #16]	; (800268c <LL_RCC_SetAPB2Prescaler+0x24>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4313      	orrs	r3, r2
 800267e:	608b      	str	r3, [r1, #8]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	40023800 	.word	0x40023800

08002690 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <LL_RCC_SetTIMPrescaler+0x28>)
 800269a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80026a2:	4905      	ldr	r1, [pc, #20]	; (80026b8 <LL_RCC_SetTIMPrescaler+0x28>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40023800 	.word	0x40023800

080026bc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <LL_RCC_PLL_Enable+0x1c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <LL_RCC_PLL_Enable+0x1c>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800

080026dc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <LL_RCC_PLL_IsReady+0x24>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026ec:	bf0c      	ite	eq
 80026ee:	2301      	moveq	r3, #1
 80026f0:	2300      	movne	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800

08002704 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8002718:	4013      	ands	r3, r2
 800271a:	68f9      	ldr	r1, [r7, #12]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	4311      	orrs	r1, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	0192      	lsls	r2, r2, #6
 8002724:	430a      	orrs	r2, r1
 8002726:	4908      	ldr	r1, [pc, #32]	; (8002748 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002734:	4904      	ldr	r1, [pc, #16]	; (8002748 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40023800 	.word	0x40023800
 800274c:	ffbf8000 	.word	0xffbf8000

08002750 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <LL_APB1_GRP1_EnableClock+0x2c>)
 800275a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800275c:	4907      	ldr	r1, [pc, #28]	; (800277c <LL_APB1_GRP1_EnableClock+0x2c>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4313      	orrs	r3, r2
 8002762:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4013      	ands	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800276e:	68fb      	ldr	r3, [r7, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	40023800 	.word	0x40023800

08002780 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800278a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800278c:	4907      	ldr	r1, [pc, #28]	; (80027ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4313      	orrs	r3, r2
 8002792:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8002796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4013      	ands	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	40023800 	.word	0x40023800

080027b0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <LL_FLASH_SetLatency+0x24>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 0207 	bic.w	r2, r3, #7
 80027c0:	4904      	ldr	r1, [pc, #16]	; (80027d4 <LL_FLASH_SetLatency+0x24>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40023c00 	.word	0x40023c00

080027d8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <LL_FLASH_GetLatency+0x18>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023c00 	.word	0x40023c00

080027f4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002804:	4904      	ldr	r1, [pc, #16]	; (8002818 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40007000 	.word	0x40007000

0800281c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800282c:	bf0c      	ite	eq
 800282e:	2301      	moveq	r3, #1
 8002830:	2300      	movne	r3, #0
 8002832:	b2db      	uxtb	r3, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40007000 	.word	0x40007000

08002844 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	460b      	mov	r3, r1
 8002874:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	605a      	str	r2, [r3, #4]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int c) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	if( c == '\n'){
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d10d      	bne.n	80028b2 <__io_putchar+0x2a>
		uint8_t _c = '\r';
 8002896:	230d      	movs	r3, #13
 8002898:	73fb      	strb	r3, [r7, #15]
		  LL_USART_TransmitData8(USART1, _c);
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	4619      	mov	r1, r3
 800289e:	480e      	ldr	r0, [pc, #56]	; (80028d8 <__io_putchar+0x50>)
 80028a0:	f7ff ffe3 	bl	800286a <LL_USART_TransmitData8>
		  while(LL_USART_IsActiveFlag_TXE(USART1) == 0);
 80028a4:	bf00      	nop
 80028a6:	480c      	ldr	r0, [pc, #48]	; (80028d8 <__io_putchar+0x50>)
 80028a8:	f7ff ffcc 	bl	8002844 <LL_USART_IsActiveFlag_TXE>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f9      	beq.n	80028a6 <__io_putchar+0x1e>
	}
	LL_USART_TransmitData8(USART1, (uint8_t)c);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	4619      	mov	r1, r3
 80028b8:	4807      	ldr	r0, [pc, #28]	; (80028d8 <__io_putchar+0x50>)
 80028ba:	f7ff ffd6 	bl	800286a <LL_USART_TransmitData8>
	while(LL_USART_IsActiveFlag_TXE(USART1) == 0);
 80028be:	bf00      	nop
 80028c0:	4805      	ldr	r0, [pc, #20]	; (80028d8 <__io_putchar+0x50>)
 80028c2:	f7ff ffbf 	bl	8002844 <LL_USART_IsActiveFlag_TXE>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f9      	beq.n	80028c0 <__io_putchar+0x38>
	return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40011000 	.word	0x40011000

080028dc <_write>:

int _write(int file, char *ptr, int len) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)    {
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	e00e      	b.n	800290c <_write+0x30>
		__io_putchar(*ptr);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ffc8 	bl	8002888 <__io_putchar>
		ITM_SendChar(*ptr++);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	60ba      	str	r2, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fe08 	bl	8002516 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)    {
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3301      	adds	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	dbec      	blt.n	80028ee <_write+0x12>
	}
	return len;
 8002914:	687b      	ldr	r3, [r7, #4]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002922:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002926:	f7ff ff2b 	bl	8002780 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800292a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800292e:	f7ff ff0f 	bl	8002750 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002932:	2003      	movs	r0, #3
 8002934:	f7ff fd60 	bl	80023f8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002938:	f7ff fd82 	bl	8002440 <__NVIC_GetPriorityGrouping>
 800293c:	4603      	mov	r3, r0
 800293e:	2200      	movs	r2, #0
 8002940:	210f      	movs	r1, #15
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fdb4 	bl	80024b0 <NVIC_EncodePriority>
 8002948:	4603      	mov	r3, r0
 800294a:	4619      	mov	r1, r3
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	f7ff fd84 	bl	800245c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002954:	f000 f81a 	bl	800298c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002958:	f7ff fcee 	bl	8002338 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800295c:	f001 f902 	bl	8003b64 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002960:	f000 f8a8 	bl	8002ab4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002964:	f000 fdd6 	bl	8003514 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002968:	f000 fea8 	bl	80036bc <MX_TIM2_Init>
  MX_TIM3_Init();
 800296c:	f000 ff2a 	bl	80037c4 <MX_TIM3_Init>
  MX_TIM10_Init();
 8002970:	f001 f848 	bl	8003a04 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002974:	f001 f87c 	bl	8003a70 <MX_TIM11_Init>
  MX_TIM4_Init();
 8002978:	f000 ff9e 	bl	80038b8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800297c:	f000 ffd4 	bl	8003928 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  doInitializeTask();
 8002980:	f7ff fb3c 	bl	8001ffc <doInitializeTask>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  doloopTask();
 8002984:	f7ff fb5e 	bl	8002044 <doloopTask>
 8002988:	e7fc      	b.n	8002984 <main+0x66>
	...

0800298c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8002990:	2003      	movs	r0, #3
 8002992:	f7ff ff0d 	bl	80027b0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8002996:	bf00      	nop
 8002998:	f7ff ff1e 	bl	80027d8 <LL_FLASH_GetLatency>
 800299c:	4603      	mov	r3, r0
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d1fa      	bne.n	8002998 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80029a2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80029a6:	f7ff ff25 	bl	80027f4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80029aa:	2010      	movs	r0, #16
 80029ac:	f7ff fdfc 	bl	80025a8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80029b0:	f7ff fdd8 	bl	8002564 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80029b4:	bf00      	nop
 80029b6:	f7ff fde5 	bl	8002584 <LL_RCC_HSI_IsReady>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d1fa      	bne.n	80029b6 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 192, LL_RCC_PLLP_DIV_2);
 80029c0:	2300      	movs	r3, #0
 80029c2:	22c0      	movs	r2, #192	; 0xc0
 80029c4:	2110      	movs	r1, #16
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7ff fe9c 	bl	8002704 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80029cc:	f7ff fe76 	bl	80026bc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80029d0:	bf00      	nop
 80029d2:	f7ff fe83 	bl	80026dc <LL_RCC_PLL_IsReady>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d1fa      	bne.n	80029d2 <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80029dc:	bf00      	nop
 80029de:	f7ff ff1d 	bl	800281c <LL_PWR_IsActiveFlag_VOS>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0fa      	beq.n	80029de <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff fe15 	bl	8002618 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80029ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80029f2:	f7ff fe25 	bl	8002640 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80029f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029fa:	f7ff fe35 	bl	8002668 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80029fe:	2002      	movs	r0, #2
 8002a00:	f7ff fde8 	bl	80025d4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002a04:	bf00      	nop
 8002a06:	f7ff fdf9 	bl	80025fc <LL_RCC_GetSysClkSource>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d1fa      	bne.n	8002a06 <SystemClock_Config+0x7a>
  {

  }
  LL_Init1msTick(96000000);
 8002a10:	4805      	ldr	r0, [pc, #20]	; (8002a28 <SystemClock_Config+0x9c>)
 8002a12:	f002 fa31 	bl	8004e78 <LL_Init1msTick>
  LL_SetSystemCoreClock(96000000);
 8002a16:	4804      	ldr	r0, [pc, #16]	; (8002a28 <SystemClock_Config+0x9c>)
 8002a18:	f002 fa62 	bl	8004ee0 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7ff fe37 	bl	8002690 <LL_RCC_SetTIMPrescaler>
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	05b8d800 	.word	0x05b8d800

08002a2c <LL_AHB1_GRP1_EnableClock>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4013      	ands	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40023800 	.word	0x40023800

08002a5c <LL_APB2_GRP1_EnableClock>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a68:	4907      	ldr	r1, [pc, #28]	; (8002a88 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4013      	ands	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40023800 	.word	0x40023800

08002a8c <LL_SPI_SetStandard>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f023 0210 	bic.w	r2, r3, #16
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	605a      	str	r2, [r3, #4]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b090      	sub	sp, #64	; 0x40
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002aba:	f107 0318 	add.w	r3, r7, #24
 8002abe:	2228      	movs	r2, #40	; 0x28
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f003 f878 	bl	8005bb8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	463b      	mov	r3, r7
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002ad8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002adc:	f7ff ffbe 	bl	8002a5c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002ae0:	2002      	movs	r0, #2
 8002ae2:	f7ff ffa3 	bl	8002a2c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PB3   ------> SPI1_SCK
  PB4   ------> SPI1_MISO
  PB5   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002ae6:	2338      	movs	r3, #56	; 0x38
 8002ae8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002aea:	2302      	movs	r3, #2
 8002aec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002aee:	2303      	movs	r3, #3
 8002af0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002afa:	2305      	movs	r3, #5
 8002afc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afe:	463b      	mov	r3, r7
 8002b00:	4619      	mov	r1, r3
 8002b02:	4813      	ldr	r0, [pc, #76]	; (8002b50 <MX_SPI1_Init+0x9c>)
 8002b04:	f001 f9ac 	bl	8003e60 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002b0c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002b10:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002b24:	2318      	movs	r3, #24
 8002b26:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002b30:	230a      	movs	r3, #10
 8002b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002b34:	f107 0318 	add.w	r3, r7, #24
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4806      	ldr	r0, [pc, #24]	; (8002b54 <MX_SPI1_Init+0xa0>)
 8002b3c:	f001 fb61 	bl	8004202 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002b40:	2100      	movs	r1, #0
 8002b42:	4804      	ldr	r0, [pc, #16]	; (8002b54 <MX_SPI1_Init+0xa0>)
 8002b44:	f7ff ffa2 	bl	8002a8c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b48:	bf00      	nop
 8002b4a:	3740      	adds	r7, #64	; 0x40
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40020400 	.word	0x40020400
 8002b54:	40013000 	.word	0x40013000

08002b58 <LL_TIM_ClearFlag_UPDATE>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f06f 0201 	mvn.w	r2, #1
 8002b66:	611a      	str	r2, [r3, #16]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <LL_TIM_ClearFlag_CC1>:
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f06f 0202 	mvn.w	r2, #2
 8002ba8:	611a      	str	r2, [r3, #16]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_TIM_IsActiveFlag_CC1>:
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d101      	bne.n	8002bce <LL_TIM_IsActiveFlag_CC1+0x18>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_TIM_ClearFlag_CC2>:
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f06f 0204 	mvn.w	r2, #4
 8002bea:	611a      	str	r2, [r3, #16]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_TIM_IsActiveFlag_CC2>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d101      	bne.n	8002c10 <LL_TIM_IsActiveFlag_CC2+0x18>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <NMI_Handler+0x4>

08002c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <HardFault_Handler+0x4>

08002c2a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c2e:	e7fe      	b.n	8002c2e <MemManage_Handler+0x4>

08002c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <BusFault_Handler+0x4>

08002c36 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c3a:	e7fe      	b.n	8002c3a <UsageFault_Handler+0x4>

08002c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	doCallbackTask();
 8002c78:	f7ff f9f4 	bl	8002064 <doCallbackTask>

	if(LL_TIM_IsActiveFlag_UPDATE(TIM10)){
 8002c7c:	4805      	ldr	r0, [pc, #20]	; (8002c94 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8002c7e:	f7ff ff79 	bl	8002b74 <LL_TIM_IsActiveFlag_UPDATE>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <TIM1_UP_TIM10_IRQHandler+0x1a>
		LL_TIM_ClearFlag_UPDATE(TIM10);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8002c8a:	f7ff ff65 	bl	8002b58 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40014400 	.word	0x40014400

08002c98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	count_tim5++;
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <TIM5_IRQHandler+0x78>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	4a1b      	ldr	r2, [pc, #108]	; (8002d10 <TIM5_IRQHandler+0x78>)
 8002ca4:	6013      	str	r3, [r2, #0]
	// 左モータのHigh周期
	if(LL_TIM_IsActiveFlag_CC1(TIM5)){
 8002ca6:	481b      	ldr	r0, [pc, #108]	; (8002d14 <TIM5_IRQHandler+0x7c>)
 8002ca8:	f7ff ff85 	bl	8002bb6 <LL_TIM_IsActiveFlag_CC1>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <TIM5_IRQHandler+0x30>
		LL_TIM_ClearFlag_CC1(TIM5);
 8002cb2:	4818      	ldr	r0, [pc, #96]	; (8002d14 <TIM5_IRQHandler+0x7c>)
 8002cb4:	f7ff ff71 	bl	8002b9a <LL_TIM_ClearFlag_CC1>
		count1++;
 8002cb8:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <TIM5_IRQHandler+0x80>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <TIM5_IRQHandler+0x80>)
 8002cc0:	6013      	str	r3, [r2, #0]
		doMotorLeftCallbackTask();
 8002cc2:	f7ff f9d6 	bl	8002072 <doMotorLeftCallbackTask>
		return;
 8002cc6:	e021      	b.n	8002d0c <TIM5_IRQHandler+0x74>
	}
	if(LL_TIM_IsActiveFlag_CC2(TIM5)){
 8002cc8:	4812      	ldr	r0, [pc, #72]	; (8002d14 <TIM5_IRQHandler+0x7c>)
 8002cca:	f7ff ff95 	bl	8002bf8 <LL_TIM_IsActiveFlag_CC2>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <TIM5_IRQHandler+0x52>
		LL_TIM_ClearFlag_CC2(TIM5);
 8002cd4:	480f      	ldr	r0, [pc, #60]	; (8002d14 <TIM5_IRQHandler+0x7c>)
 8002cd6:	f7ff ff81 	bl	8002bdc <LL_TIM_ClearFlag_CC2>
		count2++;
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <TIM5_IRQHandler+0x84>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <TIM5_IRQHandler+0x84>)
 8002ce2:	6013      	str	r3, [r2, #0]
		doMotorRightCallbackTask();
 8002ce4:	f7ff f9cb 	bl	800207e <doMotorRightCallbackTask>
		return;
 8002ce8:	e010      	b.n	8002d0c <TIM5_IRQHandler+0x74>
	}
	// 両モータのタイマを再度設定
	if(LL_TIM_IsActiveFlag_UPDATE(TIM5)){
 8002cea:	480a      	ldr	r0, [pc, #40]	; (8002d14 <TIM5_IRQHandler+0x7c>)
 8002cec:	f7ff ff42 	bl	8002b74 <LL_TIM_IsActiveFlag_UPDATE>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <TIM5_IRQHandler+0x74>
		LL_TIM_ClearFlag_UPDATE(TIM5);
 8002cf6:	4807      	ldr	r0, [pc, #28]	; (8002d14 <TIM5_IRQHandler+0x7c>)
 8002cf8:	f7ff ff2e 	bl	8002b58 <LL_TIM_ClearFlag_UPDATE>
		count_a++;
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <TIM5_IRQHandler+0x88>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	4a07      	ldr	r2, [pc, #28]	; (8002d20 <TIM5_IRQHandler+0x88>)
 8002d04:	6013      	str	r3, [r2, #0]
		doMotorBothCallbackTask();
 8002d06:	f7ff f9c1 	bl	800208c <doMotorBothCallbackTask>

		return;
 8002d0a:	bf00      	nop
	}
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000208 	.word	0x20000208
 8002d14:	40000c00 	.word	0x40000c00
 8002d18:	200001fc 	.word	0x200001fc
 8002d1c:	20000200 	.word	0x20000200
 8002d20:	20000204 	.word	0x20000204

08002d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return 1;
 8002d28:	2301      	movs	r3, #1
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <_kill>:

int _kill(int pid, int sig)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d3e:	f002 ff8d 	bl	8005c5c <__errno>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2216      	movs	r2, #22
 8002d46:	601a      	str	r2, [r3, #0]
  return -1;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_exit>:

void _exit (int status)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ffe7 	bl	8002d34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d66:	e7fe      	b.n	8002d66 <_exit+0x12>

08002d68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e00a      	b.n	8002d90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d7a:	f3af 8000 	nop.w
 8002d7e:	4601      	mov	r1, r0
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	60ba      	str	r2, [r7, #8]
 8002d86:	b2ca      	uxtb	r2, r1
 8002d88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	dbf0      	blt.n	8002d7a <_read+0x12>
  }

  return len;
 8002d98:	687b      	ldr	r3, [r7, #4]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dca:	605a      	str	r2, [r3, #4]
  return 0;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <_isatty>:

int _isatty(int file)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e14:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <_sbrk+0x5c>)
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <_sbrk+0x60>)
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e20:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <_sbrk+0x64>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <_sbrk+0x64>)
 8002e2a:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <_sbrk+0x68>)
 8002e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <_sbrk+0x64>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d207      	bcs.n	8002e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e3c:	f002 ff0e 	bl	8005c5c <__errno>
 8002e40:	4603      	mov	r3, r0
 8002e42:	220c      	movs	r2, #12
 8002e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	e009      	b.n	8002e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <_sbrk+0x64>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <_sbrk+0x64>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	4a05      	ldr	r2, [pc, #20]	; (8002e70 <_sbrk+0x64>)
 8002e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20020000 	.word	0x20020000
 8002e6c:	00000400 	.word	0x00000400
 8002e70:	20000220 	.word	0x20000220
 8002e74:	20000370 	.word	0x20000370

08002e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <SystemInit+0x20>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <SystemInit+0x20>)
 8002e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_GetPriorityGrouping>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 0307 	and.w	r3, r3, #7
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_EnableIRQ>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db0b      	blt.n	8002ee2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	4907      	ldr	r1, [pc, #28]	; (8002ef0 <__NVIC_EnableIRQ+0x38>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2001      	movs	r0, #1
 8002eda:	fa00 f202 	lsl.w	r2, r0, r2
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000e100 	.word	0xe000e100

08002ef4 <__NVIC_SetPriority>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	6039      	str	r1, [r7, #0]
 8002efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	db0a      	blt.n	8002f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	490c      	ldr	r1, [pc, #48]	; (8002f40 <__NVIC_SetPriority+0x4c>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	0112      	lsls	r2, r2, #4
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	440b      	add	r3, r1
 8002f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f1c:	e00a      	b.n	8002f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	4908      	ldr	r1, [pc, #32]	; (8002f44 <__NVIC_SetPriority+0x50>)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	3b04      	subs	r3, #4
 8002f2c:	0112      	lsls	r2, r2, #4
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	440b      	add	r3, r1
 8002f32:	761a      	strb	r2, [r3, #24]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000e100 	.word	0xe000e100
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <NVIC_EncodePriority>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b089      	sub	sp, #36	; 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f1c3 0307 	rsb	r3, r3, #7
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	bf28      	it	cs
 8002f66:	2304      	movcs	r3, #4
 8002f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d902      	bls.n	8002f78 <NVIC_EncodePriority+0x30>
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3b03      	subs	r3, #3
 8002f76:	e000      	b.n	8002f7a <NVIC_EncodePriority+0x32>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43da      	mvns	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f90:	f04f 31ff 	mov.w	r1, #4294967295
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	43d9      	mvns	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	4313      	orrs	r3, r2
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3724      	adds	r7, #36	; 0x24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <LL_AHB1_GRP1_EnableClock>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fbc:	4907      	ldr	r1, [pc, #28]	; (8002fdc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fce:	68fb      	ldr	r3, [r7, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40023800 	.word	0x40023800

08002fe0 <LL_APB1_GRP1_EnableClock>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fec:	4907      	ldr	r1, [pc, #28]	; (800300c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40023800 	.word	0x40023800

08003010 <LL_APB2_GRP1_EnableClock>:
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <LL_APB2_GRP1_EnableClock+0x2c>)
 800301a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800301c:	4907      	ldr	r1, [pc, #28]	; (800303c <LL_APB2_GRP1_EnableClock+0x2c>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4313      	orrs	r3, r2
 8003022:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4013      	ands	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800302e:	68fb      	ldr	r3, [r7, #12]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	40023800 	.word	0x40023800

08003040 <LL_TIM_EnableARRPreload>:
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	601a      	str	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_TIM_DisableARRPreload>:
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	601a      	str	r2, [r3, #0]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_TIM_OC_DisableFast>:
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d01c      	beq.n	80030ca <LL_TIM_OC_DisableFast+0x4a>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b04      	cmp	r3, #4
 8003094:	d017      	beq.n	80030c6 <LL_TIM_OC_DisableFast+0x46>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b10      	cmp	r3, #16
 800309a:	d012      	beq.n	80030c2 <LL_TIM_OC_DisableFast+0x42>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b40      	cmp	r3, #64	; 0x40
 80030a0:	d00d      	beq.n	80030be <LL_TIM_OC_DisableFast+0x3e>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a8:	d007      	beq.n	80030ba <LL_TIM_OC_DisableFast+0x3a>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b0:	d101      	bne.n	80030b6 <LL_TIM_OC_DisableFast+0x36>
 80030b2:	2305      	movs	r3, #5
 80030b4:	e00a      	b.n	80030cc <LL_TIM_OC_DisableFast+0x4c>
 80030b6:	2306      	movs	r3, #6
 80030b8:	e008      	b.n	80030cc <LL_TIM_OC_DisableFast+0x4c>
 80030ba:	2304      	movs	r3, #4
 80030bc:	e006      	b.n	80030cc <LL_TIM_OC_DisableFast+0x4c>
 80030be:	2303      	movs	r3, #3
 80030c0:	e004      	b.n	80030cc <LL_TIM_OC_DisableFast+0x4c>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e002      	b.n	80030cc <LL_TIM_OC_DisableFast+0x4c>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <LL_TIM_OC_DisableFast+0x4c>
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3318      	adds	r3, #24
 80030d2:	4619      	mov	r1, r3
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <LL_TIM_OC_DisableFast+0x84>)
 80030d8:	5cd3      	ldrb	r3, [r2, r3]
 80030da:	440b      	add	r3, r1
 80030dc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	4908      	ldr	r1, [pc, #32]	; (8003108 <LL_TIM_OC_DisableFast+0x88>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	4619      	mov	r1, r3
 80030ea:	2304      	movs	r3, #4
 80030ec:	408b      	lsls	r3, r1
 80030ee:	43db      	mvns	r3, r3
 80030f0:	401a      	ands	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	601a      	str	r2, [r3, #0]
}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	08007b6c 	.word	0x08007b6c
 8003108:	08007b74 	.word	0x08007b74

0800310c <LL_TIM_OC_EnablePreload>:
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d01c      	beq.n	8003156 <LL_TIM_OC_EnablePreload+0x4a>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b04      	cmp	r3, #4
 8003120:	d017      	beq.n	8003152 <LL_TIM_OC_EnablePreload+0x46>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b10      	cmp	r3, #16
 8003126:	d012      	beq.n	800314e <LL_TIM_OC_EnablePreload+0x42>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d00d      	beq.n	800314a <LL_TIM_OC_EnablePreload+0x3e>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003134:	d007      	beq.n	8003146 <LL_TIM_OC_EnablePreload+0x3a>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313c:	d101      	bne.n	8003142 <LL_TIM_OC_EnablePreload+0x36>
 800313e:	2305      	movs	r3, #5
 8003140:	e00a      	b.n	8003158 <LL_TIM_OC_EnablePreload+0x4c>
 8003142:	2306      	movs	r3, #6
 8003144:	e008      	b.n	8003158 <LL_TIM_OC_EnablePreload+0x4c>
 8003146:	2304      	movs	r3, #4
 8003148:	e006      	b.n	8003158 <LL_TIM_OC_EnablePreload+0x4c>
 800314a:	2303      	movs	r3, #3
 800314c:	e004      	b.n	8003158 <LL_TIM_OC_EnablePreload+0x4c>
 800314e:	2302      	movs	r3, #2
 8003150:	e002      	b.n	8003158 <LL_TIM_OC_EnablePreload+0x4c>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <LL_TIM_OC_EnablePreload+0x4c>
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3318      	adds	r3, #24
 800315e:	4619      	mov	r1, r3
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <LL_TIM_OC_EnablePreload+0x80>)
 8003164:	5cd3      	ldrb	r3, [r2, r3]
 8003166:	440b      	add	r3, r1
 8003168:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	4907      	ldr	r1, [pc, #28]	; (8003190 <LL_TIM_OC_EnablePreload+0x84>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	4619      	mov	r1, r3
 8003176:	2308      	movs	r3, #8
 8003178:	408b      	lsls	r3, r1
 800317a:	431a      	orrs	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	601a      	str	r2, [r3, #0]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	08007b6c 	.word	0x08007b6c
 8003190:	08007b74 	.word	0x08007b74

08003194 <LL_TIM_IC_SetActiveInput>:
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d01c      	beq.n	80031e0 <LL_TIM_IC_SetActiveInput+0x4c>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d017      	beq.n	80031dc <LL_TIM_IC_SetActiveInput+0x48>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d012      	beq.n	80031d8 <LL_TIM_IC_SetActiveInput+0x44>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d00d      	beq.n	80031d4 <LL_TIM_IC_SetActiveInput+0x40>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031be:	d007      	beq.n	80031d0 <LL_TIM_IC_SetActiveInput+0x3c>
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d101      	bne.n	80031cc <LL_TIM_IC_SetActiveInput+0x38>
 80031c8:	2305      	movs	r3, #5
 80031ca:	e00a      	b.n	80031e2 <LL_TIM_IC_SetActiveInput+0x4e>
 80031cc:	2306      	movs	r3, #6
 80031ce:	e008      	b.n	80031e2 <LL_TIM_IC_SetActiveInput+0x4e>
 80031d0:	2304      	movs	r3, #4
 80031d2:	e006      	b.n	80031e2 <LL_TIM_IC_SetActiveInput+0x4e>
 80031d4:	2303      	movs	r3, #3
 80031d6:	e004      	b.n	80031e2 <LL_TIM_IC_SetActiveInput+0x4e>
 80031d8:	2302      	movs	r3, #2
 80031da:	e002      	b.n	80031e2 <LL_TIM_IC_SetActiveInput+0x4e>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <LL_TIM_IC_SetActiveInput+0x4e>
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3318      	adds	r3, #24
 80031e8:	4619      	mov	r1, r3
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <LL_TIM_IC_SetActiveInput+0x94>)
 80031ee:	5cd3      	ldrb	r3, [r2, r3]
 80031f0:	440b      	add	r3, r1
 80031f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
 80031fa:	490c      	ldr	r1, [pc, #48]	; (800322c <LL_TIM_IC_SetActiveInput+0x98>)
 80031fc:	5ccb      	ldrb	r3, [r1, r3]
 80031fe:	4619      	mov	r1, r3
 8003200:	2303      	movs	r3, #3
 8003202:	408b      	lsls	r3, r1
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	0c1b      	lsrs	r3, r3, #16
 800320c:	7df9      	ldrb	r1, [r7, #23]
 800320e:	4807      	ldr	r0, [pc, #28]	; (800322c <LL_TIM_IC_SetActiveInput+0x98>)
 8003210:	5c41      	ldrb	r1, [r0, r1]
 8003212:	408b      	lsls	r3, r1
 8003214:	431a      	orrs	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	601a      	str	r2, [r3, #0]
}
 800321a:	bf00      	nop
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	08007b6c 	.word	0x08007b6c
 800322c:	08007b7c 	.word	0x08007b7c

08003230 <LL_TIM_IC_SetPrescaler>:
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d01c      	beq.n	800327c <LL_TIM_IC_SetPrescaler+0x4c>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b04      	cmp	r3, #4
 8003246:	d017      	beq.n	8003278 <LL_TIM_IC_SetPrescaler+0x48>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b10      	cmp	r3, #16
 800324c:	d012      	beq.n	8003274 <LL_TIM_IC_SetPrescaler+0x44>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	d00d      	beq.n	8003270 <LL_TIM_IC_SetPrescaler+0x40>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325a:	d007      	beq.n	800326c <LL_TIM_IC_SetPrescaler+0x3c>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003262:	d101      	bne.n	8003268 <LL_TIM_IC_SetPrescaler+0x38>
 8003264:	2305      	movs	r3, #5
 8003266:	e00a      	b.n	800327e <LL_TIM_IC_SetPrescaler+0x4e>
 8003268:	2306      	movs	r3, #6
 800326a:	e008      	b.n	800327e <LL_TIM_IC_SetPrescaler+0x4e>
 800326c:	2304      	movs	r3, #4
 800326e:	e006      	b.n	800327e <LL_TIM_IC_SetPrescaler+0x4e>
 8003270:	2303      	movs	r3, #3
 8003272:	e004      	b.n	800327e <LL_TIM_IC_SetPrescaler+0x4e>
 8003274:	2302      	movs	r3, #2
 8003276:	e002      	b.n	800327e <LL_TIM_IC_SetPrescaler+0x4e>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <LL_TIM_IC_SetPrescaler+0x4e>
 800327c:	2300      	movs	r3, #0
 800327e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3318      	adds	r3, #24
 8003284:	4619      	mov	r1, r3
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <LL_TIM_IC_SetPrescaler+0x94>)
 800328a:	5cd3      	ldrb	r3, [r2, r3]
 800328c:	440b      	add	r3, r1
 800328e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	490c      	ldr	r1, [pc, #48]	; (80032c8 <LL_TIM_IC_SetPrescaler+0x98>)
 8003298:	5ccb      	ldrb	r3, [r1, r3]
 800329a:	4619      	mov	r1, r3
 800329c:	230c      	movs	r3, #12
 800329e:	408b      	lsls	r3, r1
 80032a0:	43db      	mvns	r3, r3
 80032a2:	401a      	ands	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0c1b      	lsrs	r3, r3, #16
 80032a8:	7df9      	ldrb	r1, [r7, #23]
 80032aa:	4807      	ldr	r0, [pc, #28]	; (80032c8 <LL_TIM_IC_SetPrescaler+0x98>)
 80032ac:	5c41      	ldrb	r1, [r0, r1]
 80032ae:	408b      	lsls	r3, r1
 80032b0:	431a      	orrs	r2, r3
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	601a      	str	r2, [r3, #0]
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	08007b6c 	.word	0x08007b6c
 80032c8:	08007b7c 	.word	0x08007b7c

080032cc <LL_TIM_IC_SetFilter>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d01c      	beq.n	8003318 <LL_TIM_IC_SetFilter+0x4c>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d017      	beq.n	8003314 <LL_TIM_IC_SetFilter+0x48>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d012      	beq.n	8003310 <LL_TIM_IC_SetFilter+0x44>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d00d      	beq.n	800330c <LL_TIM_IC_SetFilter+0x40>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f6:	d007      	beq.n	8003308 <LL_TIM_IC_SetFilter+0x3c>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fe:	d101      	bne.n	8003304 <LL_TIM_IC_SetFilter+0x38>
 8003300:	2305      	movs	r3, #5
 8003302:	e00a      	b.n	800331a <LL_TIM_IC_SetFilter+0x4e>
 8003304:	2306      	movs	r3, #6
 8003306:	e008      	b.n	800331a <LL_TIM_IC_SetFilter+0x4e>
 8003308:	2304      	movs	r3, #4
 800330a:	e006      	b.n	800331a <LL_TIM_IC_SetFilter+0x4e>
 800330c:	2303      	movs	r3, #3
 800330e:	e004      	b.n	800331a <LL_TIM_IC_SetFilter+0x4e>
 8003310:	2302      	movs	r3, #2
 8003312:	e002      	b.n	800331a <LL_TIM_IC_SetFilter+0x4e>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <LL_TIM_IC_SetFilter+0x4e>
 8003318:	2300      	movs	r3, #0
 800331a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3318      	adds	r3, #24
 8003320:	4619      	mov	r1, r3
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <LL_TIM_IC_SetFilter+0x94>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	440b      	add	r3, r1
 800332a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	490c      	ldr	r1, [pc, #48]	; (8003364 <LL_TIM_IC_SetFilter+0x98>)
 8003334:	5ccb      	ldrb	r3, [r1, r3]
 8003336:	4619      	mov	r1, r3
 8003338:	23f0      	movs	r3, #240	; 0xf0
 800333a:	408b      	lsls	r3, r1
 800333c:	43db      	mvns	r3, r3
 800333e:	401a      	ands	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	7df9      	ldrb	r1, [r7, #23]
 8003346:	4807      	ldr	r0, [pc, #28]	; (8003364 <LL_TIM_IC_SetFilter+0x98>)
 8003348:	5c41      	ldrb	r1, [r0, r1]
 800334a:	408b      	lsls	r3, r1
 800334c:	431a      	orrs	r2, r3
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	601a      	str	r2, [r3, #0]
}
 8003352:	bf00      	nop
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	08007b6c 	.word	0x08007b6c
 8003364:	08007b7c 	.word	0x08007b7c

08003368 <LL_TIM_IC_SetPolarity>:
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d01c      	beq.n	80033b4 <LL_TIM_IC_SetPolarity+0x4c>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b04      	cmp	r3, #4
 800337e:	d017      	beq.n	80033b0 <LL_TIM_IC_SetPolarity+0x48>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b10      	cmp	r3, #16
 8003384:	d012      	beq.n	80033ac <LL_TIM_IC_SetPolarity+0x44>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d00d      	beq.n	80033a8 <LL_TIM_IC_SetPolarity+0x40>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003392:	d007      	beq.n	80033a4 <LL_TIM_IC_SetPolarity+0x3c>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339a:	d101      	bne.n	80033a0 <LL_TIM_IC_SetPolarity+0x38>
 800339c:	2305      	movs	r3, #5
 800339e:	e00a      	b.n	80033b6 <LL_TIM_IC_SetPolarity+0x4e>
 80033a0:	2306      	movs	r3, #6
 80033a2:	e008      	b.n	80033b6 <LL_TIM_IC_SetPolarity+0x4e>
 80033a4:	2304      	movs	r3, #4
 80033a6:	e006      	b.n	80033b6 <LL_TIM_IC_SetPolarity+0x4e>
 80033a8:	2303      	movs	r3, #3
 80033aa:	e004      	b.n	80033b6 <LL_TIM_IC_SetPolarity+0x4e>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e002      	b.n	80033b6 <LL_TIM_IC_SetPolarity+0x4e>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <LL_TIM_IC_SetPolarity+0x4e>
 80033b4:	2300      	movs	r3, #0
 80033b6:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	490b      	ldr	r1, [pc, #44]	; (80033ec <LL_TIM_IC_SetPolarity+0x84>)
 80033c0:	5ccb      	ldrb	r3, [r1, r3]
 80033c2:	4619      	mov	r1, r3
 80033c4:	230a      	movs	r3, #10
 80033c6:	408b      	lsls	r3, r1
 80033c8:	43db      	mvns	r3, r3
 80033ca:	401a      	ands	r2, r3
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	4907      	ldr	r1, [pc, #28]	; (80033ec <LL_TIM_IC_SetPolarity+0x84>)
 80033d0:	5ccb      	ldrb	r3, [r1, r3]
 80033d2:	4619      	mov	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	408b      	lsls	r3, r1
 80033d8:	431a      	orrs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	08007b84 	.word	0x08007b84

080033f0 <LL_TIM_SetClockSource>:
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003402:	f023 0307 	bic.w	r3, r3, #7
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	609a      	str	r2, [r3, #8]
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <LL_TIM_SetEncoderMode>:
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 0207 	bic.w	r2, r3, #7
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	609a      	str	r2, [r3, #8]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <LL_TIM_SetTriggerOutput>:
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	605a      	str	r2, [r3, #4]
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <LL_TIM_SetSlaveMode>:
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f023 0207 	bic.w	r2, r3, #7
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	609a      	str	r2, [r3, #8]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <LL_TIM_SetTriggerInput>:
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	609a      	str	r2, [r3, #8]
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <LL_TIM_DisableMasterSlaveMode>:
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	609a      	str	r2, [r3, #8]
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_TIM_DisableIT_TRIG>:
  * @rmtoll DIER         TIE           LL_TIM_DisableIT_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	60da      	str	r2, [r3, #12]
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <LL_TIM_DisableDMAReq_TRIG>:
  * @rmtoll DIER         TDE           LL_TIM_DisableDMAReq_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	60da      	str	r2, [r3, #12]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b09a      	sub	sp, #104	; 0x68
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800351a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800352a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800352e:	2220      	movs	r2, #32
 8003530:	2100      	movs	r1, #0
 8003532:	4618      	mov	r0, r3
 8003534:	f002 fb40 	bl	8005bb8 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8003538:	f107 031c 	add.w	r3, r7, #28
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]
 8003548:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354a:	1d3b      	adds	r3, r7, #4
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
 8003558:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800355a:	2001      	movs	r0, #1
 800355c:	f7ff fd58 	bl	8003010 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003560:	f7ff fc9c 	bl	8002e9c <__NVIC_GetPriorityGrouping>
 8003564:	4603      	mov	r3, r0
 8003566:	2200      	movs	r2, #0
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fcec 	bl	8002f48 <NVIC_EncodePriority>
 8003570:	4603      	mov	r3, r0
 8003572:	4619      	mov	r1, r3
 8003574:	2019      	movs	r0, #25
 8003576:	f7ff fcbd 	bl	8002ef4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800357a:	2019      	movs	r0, #25
 800357c:	f7ff fc9c 	bl	8002eb8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 95;
 8003580:	235f      	movs	r3, #95	; 0x5f
 8003582:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003586:	2300      	movs	r3, #0
 8003588:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 800358a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800358e:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003590:	2300      	movs	r3, #0
 8003592:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003598:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800359c:	4619      	mov	r1, r3
 800359e:	4844      	ldr	r0, [pc, #272]	; (80036b0 <MX_TIM1_Init+0x19c>)
 80035a0:	f000 fef4 	bl	800438c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 80035a4:	4842      	ldr	r0, [pc, #264]	; (80036b0 <MX_TIM1_Init+0x19c>)
 80035a6:	f7ff fd4b 	bl	8003040 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80035aa:	2100      	movs	r1, #0
 80035ac:	4840      	ldr	r0, [pc, #256]	; (80036b0 <MX_TIM1_Init+0x19c>)
 80035ae:	f7ff ff1f 	bl	80033f0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 80035b2:	2110      	movs	r1, #16
 80035b4:	483e      	ldr	r0, [pc, #248]	; (80036b0 <MX_TIM1_Init+0x19c>)
 80035b6:	f7ff fda9 	bl	800310c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80035ba:	2360      	movs	r3, #96	; 0x60
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80035be:	2300      	movs	r3, #0
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 30000;
 80035c6:	f247 5330 	movw	r3, #30000	; 0x7530
 80035ca:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80035cc:	2300      	movs	r3, #0
 80035ce:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80035d0:	2300      	movs	r3, #0
 80035d2:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80035d4:	2300      	movs	r3, #0
 80035d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80035d8:	2300      	movs	r3, #0
 80035da:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80035dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035e0:	461a      	mov	r2, r3
 80035e2:	2110      	movs	r1, #16
 80035e4:	4832      	ldr	r0, [pc, #200]	; (80036b0 <MX_TIM1_Init+0x19c>)
 80035e6:	f000 ff4b 	bl	8004480 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 80035ea:	2110      	movs	r1, #16
 80035ec:	4830      	ldr	r0, [pc, #192]	; (80036b0 <MX_TIM1_Init+0x19c>)
 80035ee:	f7ff fd47 	bl	8003080 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 80035f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035f6:	482e      	ldr	r0, [pc, #184]	; (80036b0 <MX_TIM1_Init+0x19c>)
 80035f8:	f7ff fd88 	bl	800310c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003600:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003604:	461a      	mov	r2, r3
 8003606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800360a:	4829      	ldr	r0, [pc, #164]	; (80036b0 <MX_TIM1_Init+0x19c>)
 800360c:	f000 ff38 	bl	8004480 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8003610:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003614:	4826      	ldr	r0, [pc, #152]	; (80036b0 <MX_TIM1_Init+0x19c>)
 8003616:	f7ff fd33 	bl	8003080 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800361a:	2100      	movs	r1, #0
 800361c:	4824      	ldr	r0, [pc, #144]	; (80036b0 <MX_TIM1_Init+0x19c>)
 800361e:	f7ff ff0f 	bl	8003440 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8003622:	4823      	ldr	r0, [pc, #140]	; (80036b0 <MX_TIM1_Init+0x19c>)
 8003624:	f7ff ff45 	bl	80034b2 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800363a:	2300      	movs	r3, #0
 800363c:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800363e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8003644:	2300      	movs	r3, #0
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8003648:	f107 031c 	add.w	r3, r7, #28
 800364c:	4619      	mov	r1, r3
 800364e:	4818      	ldr	r0, [pc, #96]	; (80036b0 <MX_TIM1_Init+0x19c>)
 8003650:	f000 ff57 	bl	8004502 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003654:	2002      	movs	r0, #2
 8003656:	f7ff fcab 	bl	8002fb0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800365a:	2001      	movs	r0, #1
 800365c:	f7ff fca8 	bl	8002fb0 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PA11     ------> TIM1_CH4
    */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8003660:	2301      	movs	r3, #1
 8003662:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003664:	2302      	movs	r3, #2
 8003666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003674:	2301      	movs	r3, #1
 8003676:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	4619      	mov	r1, r3
 800367c:	480d      	ldr	r0, [pc, #52]	; (80036b4 <MX_TIM1_Init+0x1a0>)
 800367e:	f000 fbef 	bl	8003e60 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = FUN_Pin;
 8003682:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003686:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003688:	2302      	movs	r3, #2
 800368a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003698:	2301      	movs	r3, #1
 800369a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(FUN_GPIO_Port, &GPIO_InitStruct);
 800369c:	1d3b      	adds	r3, r7, #4
 800369e:	4619      	mov	r1, r3
 80036a0:	4805      	ldr	r0, [pc, #20]	; (80036b8 <MX_TIM1_Init+0x1a4>)
 80036a2:	f000 fbdd 	bl	8003e60 <LL_GPIO_Init>

}
 80036a6:	bf00      	nop
 80036a8:	3768      	adds	r7, #104	; 0x68
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40020400 	.word	0x40020400
 80036b8:	40020000 	.word	0x40020000

080036bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08c      	sub	sp, #48	; 0x30
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80036c2:	f107 031c 	add.w	r3, r7, #28
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	60da      	str	r2, [r3, #12]
 80036d0:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d2:	1d3b      	adds	r3, r7, #4
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	611a      	str	r2, [r3, #16]
 80036e0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80036e2:	2001      	movs	r0, #1
 80036e4:	f7ff fc7c 	bl	8002fe0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80036e8:	2001      	movs	r0, #1
 80036ea:	f7ff fc61 	bl	8002fb0 <LL_AHB1_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA0-WKUP   ------> TIM2_CH1
  PA1   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80036ee:	2303      	movs	r3, #3
 80036f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80036f2:	2302      	movs	r3, #2
 80036f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003702:	2301      	movs	r3, #1
 8003704:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	4619      	mov	r1, r3
 800370a:	482d      	ldr	r0, [pc, #180]	; (80037c0 <MX_TIM2_Init+0x104>)
 800370c:	f000 fba8 	bl	8003e60 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X2_TI1);
 8003710:	2101      	movs	r1, #1
 8003712:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003716:	f7ff fe80 	bl	800341a <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800371a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800371e:	2101      	movs	r1, #1
 8003720:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003724:	f7ff fd36 	bl	8003194 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8003728:	2200      	movs	r2, #0
 800372a:	2101      	movs	r1, #1
 800372c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003730:	f7ff fd7e 	bl	8003230 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8003734:	2200      	movs	r2, #0
 8003736:	2101      	movs	r1, #1
 8003738:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800373c:	f7ff fdc6 	bl	80032cc <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8003740:	2200      	movs	r2, #0
 8003742:	2101      	movs	r1, #1
 8003744:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003748:	f7ff fe0e 	bl	8003368 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800374c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003750:	2110      	movs	r1, #16
 8003752:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003756:	f7ff fd1d 	bl	8003194 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800375a:	2200      	movs	r2, #0
 800375c:	2110      	movs	r1, #16
 800375e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003762:	f7ff fd65 	bl	8003230 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8003766:	2200      	movs	r2, #0
 8003768:	2110      	movs	r1, #16
 800376a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800376e:	f7ff fdad 	bl	80032cc <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8003772:	2200      	movs	r2, #0
 8003774:	2110      	movs	r1, #16
 8003776:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800377a:	f7ff fdf5 	bl	8003368 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 800377e:	2300      	movs	r3, #0
 8003780:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003782:	2300      	movs	r3, #0
 8003784:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 4294967295;
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800378c:	2300      	movs	r3, #0
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003790:	f107 031c 	add.w	r3, r7, #28
 8003794:	4619      	mov	r1, r3
 8003796:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800379a:	f000 fdf7 	bl	800438c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800379e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037a2:	f7ff fc5d 	bl	8003060 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80037a6:	2100      	movs	r1, #0
 80037a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037ac:	f7ff fe48 	bl	8003440 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80037b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037b4:	f7ff fe7d 	bl	80034b2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037b8:	bf00      	nop
 80037ba:	3730      	adds	r7, #48	; 0x30
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40020000 	.word	0x40020000

080037c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08c      	sub	sp, #48	; 0x30
 80037c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80037ca:	f107 031c 	add.w	r3, r7, #28
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037da:	1d3b      	adds	r3, r7, #4
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	611a      	str	r2, [r3, #16]
 80037e8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80037ea:	2002      	movs	r0, #2
 80037ec:	f7ff fbf8 	bl	8002fe0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80037f0:	2001      	movs	r0, #1
 80037f2:	f7ff fbdd 	bl	8002fb0 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PA6   ------> TIM3_CH1
  PA7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80037f6:	23c0      	movs	r3, #192	; 0xc0
 80037f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80037fa:	2302      	movs	r3, #2
 80037fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800380a:	2302      	movs	r3, #2
 800380c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	4619      	mov	r1, r3
 8003812:	4827      	ldr	r0, [pc, #156]	; (80038b0 <MX_TIM3_Init+0xec>)
 8003814:	f000 fb24 	bl	8003e60 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 8003818:	2101      	movs	r1, #1
 800381a:	4826      	ldr	r0, [pc, #152]	; (80038b4 <MX_TIM3_Init+0xf0>)
 800381c:	f7ff fdfd 	bl	800341a <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8003820:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003824:	2101      	movs	r1, #1
 8003826:	4823      	ldr	r0, [pc, #140]	; (80038b4 <MX_TIM3_Init+0xf0>)
 8003828:	f7ff fcb4 	bl	8003194 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 800382c:	2200      	movs	r2, #0
 800382e:	2101      	movs	r1, #1
 8003830:	4820      	ldr	r0, [pc, #128]	; (80038b4 <MX_TIM3_Init+0xf0>)
 8003832:	f7ff fcfd 	bl	8003230 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8003836:	2200      	movs	r2, #0
 8003838:	2101      	movs	r1, #1
 800383a:	481e      	ldr	r0, [pc, #120]	; (80038b4 <MX_TIM3_Init+0xf0>)
 800383c:	f7ff fd46 	bl	80032cc <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8003840:	2200      	movs	r2, #0
 8003842:	2101      	movs	r1, #1
 8003844:	481b      	ldr	r0, [pc, #108]	; (80038b4 <MX_TIM3_Init+0xf0>)
 8003846:	f7ff fd8f 	bl	8003368 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800384a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800384e:	2110      	movs	r1, #16
 8003850:	4818      	ldr	r0, [pc, #96]	; (80038b4 <MX_TIM3_Init+0xf0>)
 8003852:	f7ff fc9f 	bl	8003194 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8003856:	2200      	movs	r2, #0
 8003858:	2110      	movs	r1, #16
 800385a:	4816      	ldr	r0, [pc, #88]	; (80038b4 <MX_TIM3_Init+0xf0>)
 800385c:	f7ff fce8 	bl	8003230 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8003860:	2200      	movs	r2, #0
 8003862:	2110      	movs	r1, #16
 8003864:	4813      	ldr	r0, [pc, #76]	; (80038b4 <MX_TIM3_Init+0xf0>)
 8003866:	f7ff fd31 	bl	80032cc <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800386a:	2200      	movs	r2, #0
 800386c:	2110      	movs	r1, #16
 800386e:	4811      	ldr	r0, [pc, #68]	; (80038b4 <MX_TIM3_Init+0xf0>)
 8003870:	f7ff fd7a 	bl	8003368 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003878:	2300      	movs	r3, #0
 800387a:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 800387c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003882:	2300      	movs	r3, #0
 8003884:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003886:	f107 031c 	add.w	r3, r7, #28
 800388a:	4619      	mov	r1, r3
 800388c:	4809      	ldr	r0, [pc, #36]	; (80038b4 <MX_TIM3_Init+0xf0>)
 800388e:	f000 fd7d 	bl	800438c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8003892:	4808      	ldr	r0, [pc, #32]	; (80038b4 <MX_TIM3_Init+0xf0>)
 8003894:	f7ff fbe4 	bl	8003060 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003898:	2100      	movs	r1, #0
 800389a:	4806      	ldr	r0, [pc, #24]	; (80038b4 <MX_TIM3_Init+0xf0>)
 800389c:	f7ff fdd0 	bl	8003440 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80038a0:	4804      	ldr	r0, [pc, #16]	; (80038b4 <MX_TIM3_Init+0xf0>)
 80038a2:	f7ff fe06 	bl	80034b2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038a6:	bf00      	nop
 80038a8:	3730      	adds	r7, #48	; 0x30
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40020000 	.word	0x40020000
 80038b4:	40000400 	.word	0x40000400

080038b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80038cc:	2004      	movs	r0, #4
 80038ce:	f7ff fb87 	bl	8002fe0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 80038da:	2301      	movs	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	480f      	ldr	r0, [pc, #60]	; (8003924 <MX_TIM4_Init+0x6c>)
 80038e8:	f000 fd50 	bl	800438c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80038ec:	480d      	ldr	r0, [pc, #52]	; (8003924 <MX_TIM4_Init+0x6c>)
 80038ee:	f7ff fbb7 	bl	8003060 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerInput(TIM4, LL_TIM_TS_ITR0);
 80038f2:	2100      	movs	r1, #0
 80038f4:	480b      	ldr	r0, [pc, #44]	; (8003924 <MX_TIM4_Init+0x6c>)
 80038f6:	f7ff fdc9 	bl	800348c <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM4, LL_TIM_SLAVEMODE_DISABLED);
 80038fa:	2100      	movs	r1, #0
 80038fc:	4809      	ldr	r0, [pc, #36]	; (8003924 <MX_TIM4_Init+0x6c>)
 80038fe:	f7ff fdb2 	bl	8003466 <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM4);
 8003902:	4808      	ldr	r0, [pc, #32]	; (8003924 <MX_TIM4_Init+0x6c>)
 8003904:	f7ff fde5 	bl	80034d2 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM4);
 8003908:	4806      	ldr	r0, [pc, #24]	; (8003924 <MX_TIM4_Init+0x6c>)
 800390a:	f7ff fdf2 	bl	80034f2 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800390e:	2100      	movs	r1, #0
 8003910:	4804      	ldr	r0, [pc, #16]	; (8003924 <MX_TIM4_Init+0x6c>)
 8003912:	f7ff fd95 	bl	8003440 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8003916:	4803      	ldr	r0, [pc, #12]	; (8003924 <MX_TIM4_Init+0x6c>)
 8003918:	f7ff fdcb 	bl	80034b2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800391c:	bf00      	nop
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40000800 	.word	0x40000800

08003928 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08e      	sub	sp, #56	; 0x38
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800392e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	609a      	str	r2, [r3, #8]
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800393e:	1d3b      	adds	r3, r7, #4
 8003940:	2220      	movs	r2, #32
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f002 f937 	bl	8005bb8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 800394a:	2008      	movs	r0, #8
 800394c:	f7ff fb48 	bl	8002fe0 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003950:	f7ff faa4 	bl	8002e9c <__NVIC_GetPriorityGrouping>
 8003954:	4603      	mov	r3, r0
 8003956:	2200      	movs	r2, #0
 8003958:	2101      	movs	r1, #1
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff faf4 	bl	8002f48 <NVIC_EncodePriority>
 8003960:	4603      	mov	r3, r0
 8003962:	4619      	mov	r1, r3
 8003964:	2032      	movs	r0, #50	; 0x32
 8003966:	f7ff fac5 	bl	8002ef4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 800396a:	2032      	movs	r0, #50	; 0x32
 800396c:	f7ff faa4 	bl	8002eb8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 9;
 8003970:	2309      	movs	r3, #9
 8003972:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003974:	2300      	movs	r3, #0
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 199;
 8003978:	23c7      	movs	r3, #199	; 0xc7
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800397c:	2300      	movs	r3, #0
 800397e:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8003980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003984:	4619      	mov	r1, r3
 8003986:	481e      	ldr	r0, [pc, #120]	; (8003a00 <MX_TIM5_Init+0xd8>)
 8003988:	f000 fd00 	bl	800438c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 800398c:	481c      	ldr	r0, [pc, #112]	; (8003a00 <MX_TIM5_Init+0xd8>)
 800398e:	f7ff fb57 	bl	8003040 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003992:	2100      	movs	r1, #0
 8003994:	481a      	ldr	r0, [pc, #104]	; (8003a00 <MX_TIM5_Init+0xd8>)
 8003996:	f7ff fd2b 	bl	80033f0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 9;
 80039a6:	2309      	movs	r3, #9
 80039a8:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	461a      	mov	r2, r3
 80039b2:	2101      	movs	r1, #1
 80039b4:	4812      	ldr	r0, [pc, #72]	; (8003a00 <MX_TIM5_Init+0xd8>)
 80039b6:	f000 fd63 	bl	8004480 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH1);
 80039ba:	2101      	movs	r1, #1
 80039bc:	4810      	ldr	r0, [pc, #64]	; (8003a00 <MX_TIM5_Init+0xd8>)
 80039be:	f7ff fb5f 	bl	8003080 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.CompareValue = 190;
 80039c2:	23be      	movs	r3, #190	; 0xbe
 80039c4:	613b      	str	r3, [r7, #16]
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80039c6:	1d3b      	adds	r3, r7, #4
 80039c8:	461a      	mov	r2, r3
 80039ca:	2110      	movs	r1, #16
 80039cc:	480c      	ldr	r0, [pc, #48]	; (8003a00 <MX_TIM5_Init+0xd8>)
 80039ce:	f000 fd57 	bl	8004480 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH2);
 80039d2:	2110      	movs	r1, #16
 80039d4:	480a      	ldr	r0, [pc, #40]	; (8003a00 <MX_TIM5_Init+0xd8>)
 80039d6:	f7ff fb53 	bl	8003080 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80039da:	2100      	movs	r1, #0
 80039dc:	4808      	ldr	r0, [pc, #32]	; (8003a00 <MX_TIM5_Init+0xd8>)
 80039de:	f7ff fd2f 	bl	8003440 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 80039e2:	4807      	ldr	r0, [pc, #28]	; (8003a00 <MX_TIM5_Init+0xd8>)
 80039e4:	f7ff fd65 	bl	80034b2 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 80039e8:	2101      	movs	r1, #1
 80039ea:	4805      	ldr	r0, [pc, #20]	; (8003a00 <MX_TIM5_Init+0xd8>)
 80039ec:	f7ff fb8e 	bl	800310c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 80039f0:	2110      	movs	r1, #16
 80039f2:	4803      	ldr	r0, [pc, #12]	; (8003a00 <MX_TIM5_Init+0xd8>)
 80039f4:	f7ff fb8a 	bl	800310c <LL_TIM_OC_EnablePreload>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80039f8:	bf00      	nop
 80039fa:	3738      	adds	r7, #56	; 0x38
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40000c00 	.word	0x40000c00

08003a04 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 8003a18:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003a1c:	f7ff faf8 	bl	8003010 <LL_APB2_GRP1_EnableClock>

  /* TIM10 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003a20:	f7ff fa3c 	bl	8002e9c <__NVIC_GetPriorityGrouping>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2200      	movs	r2, #0
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff fa8c 	bl	8002f48 <NVIC_EncodePriority>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4619      	mov	r1, r3
 8003a34:	2019      	movs	r0, #25
 8003a36:	f7ff fa5d 	bl	8002ef4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003a3a:	2019      	movs	r0, #25
 8003a3c:	f7ff fa3c 	bl	8002eb8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 95;
 8003a40:	235f      	movs	r3, #95	; 0x5f
 8003a42:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8003a48:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003a4c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	4619      	mov	r1, r3
 8003a56:	4805      	ldr	r0, [pc, #20]	; (8003a6c <MX_TIM10_Init+0x68>)
 8003a58:	f000 fc98 	bl	800438c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM10);
 8003a5c:	4803      	ldr	r0, [pc, #12]	; (8003a6c <MX_TIM10_Init+0x68>)
 8003a5e:	f7ff faef 	bl	8003040 <LL_TIM_EnableARRPreload>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003a62:	bf00      	nop
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40014400 	.word	0x40014400

08003a70 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 8003a84:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003a88:	f7ff fac2 	bl	8003010 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 99;
 8003a94:	2363      	movs	r3, #99	; 0x63
 8003a96:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4804      	ldr	r0, [pc, #16]	; (8003ab4 <MX_TIM11_Init+0x44>)
 8003aa2:	f000 fc73 	bl	800438c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM11);
 8003aa6:	4803      	ldr	r0, [pc, #12]	; (8003ab4 <MX_TIM11_Init+0x44>)
 8003aa8:	f7ff fada 	bl	8003060 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003aac:	bf00      	nop
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40014800 	.word	0x40014800

08003ab8 <LL_AHB1_GRP1_EnableClock>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003ac0:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac4:	4907      	ldr	r1, [pc, #28]	; (8003ae4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <LL_APB2_GRP1_EnableClock>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af4:	4907      	ldr	r1, [pc, #28]	; (8003b14 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4013      	ands	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40023800 	.word	0x40023800

08003b18 <LL_USART_Enable>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	60da      	str	r2, [r3, #12]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_USART_ConfigAsyncMode>:
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	615a      	str	r2, [r3, #20]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08e      	sub	sp, #56	; 0x38
 8003b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003b6a:	f107 031c 	add.w	r3, r7, #28
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	611a      	str	r2, [r3, #16]
 8003b7a:	615a      	str	r2, [r3, #20]
 8003b7c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	60da      	str	r2, [r3, #12]
 8003b8a:	611a      	str	r2, [r3, #16]
 8003b8c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003b8e:	2010      	movs	r0, #16
 8003b90:	f7ff ffaa 	bl	8003ae8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003b94:	2001      	movs	r0, #1
 8003b96:	f7ff ff8f 	bl	8003ab8 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8003b9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003bb0:	2307      	movs	r3, #7
 8003bb2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4810      	ldr	r0, [pc, #64]	; (8003bfc <MX_USART1_UART_Init+0x98>)
 8003bba:	f000 f951 	bl	8003e60 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003bbe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003bc2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003bd0:	230c      	movs	r3, #12
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8003bdc:	f107 031c 	add.w	r3, r7, #28
 8003be0:	4619      	mov	r1, r3
 8003be2:	4807      	ldr	r0, [pc, #28]	; (8003c00 <MX_USART1_UART_Init+0x9c>)
 8003be4:	f001 f8ca 	bl	8004d7c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8003be8:	4805      	ldr	r0, [pc, #20]	; (8003c00 <MX_USART1_UART_Init+0x9c>)
 8003bea:	f7ff ffa5 	bl	8003b38 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8003bee:	4804      	ldr	r0, [pc, #16]	; (8003c00 <MX_USART1_UART_Init+0x9c>)
 8003bf0:	f7ff ff92 	bl	8003b18 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bf4:	bf00      	nop
 8003bf6:	3738      	adds	r7, #56	; 0x38
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40020000 	.word	0x40020000
 8003c00:	40011000 	.word	0x40011000

08003c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c08:	480d      	ldr	r0, [pc, #52]	; (8003c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c0a:	490e      	ldr	r1, [pc, #56]	; (8003c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c10:	e002      	b.n	8003c18 <LoopCopyDataInit>

08003c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c16:	3304      	adds	r3, #4

08003c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c1c:	d3f9      	bcc.n	8003c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c1e:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c20:	4c0b      	ldr	r4, [pc, #44]	; (8003c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c24:	e001      	b.n	8003c2a <LoopFillZerobss>

08003c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c28:	3204      	adds	r2, #4

08003c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c2c:	d3fb      	bcc.n	8003c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c2e:	f7ff f923 	bl	8002e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c32:	f002 f819 	bl	8005c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c36:	f7fe fe72 	bl	800291e <main>
  bx  lr    
 8003c3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c44:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8003c48:	08007f0c 	.word	0x08007f0c
  ldr r2, =_sbss
 8003c4c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8003c50:	20000370 	.word	0x20000370

08003c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c54:	e7fe      	b.n	8003c54 <ADC_IRQHandler>

08003c56 <LL_GPIO_SetPinMode>:
{
 8003c56:	b480      	push	{r7}
 8003c58:	b089      	sub	sp, #36	; 0x24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	2103      	movs	r1, #3
 8003c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	401a      	ands	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	61bb      	str	r3, [r7, #24]
  return result;
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	601a      	str	r2, [r3, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	3724      	adds	r7, #36	; 0x24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_GPIO_SetPinOutputType>:
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	401a      	ands	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	fb01 f303 	mul.w	r3, r1, r3
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	605a      	str	r2, [r3, #4]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_GPIO_SetPinSpeed>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	613b      	str	r3, [r7, #16]
  return result;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2103      	movs	r1, #3
 8003d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	401a      	ands	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	61bb      	str	r3, [r7, #24]
  return result;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	609a      	str	r2, [r3, #8]
}
 8003d36:	bf00      	nop
 8003d38:	3724      	adds	r7, #36	; 0x24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_GPIO_SetPinPull>:
{
 8003d42:	b480      	push	{r7}
 8003d44:	b089      	sub	sp, #36	; 0x24
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	613b      	str	r3, [r7, #16]
  return result;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	2103      	movs	r1, #3
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	401a      	ands	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	61bb      	str	r3, [r7, #24]
  return result;
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	fab3 f383 	clz	r3, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	60da      	str	r2, [r3, #12]
}
 8003d94:	bf00      	nop
 8003d96:	3724      	adds	r7, #36	; 0x24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <LL_GPIO_SetAFPin_0_7>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b089      	sub	sp, #36	; 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a1a      	ldr	r2, [r3, #32]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	fa93 f3a3 	rbit	r3, r3
 8003dba:	613b      	str	r3, [r7, #16]
  return result;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	210f      	movs	r1, #15
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	401a      	ands	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	fa93 f3a3 	rbit	r3, r3
 8003dda:	61bb      	str	r3, [r7, #24]
  return result;
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	3724      	adds	r7, #36	; 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <LL_GPIO_SetAFPin_8_15>:
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b089      	sub	sp, #36	; 0x24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fa93 f3a3 	rbit	r3, r3
 8003e1a:	613b      	str	r3, [r7, #16]
  return result;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	210f      	movs	r1, #15
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	401a      	ands	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	0a1b      	lsrs	r3, r3, #8
 8003e34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	61bb      	str	r3, [r7, #24]
  return result;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	fab3 f383 	clz	r3, r3
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003e54:	bf00      	nop
 8003e56:	3724      	adds	r7, #36	; 0x24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	613b      	str	r3, [r7, #16]
  return result;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	fab3 f383 	clz	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003e8a:	e050      	b.n	8003f2e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	2101      	movs	r1, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d042      	beq.n	8003f28 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d003      	beq.n	8003eb2 <LL_GPIO_Init+0x52>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d10d      	bne.n	8003ece <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	69b9      	ldr	r1, [r7, #24]
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff ff12 	bl	8003ce4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	69b9      	ldr	r1, [r7, #24]
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff fef3 	bl	8003cb4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	69b9      	ldr	r1, [r7, #24]
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff ff33 	bl	8003d42 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d11a      	bne.n	8003f1a <LL_GPIO_Init+0xba>
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	fa93 f3a3 	rbit	r3, r3
 8003eee:	60bb      	str	r3, [r7, #8]
  return result;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003ef2:	fab3 f383 	clz	r3, r3
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b07      	cmp	r3, #7
 8003efa:	d807      	bhi.n	8003f0c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	461a      	mov	r2, r3
 8003f02:	69b9      	ldr	r1, [r7, #24]
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff4b 	bl	8003da0 <LL_GPIO_SetAFPin_0_7>
 8003f0a:	e006      	b.n	8003f1a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	461a      	mov	r2, r3
 8003f12:	69b9      	ldr	r1, [r7, #24]
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff ff72 	bl	8003dfe <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	69b9      	ldr	r1, [r7, #24]
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fe97 	bl	8003c56 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1a7      	bne.n	8003e8c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <LL_RCC_GetSysClkSource>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f4c:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <LL_RCC_GetSysClkSource+0x18>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800

08003f64 <LL_RCC_GetAHBPrescaler>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <LL_RCC_GetAHBPrescaler+0x18>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800

08003f80 <LL_RCC_GetAPB1Prescaler>:
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800

08003f9c <LL_RCC_GetAPB2Prescaler>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800

08003fb8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fbc:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <LL_RCC_PLL_GetMainSource+0x18>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800

08003fd4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <LL_RCC_PLL_GetN+0x18>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	099b      	lsrs	r3, r3, #6
 8003fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40023800 	.word	0x40023800

08003ff0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003ff4:	4b04      	ldr	r3, [pc, #16]	; (8004008 <LL_RCC_PLL_GetP+0x18>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800

0800400c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004010:	4b04      	ldr	r3, [pc, #16]	; (8004024 <LL_RCC_PLL_GetDivider+0x18>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800

08004028 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004030:	f000 f820 	bl	8004074 <RCC_GetSystemClockFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f840 	bl	80040c4 <RCC_GetHCLKClockFreq>
 8004044:	4602      	mov	r2, r0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f84e 	bl	80040f0 <RCC_GetPCLK1ClockFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f85a 	bl	8004118 <RCC_GetPCLK2ClockFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	60da      	str	r2, [r3, #12]
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800407e:	f7ff ff63 	bl	8003f48 <LL_RCC_GetSysClkSource>
 8004082:	4603      	mov	r3, r0
 8004084:	2b08      	cmp	r3, #8
 8004086:	d00c      	beq.n	80040a2 <RCC_GetSystemClockFreq+0x2e>
 8004088:	2b08      	cmp	r3, #8
 800408a:	d80f      	bhi.n	80040ac <RCC_GetSystemClockFreq+0x38>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <RCC_GetSystemClockFreq+0x22>
 8004090:	2b04      	cmp	r3, #4
 8004092:	d003      	beq.n	800409c <RCC_GetSystemClockFreq+0x28>
 8004094:	e00a      	b.n	80040ac <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004096:	4b09      	ldr	r3, [pc, #36]	; (80040bc <RCC_GetSystemClockFreq+0x48>)
 8004098:	607b      	str	r3, [r7, #4]
      break;
 800409a:	e00a      	b.n	80040b2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <RCC_GetSystemClockFreq+0x4c>)
 800409e:	607b      	str	r3, [r7, #4]
      break;
 80040a0:	e007      	b.n	80040b2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80040a2:	2008      	movs	r0, #8
 80040a4:	f000 f84c 	bl	8004140 <RCC_PLL_GetFreqDomain_SYS>
 80040a8:	6078      	str	r0, [r7, #4]
      break;
 80040aa:	e002      	b.n	80040b2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80040ac:	4b03      	ldr	r3, [pc, #12]	; (80040bc <RCC_GetSystemClockFreq+0x48>)
 80040ae:	607b      	str	r3, [r7, #4]
      break;
 80040b0:	bf00      	nop
  }

  return frequency;
 80040b2:	687b      	ldr	r3, [r7, #4]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	00f42400 	.word	0x00f42400
 80040c0:	017d7840 	.word	0x017d7840

080040c4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80040cc:	f7ff ff4a 	bl	8003f64 <LL_RCC_GetAHBPrescaler>
 80040d0:	4603      	mov	r3, r0
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <RCC_GetHCLKClockFreq+0x28>)
 80040da:	5cd3      	ldrb	r3, [r2, r3]
 80040dc:	461a      	mov	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	40d3      	lsrs	r3, r2
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	08007b54 	.word	0x08007b54

080040f0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80040f8:	f7ff ff42 	bl	8003f80 <LL_RCC_GetAPB1Prescaler>
 80040fc:	4603      	mov	r3, r0
 80040fe:	0a9b      	lsrs	r3, r3, #10
 8004100:	4a04      	ldr	r2, [pc, #16]	; (8004114 <RCC_GetPCLK1ClockFreq+0x24>)
 8004102:	5cd3      	ldrb	r3, [r2, r3]
 8004104:	461a      	mov	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	40d3      	lsrs	r3, r2
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	08007b64 	.word	0x08007b64

08004118 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004120:	f7ff ff3c 	bl	8003f9c <LL_RCC_GetAPB2Prescaler>
 8004124:	4603      	mov	r3, r0
 8004126:	0b5b      	lsrs	r3, r3, #13
 8004128:	4a04      	ldr	r2, [pc, #16]	; (800413c <RCC_GetPCLK2ClockFreq+0x24>)
 800412a:	5cd3      	ldrb	r3, [r2, r3]
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	40d3      	lsrs	r3, r2
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	08007b64 	.word	0x08007b64

08004140 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004154:	f7ff ff30 	bl	8003fb8 <LL_RCC_PLL_GetMainSource>
 8004158:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004166:	d003      	beq.n	8004170 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004168:	e005      	b.n	8004176 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800416a:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800416c:	617b      	str	r3, [r7, #20]
      break;
 800416e:	e005      	b.n	800417c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004172:	617b      	str	r3, [r7, #20]
      break;
 8004174:	e002      	b.n	800417c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004178:	617b      	str	r3, [r7, #20]
      break;
 800417a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b08      	cmp	r3, #8
 8004180:	d113      	bne.n	80041aa <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004182:	f7ff ff43 	bl	800400c <LL_RCC_PLL_GetDivider>
 8004186:	4602      	mov	r2, r0
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	fbb3 f4f2 	udiv	r4, r3, r2
 800418e:	f7ff ff21 	bl	8003fd4 <LL_RCC_PLL_GetN>
 8004192:	4603      	mov	r3, r0
 8004194:	fb03 f404 	mul.w	r4, r3, r4
 8004198:	f7ff ff2a 	bl	8003ff0 <LL_RCC_PLL_GetP>
 800419c:	4603      	mov	r3, r0
 800419e:	0c1b      	lsrs	r3, r3, #16
 80041a0:	3301      	adds	r3, #1
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80041a8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80041aa:	693b      	ldr	r3, [r7, #16]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd90      	pop	{r4, r7, pc}
 80041b4:	00f42400 	.word	0x00f42400
 80041b8:	017d7840 	.word	0x017d7840

080041bc <LL_SPI_IsEnabled>:
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041cc:	2b40      	cmp	r3, #64	; 0x40
 80041ce:	d101      	bne.n	80041d4 <LL_SPI_IsEnabled+0x18>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <LL_SPI_IsEnabled+0x1a>
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LL_SPI_SetCRCPolynomial>:
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	611a      	str	r2, [r3, #16]
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ffd3 	bl	80041bc <LL_SPI_IsEnabled>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d139      	bne.n	8004290 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004224:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	6811      	ldr	r1, [r2, #0]
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	6852      	ldr	r2, [r2, #4]
 8004230:	4311      	orrs	r1, r2
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	6892      	ldr	r2, [r2, #8]
 8004236:	4311      	orrs	r1, r2
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	68d2      	ldr	r2, [r2, #12]
 800423c:	4311      	orrs	r1, r2
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	6912      	ldr	r2, [r2, #16]
 8004242:	4311      	orrs	r1, r2
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	6952      	ldr	r2, [r2, #20]
 8004248:	4311      	orrs	r1, r2
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	6992      	ldr	r2, [r2, #24]
 800424e:	4311      	orrs	r1, r2
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	69d2      	ldr	r2, [r2, #28]
 8004254:	4311      	orrs	r1, r2
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	6a12      	ldr	r2, [r2, #32]
 800425a:	430a      	orrs	r2, r1
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f023 0204 	bic.w	r2, r3, #4
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427e:	d105      	bne.n	800428c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ffab 	bl	80041e2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800428c:	2300      	movs	r3, #0
 800428e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	61da      	str	r2, [r3, #28]
  return status;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <LL_TIM_SetPrescaler>:
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <LL_TIM_SetAutoReload>:
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <LL_TIM_SetRepetitionCounter>:
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <LL_TIM_OC_SetCompareCH1>:
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	635a      	str	r2, [r3, #52]	; 0x34
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <LL_TIM_OC_SetCompareCH2>:
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <LL_TIM_OC_SetCompareCH3>:
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <LL_TIM_OC_SetCompareCH4>:
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f043 0201 	orr.w	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	615a      	str	r2, [r3, #20]
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a31      	ldr	r2, [pc, #196]	; (8004464 <LL_TIM_Init+0xd8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00f      	beq.n	80043c4 <LL_TIM_Init+0x38>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043aa:	d00b      	beq.n	80043c4 <LL_TIM_Init+0x38>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a2e      	ldr	r2, [pc, #184]	; (8004468 <LL_TIM_Init+0xdc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d007      	beq.n	80043c4 <LL_TIM_Init+0x38>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a2d      	ldr	r2, [pc, #180]	; (800446c <LL_TIM_Init+0xe0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <LL_TIM_Init+0x38>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a2c      	ldr	r2, [pc, #176]	; (8004470 <LL_TIM_Init+0xe4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d106      	bne.n	80043d2 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a23      	ldr	r2, [pc, #140]	; (8004464 <LL_TIM_Init+0xd8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01b      	beq.n	8004412 <LL_TIM_Init+0x86>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e0:	d017      	beq.n	8004412 <LL_TIM_Init+0x86>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a20      	ldr	r2, [pc, #128]	; (8004468 <LL_TIM_Init+0xdc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <LL_TIM_Init+0x86>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a1f      	ldr	r2, [pc, #124]	; (800446c <LL_TIM_Init+0xe0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00f      	beq.n	8004412 <LL_TIM_Init+0x86>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <LL_TIM_Init+0xe4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00b      	beq.n	8004412 <LL_TIM_Init+0x86>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <LL_TIM_Init+0xe8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d007      	beq.n	8004412 <LL_TIM_Init+0x86>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <LL_TIM_Init+0xec>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d003      	beq.n	8004412 <LL_TIM_Init+0x86>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a1b      	ldr	r2, [pc, #108]	; (800447c <LL_TIM_Init+0xf0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d106      	bne.n	8004420 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ff48 	bl	80042c2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff ff34 	bl	80042a6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a08      	ldr	r2, [pc, #32]	; (8004464 <LL_TIM_Init+0xd8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d105      	bne.n	8004452 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff46 	bl	80042de <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff ff89 	bl	800436a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40010000 	.word	0x40010000
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40000c00 	.word	0x40000c00
 8004474:	40014000 	.word	0x40014000
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800

08004480 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004496:	d027      	beq.n	80044e8 <LL_TIM_OC_Init+0x68>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449e:	d82a      	bhi.n	80044f6 <LL_TIM_OC_Init+0x76>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a6:	d018      	beq.n	80044da <LL_TIM_OC_Init+0x5a>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ae:	d822      	bhi.n	80044f6 <LL_TIM_OC_Init+0x76>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d003      	beq.n	80044be <LL_TIM_OC_Init+0x3e>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d007      	beq.n	80044cc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80044bc:	e01b      	b.n	80044f6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f867 	bl	8004594 <OC1Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ca:	e015      	b.n	80044f8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f8c6 	bl	8004660 <OC2Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	75fb      	strb	r3, [r7, #23]
      break;
 80044d8:	e00e      	b.n	80044f8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f929 	bl	8004734 <OC3Config>
 80044e2:	4603      	mov	r3, r0
 80044e4:	75fb      	strb	r3, [r7, #23]
      break;
 80044e6:	e007      	b.n	80044f8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f98c 	bl	8004808 <OC4Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	75fb      	strb	r3, [r7, #23]
      break;
 80044f4:	e000      	b.n	80044f8 <LL_TIM_OC_Init+0x78>
      break;
 80044f6:	bf00      	nop
  }

  return result;
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	7b12      	ldrb	r2, [r2, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	89d2      	ldrh	r2, [r2, #14]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f023 0201 	bic.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f023 0202 	bic.w	r2, r3, #2
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0201 	bic.w	r2, r3, #1
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a1a      	ldr	r2, [pc, #104]	; (800465c <OC1Config+0xc8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d11e      	bne.n	8004634 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f023 0208 	bic.w	r2, r3, #8
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 0204 	bic.w	r2, r3, #4
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff fe57 	bl	80042fa <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40010000 	.word	0x40010000

08004660 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	f023 0210 	bic.w	r2, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	4313      	orrs	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f023 0220 	bic.w	r2, r3, #32
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 0210 	bic.w	r2, r3, #16
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <OC2Config+0xd0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d11f      	bne.n	8004708 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	019b      	lsls	r3, r3, #6
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	019b      	lsls	r3, r3, #6
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4619      	mov	r1, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff fdfb 	bl	8004316 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40010000 	.word	0x40010000

08004734 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0303 	bic.w	r3, r3, #3
 8004762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1b      	ldr	r2, [pc, #108]	; (8004804 <OC3Config+0xd0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d11f      	bne.n	80047da <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	029b      	lsls	r3, r3, #10
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	029b      	lsls	r3, r3, #10
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	015b      	lsls	r3, r3, #5
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	4619      	mov	r1, r3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff fda0 	bl	8004332 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40010000 	.word	0x40010000

08004808 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	031b      	lsls	r3, r3, #12
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	031b      	lsls	r3, r3, #12
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a0f      	ldr	r2, [pc, #60]	; (80048a8 <OC4Config+0xa0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d107      	bne.n	8004880 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	019b      	lsls	r3, r3, #6
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff fd5b 	bl	800434e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40010000 	.word	0x40010000

080048ac <LL_USART_IsEnabled>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c0:	bf0c      	ite	eq
 80048c2:	2301      	moveq	r3, #1
 80048c4:	2300      	movne	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <LL_USART_SetStopBitsLength>:
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	611a      	str	r2, [r3, #16]
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <LL_USART_SetHWFlowCtrl>:
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	615a      	str	r2, [r3, #20]
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_USART_SetBaudRate>:
{
 8004920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004924:	b0c0      	sub	sp, #256	; 0x100
 8004926:	af00      	add	r7, sp, #0
 8004928:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800492c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004930:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004934:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004940:	f040 810c 	bne.w	8004b5c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004944:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004948:	2200      	movs	r2, #0
 800494a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800494e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004952:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004956:	4622      	mov	r2, r4
 8004958:	462b      	mov	r3, r5
 800495a:	1891      	adds	r1, r2, r2
 800495c:	6639      	str	r1, [r7, #96]	; 0x60
 800495e:	415b      	adcs	r3, r3
 8004960:	667b      	str	r3, [r7, #100]	; 0x64
 8004962:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004966:	4621      	mov	r1, r4
 8004968:	eb12 0801 	adds.w	r8, r2, r1
 800496c:	4629      	mov	r1, r5
 800496e:	eb43 0901 	adc.w	r9, r3, r1
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800497e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004986:	4690      	mov	r8, r2
 8004988:	4699      	mov	r9, r3
 800498a:	4623      	mov	r3, r4
 800498c:	eb18 0303 	adds.w	r3, r8, r3
 8004990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004994:	462b      	mov	r3, r5
 8004996:	eb49 0303 	adc.w	r3, r9, r3
 800499a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800499e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80049a2:	2200      	movs	r2, #0
 80049a4:	469a      	mov	sl, r3
 80049a6:	4693      	mov	fp, r2
 80049a8:	eb1a 030a 	adds.w	r3, sl, sl
 80049ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80049ae:	eb4b 030b 	adc.w	r3, fp, fp
 80049b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049bc:	f7fc f8fc 	bl	8000bb8 <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4b64      	ldr	r3, [pc, #400]	; (8004b58 <LL_USART_SetBaudRate+0x238>)
 80049c6:	fba3 2302 	umull	r2, r3, r3, r2
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	b29c      	uxth	r4, r3
 80049d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049dc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049e0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80049e4:	4642      	mov	r2, r8
 80049e6:	464b      	mov	r3, r9
 80049e8:	1891      	adds	r1, r2, r2
 80049ea:	6539      	str	r1, [r7, #80]	; 0x50
 80049ec:	415b      	adcs	r3, r3
 80049ee:	657b      	str	r3, [r7, #84]	; 0x54
 80049f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049f4:	4641      	mov	r1, r8
 80049f6:	1851      	adds	r1, r2, r1
 80049f8:	64b9      	str	r1, [r7, #72]	; 0x48
 80049fa:	4649      	mov	r1, r9
 80049fc:	414b      	adcs	r3, r1
 80049fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004a0c:	4659      	mov	r1, fp
 8004a0e:	00cb      	lsls	r3, r1, #3
 8004a10:	4651      	mov	r1, sl
 8004a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a16:	4651      	mov	r1, sl
 8004a18:	00ca      	lsls	r2, r1, #3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4603      	mov	r3, r0
 8004a20:	4642      	mov	r2, r8
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a28:	464b      	mov	r3, r9
 8004a2a:	460a      	mov	r2, r1
 8004a2c:	eb42 0303 	adc.w	r3, r2, r3
 8004a30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a3e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004a42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004a46:	460b      	mov	r3, r1
 8004a48:	18db      	adds	r3, r3, r3
 8004a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	eb42 0303 	adc.w	r3, r2, r3
 8004a52:	647b      	str	r3, [r7, #68]	; 0x44
 8004a54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a58:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004a5c:	f7fc f8ac 	bl	8000bb8 <__aeabi_uldivmod>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4611      	mov	r1, r2
 8004a66:	4b3c      	ldr	r3, [pc, #240]	; (8004b58 <LL_USART_SetBaudRate+0x238>)
 8004a68:	fba3 2301 	umull	r2, r3, r3, r1
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	2264      	movs	r2, #100	; 0x64
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
 8004a74:	1acb      	subs	r3, r1, r3
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <LL_USART_SetBaudRate+0x238>)
 8004a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	4423      	add	r3, r4
 8004a92:	b29c      	uxth	r4, r3
 8004a94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a9e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004aa2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004aa6:	4642      	mov	r2, r8
 8004aa8:	464b      	mov	r3, r9
 8004aaa:	1891      	adds	r1, r2, r2
 8004aac:	63b9      	str	r1, [r7, #56]	; 0x38
 8004aae:	415b      	adcs	r3, r3
 8004ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ab6:	4641      	mov	r1, r8
 8004ab8:	1851      	adds	r1, r2, r1
 8004aba:	6339      	str	r1, [r7, #48]	; 0x30
 8004abc:	4649      	mov	r1, r9
 8004abe:	414b      	adcs	r3, r1
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ace:	4659      	mov	r1, fp
 8004ad0:	00cb      	lsls	r3, r1, #3
 8004ad2:	4651      	mov	r1, sl
 8004ad4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad8:	4651      	mov	r1, sl
 8004ada:	00ca      	lsls	r2, r1, #3
 8004adc:	4610      	mov	r0, r2
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	4642      	mov	r2, r8
 8004ae4:	189b      	adds	r3, r3, r2
 8004ae6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004aea:	464b      	mov	r3, r9
 8004aec:	460a      	mov	r2, r1
 8004aee:	eb42 0303 	adc.w	r3, r2, r3
 8004af2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004af6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b00:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004b04:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	18db      	adds	r3, r3, r3
 8004b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b0e:	4613      	mov	r3, r2
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b1a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004b1e:	f7fc f84b 	bl	8000bb8 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <LL_USART_SetBaudRate+0x238>)
 8004b28:	fba3 1302 	umull	r1, r3, r3, r2
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	2164      	movs	r1, #100	; 0x64
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	3332      	adds	r3, #50	; 0x32
 8004b3a:	4a07      	ldr	r2, [pc, #28]	; (8004b58 <LL_USART_SetBaudRate+0x238>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	4423      	add	r3, r4
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b54:	609a      	str	r2, [r3, #8]
}
 8004b56:	e108      	b.n	8004d6a <LL_USART_SetBaudRate+0x44a>
 8004b58:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004b5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b60:	2200      	movs	r2, #0
 8004b62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b66:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b6a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004b6e:	4642      	mov	r2, r8
 8004b70:	464b      	mov	r3, r9
 8004b72:	1891      	adds	r1, r2, r2
 8004b74:	6239      	str	r1, [r7, #32]
 8004b76:	415b      	adcs	r3, r3
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b7e:	4641      	mov	r1, r8
 8004b80:	1854      	adds	r4, r2, r1
 8004b82:	4649      	mov	r1, r9
 8004b84:	eb43 0501 	adc.w	r5, r3, r1
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	00eb      	lsls	r3, r5, #3
 8004b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b96:	00e2      	lsls	r2, r4, #3
 8004b98:	4614      	mov	r4, r2
 8004b9a:	461d      	mov	r5, r3
 8004b9c:	4643      	mov	r3, r8
 8004b9e:	18e3      	adds	r3, r4, r3
 8004ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	eb45 0303 	adc.w	r3, r5, r3
 8004baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004bae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bb8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004bc8:	4629      	mov	r1, r5
 8004bca:	008b      	lsls	r3, r1, #2
 8004bcc:	4621      	mov	r1, r4
 8004bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	008a      	lsls	r2, r1, #2
 8004bd6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004bda:	f7fb ffed 	bl	8000bb8 <__aeabi_uldivmod>
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	4b65      	ldr	r3, [pc, #404]	; (8004d78 <LL_USART_SetBaudRate+0x458>)
 8004be4:	fba3 2302 	umull	r2, r3, r3, r2
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	b29c      	uxth	r4, r3
 8004bf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bfe:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004c02:	4642      	mov	r2, r8
 8004c04:	464b      	mov	r3, r9
 8004c06:	1891      	adds	r1, r2, r2
 8004c08:	61b9      	str	r1, [r7, #24]
 8004c0a:	415b      	adcs	r3, r3
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c12:	4641      	mov	r1, r8
 8004c14:	1851      	adds	r1, r2, r1
 8004c16:	6139      	str	r1, [r7, #16]
 8004c18:	4649      	mov	r1, r9
 8004c1a:	414b      	adcs	r3, r1
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c2a:	4659      	mov	r1, fp
 8004c2c:	00cb      	lsls	r3, r1, #3
 8004c2e:	4651      	mov	r1, sl
 8004c30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c34:	4651      	mov	r1, sl
 8004c36:	00ca      	lsls	r2, r1, #3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4642      	mov	r2, r8
 8004c40:	189b      	adds	r3, r3, r2
 8004c42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c46:	464b      	mov	r3, r9
 8004c48:	460a      	mov	r2, r1
 8004c4a:	eb42 0303 	adc.w	r3, r2, r3
 8004c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c5c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	008b      	lsls	r3, r1, #2
 8004c70:	4641      	mov	r1, r8
 8004c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c76:	4641      	mov	r1, r8
 8004c78:	008a      	lsls	r2, r1, #2
 8004c7a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004c7e:	f7fb ff9b 	bl	8000bb8 <__aeabi_uldivmod>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4611      	mov	r1, r2
 8004c88:	4b3b      	ldr	r3, [pc, #236]	; (8004d78 <LL_USART_SetBaudRate+0x458>)
 8004c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	2264      	movs	r2, #100	; 0x64
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	1acb      	subs	r3, r1, r3
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	3332      	adds	r3, #50	; 0x32
 8004c9c:	4a36      	ldr	r2, [pc, #216]	; (8004d78 <LL_USART_SetBaudRate+0x458>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	4423      	add	r3, r4
 8004cae:	b29c      	uxth	r4, r3
 8004cb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cb8:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cba:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cbe:	4642      	mov	r2, r8
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	1891      	adds	r1, r2, r2
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	415b      	adcs	r3, r3
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cce:	4641      	mov	r1, r8
 8004cd0:	1851      	adds	r1, r2, r1
 8004cd2:	6039      	str	r1, [r7, #0]
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	414b      	adcs	r3, r1
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ce6:	4659      	mov	r1, fp
 8004ce8:	00cb      	lsls	r3, r1, #3
 8004cea:	4651      	mov	r1, sl
 8004cec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cf0:	4651      	mov	r1, sl
 8004cf2:	00ca      	lsls	r2, r1, #3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4642      	mov	r2, r8
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	673b      	str	r3, [r7, #112]	; 0x70
 8004d00:	464b      	mov	r3, r9
 8004d02:	460a      	mov	r2, r1
 8004d04:	eb42 0303 	adc.w	r3, r2, r3
 8004d08:	677b      	str	r3, [r7, #116]	; 0x74
 8004d0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d0e:	2200      	movs	r2, #0
 8004d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004d20:	4649      	mov	r1, r9
 8004d22:	008b      	lsls	r3, r1, #2
 8004d24:	4641      	mov	r1, r8
 8004d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	008a      	lsls	r2, r1, #2
 8004d2e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004d32:	f7fb ff41 	bl	8000bb8 <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <LL_USART_SetBaudRate+0x458>)
 8004d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	2164      	movs	r1, #100	; 0x64
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	3332      	adds	r3, #50	; 0x32
 8004d4e:	4a0a      	ldr	r2, [pc, #40]	; (8004d78 <LL_USART_SetBaudRate+0x458>)
 8004d50:	fba2 2303 	umull	r2, r3, r2, r3
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	4423      	add	r3, r4
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d68:	609a      	str	r2, [r3, #8]
}
 8004d6a:	bf00      	nop
 8004d6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d76:	bf00      	nop
 8004d78:	51eb851f 	.word	0x51eb851f

08004d7c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff fd8c 	bl	80048ac <LL_USART_IsEnabled>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d149      	bne.n	8004e2e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004da2:	f023 030c 	bic.w	r3, r3, #12
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	6851      	ldr	r1, [r2, #4]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	68d2      	ldr	r2, [r2, #12]
 8004dae:	4311      	orrs	r1, r2
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	6912      	ldr	r2, [r2, #16]
 8004db4:	4311      	orrs	r1, r2
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	6992      	ldr	r2, [r2, #24]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff fd83 	bl	80048d4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff fd90 	bl	80048fa <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004dda:	f107 0308 	add.w	r3, r7, #8
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff f922 	bl	8004028 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a14      	ldr	r2, [pc, #80]	; (8004e38 <LL_USART_Init+0xbc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d102      	bne.n	8004df2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e00c      	b.n	8004e0c <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <LL_USART_Init+0xc0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d102      	bne.n	8004e00 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	e005      	b.n	8004e0c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a0f      	ldr	r2, [pc, #60]	; (8004e40 <LL_USART_Init+0xc4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d101      	bne.n	8004e0c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00d      	beq.n	8004e2e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69b9      	ldr	r1, [r7, #24]
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff fd79 	bl	8004920 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3720      	adds	r7, #32
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40011000 	.word	0x40011000
 8004e3c:	40004400 	.word	0x40004400
 8004e40:	40011400 	.word	0x40011400

08004e44 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e56:	4a07      	ldr	r2, [pc, #28]	; (8004e74 <LL_InitTick+0x30>)
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <LL_InitTick+0x30>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e62:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <LL_InitTick+0x30>)
 8004e64:	2205      	movs	r2, #5
 8004e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	e000e010 	.word	0xe000e010

08004e78 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004e80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ffdd 	bl	8004e44 <LL_InitTick>
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <LL_mDelay+0x48>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004ea2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d00c      	beq.n	8004ec6 <LL_mDelay+0x32>
  {
    Delay++;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004eb2:	e008      	b.n	8004ec6 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004eb4:	4b09      	ldr	r3, [pc, #36]	; (8004edc <LL_mDelay+0x48>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <LL_mDelay+0x32>
    {
      Delay--;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f3      	bne.n	8004eb4 <LL_mDelay+0x20>
    }
  }
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	e000e010 	.word	0xe000e010

08004ee0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004ee8:	4a04      	ldr	r2, [pc, #16]	; (8004efc <LL_SetSystemCoreClock+0x1c>)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6013      	str	r3, [r2, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	20000000 	.word	0x20000000

08004f00 <__cvt>:
 8004f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f04:	ec55 4b10 	vmov	r4, r5, d0
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	460e      	mov	r6, r1
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	462b      	mov	r3, r5
 8004f10:	bfbb      	ittet	lt
 8004f12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f16:	461d      	movlt	r5, r3
 8004f18:	2300      	movge	r3, #0
 8004f1a:	232d      	movlt	r3, #45	; 0x2d
 8004f1c:	700b      	strb	r3, [r1, #0]
 8004f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f24:	4691      	mov	r9, r2
 8004f26:	f023 0820 	bic.w	r8, r3, #32
 8004f2a:	bfbc      	itt	lt
 8004f2c:	4622      	movlt	r2, r4
 8004f2e:	4614      	movlt	r4, r2
 8004f30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f34:	d005      	beq.n	8004f42 <__cvt+0x42>
 8004f36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f3a:	d100      	bne.n	8004f3e <__cvt+0x3e>
 8004f3c:	3601      	adds	r6, #1
 8004f3e:	2102      	movs	r1, #2
 8004f40:	e000      	b.n	8004f44 <__cvt+0x44>
 8004f42:	2103      	movs	r1, #3
 8004f44:	ab03      	add	r3, sp, #12
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	ab02      	add	r3, sp, #8
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	ec45 4b10 	vmov	d0, r4, r5
 8004f50:	4653      	mov	r3, sl
 8004f52:	4632      	mov	r2, r6
 8004f54:	f000 ff38 	bl	8005dc8 <_dtoa_r>
 8004f58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	d102      	bne.n	8004f66 <__cvt+0x66>
 8004f60:	f019 0f01 	tst.w	r9, #1
 8004f64:	d022      	beq.n	8004fac <__cvt+0xac>
 8004f66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f6a:	eb07 0906 	add.w	r9, r7, r6
 8004f6e:	d110      	bne.n	8004f92 <__cvt+0x92>
 8004f70:	783b      	ldrb	r3, [r7, #0]
 8004f72:	2b30      	cmp	r3, #48	; 0x30
 8004f74:	d10a      	bne.n	8004f8c <__cvt+0x8c>
 8004f76:	2200      	movs	r2, #0
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	f7fb fdab 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f82:	b918      	cbnz	r0, 8004f8c <__cvt+0x8c>
 8004f84:	f1c6 0601 	rsb	r6, r6, #1
 8004f88:	f8ca 6000 	str.w	r6, [sl]
 8004f8c:	f8da 3000 	ldr.w	r3, [sl]
 8004f90:	4499      	add	r9, r3
 8004f92:	2200      	movs	r2, #0
 8004f94:	2300      	movs	r3, #0
 8004f96:	4620      	mov	r0, r4
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f7fb fd9d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f9e:	b108      	cbz	r0, 8004fa4 <__cvt+0xa4>
 8004fa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fa4:	2230      	movs	r2, #48	; 0x30
 8004fa6:	9b03      	ldr	r3, [sp, #12]
 8004fa8:	454b      	cmp	r3, r9
 8004faa:	d307      	bcc.n	8004fbc <__cvt+0xbc>
 8004fac:	9b03      	ldr	r3, [sp, #12]
 8004fae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fb0:	1bdb      	subs	r3, r3, r7
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	b004      	add	sp, #16
 8004fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbc:	1c59      	adds	r1, r3, #1
 8004fbe:	9103      	str	r1, [sp, #12]
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	e7f0      	b.n	8004fa6 <__cvt+0xa6>

08004fc4 <__exponent>:
 8004fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2900      	cmp	r1, #0
 8004fca:	bfb8      	it	lt
 8004fcc:	4249      	neglt	r1, r1
 8004fce:	f803 2b02 	strb.w	r2, [r3], #2
 8004fd2:	bfb4      	ite	lt
 8004fd4:	222d      	movlt	r2, #45	; 0x2d
 8004fd6:	222b      	movge	r2, #43	; 0x2b
 8004fd8:	2909      	cmp	r1, #9
 8004fda:	7042      	strb	r2, [r0, #1]
 8004fdc:	dd2a      	ble.n	8005034 <__exponent+0x70>
 8004fde:	f10d 0207 	add.w	r2, sp, #7
 8004fe2:	4617      	mov	r7, r2
 8004fe4:	260a      	movs	r6, #10
 8004fe6:	4694      	mov	ip, r2
 8004fe8:	fb91 f5f6 	sdiv	r5, r1, r6
 8004fec:	fb06 1415 	mls	r4, r6, r5, r1
 8004ff0:	3430      	adds	r4, #48	; 0x30
 8004ff2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	2c63      	cmp	r4, #99	; 0x63
 8004ffa:	f102 32ff 	add.w	r2, r2, #4294967295
 8004ffe:	4629      	mov	r1, r5
 8005000:	dcf1      	bgt.n	8004fe6 <__exponent+0x22>
 8005002:	3130      	adds	r1, #48	; 0x30
 8005004:	f1ac 0402 	sub.w	r4, ip, #2
 8005008:	f802 1c01 	strb.w	r1, [r2, #-1]
 800500c:	1c41      	adds	r1, r0, #1
 800500e:	4622      	mov	r2, r4
 8005010:	42ba      	cmp	r2, r7
 8005012:	d30a      	bcc.n	800502a <__exponent+0x66>
 8005014:	f10d 0209 	add.w	r2, sp, #9
 8005018:	eba2 020c 	sub.w	r2, r2, ip
 800501c:	42bc      	cmp	r4, r7
 800501e:	bf88      	it	hi
 8005020:	2200      	movhi	r2, #0
 8005022:	4413      	add	r3, r2
 8005024:	1a18      	subs	r0, r3, r0
 8005026:	b003      	add	sp, #12
 8005028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800502e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005032:	e7ed      	b.n	8005010 <__exponent+0x4c>
 8005034:	2330      	movs	r3, #48	; 0x30
 8005036:	3130      	adds	r1, #48	; 0x30
 8005038:	7083      	strb	r3, [r0, #2]
 800503a:	70c1      	strb	r1, [r0, #3]
 800503c:	1d03      	adds	r3, r0, #4
 800503e:	e7f1      	b.n	8005024 <__exponent+0x60>

08005040 <_printf_float>:
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	ed2d 8b02 	vpush	{d8}
 8005048:	b08d      	sub	sp, #52	; 0x34
 800504a:	460c      	mov	r4, r1
 800504c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005050:	4616      	mov	r6, r2
 8005052:	461f      	mov	r7, r3
 8005054:	4605      	mov	r5, r0
 8005056:	f000 fdb7 	bl	8005bc8 <_localeconv_r>
 800505a:	f8d0 a000 	ldr.w	sl, [r0]
 800505e:	4650      	mov	r0, sl
 8005060:	f7fb f90e 	bl	8000280 <strlen>
 8005064:	2300      	movs	r3, #0
 8005066:	930a      	str	r3, [sp, #40]	; 0x28
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	9305      	str	r3, [sp, #20]
 800506c:	f8d8 3000 	ldr.w	r3, [r8]
 8005070:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005074:	3307      	adds	r3, #7
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	f103 0208 	add.w	r2, r3, #8
 800507e:	f8c8 2000 	str.w	r2, [r8]
 8005082:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005086:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800508a:	9307      	str	r3, [sp, #28]
 800508c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005090:	ee08 0a10 	vmov	s16, r0
 8005094:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800509c:	4b9e      	ldr	r3, [pc, #632]	; (8005318 <_printf_float+0x2d8>)
 800509e:	f04f 32ff 	mov.w	r2, #4294967295
 80050a2:	f7fb fd4b 	bl	8000b3c <__aeabi_dcmpun>
 80050a6:	bb88      	cbnz	r0, 800510c <_printf_float+0xcc>
 80050a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ac:	4b9a      	ldr	r3, [pc, #616]	; (8005318 <_printf_float+0x2d8>)
 80050ae:	f04f 32ff 	mov.w	r2, #4294967295
 80050b2:	f7fb fd25 	bl	8000b00 <__aeabi_dcmple>
 80050b6:	bb48      	cbnz	r0, 800510c <_printf_float+0xcc>
 80050b8:	2200      	movs	r2, #0
 80050ba:	2300      	movs	r3, #0
 80050bc:	4640      	mov	r0, r8
 80050be:	4649      	mov	r1, r9
 80050c0:	f7fb fd14 	bl	8000aec <__aeabi_dcmplt>
 80050c4:	b110      	cbz	r0, 80050cc <_printf_float+0x8c>
 80050c6:	232d      	movs	r3, #45	; 0x2d
 80050c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050cc:	4a93      	ldr	r2, [pc, #588]	; (800531c <_printf_float+0x2dc>)
 80050ce:	4b94      	ldr	r3, [pc, #592]	; (8005320 <_printf_float+0x2e0>)
 80050d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80050d4:	bf94      	ite	ls
 80050d6:	4690      	movls	r8, r2
 80050d8:	4698      	movhi	r8, r3
 80050da:	2303      	movs	r3, #3
 80050dc:	6123      	str	r3, [r4, #16]
 80050de:	9b05      	ldr	r3, [sp, #20]
 80050e0:	f023 0304 	bic.w	r3, r3, #4
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	f04f 0900 	mov.w	r9, #0
 80050ea:	9700      	str	r7, [sp, #0]
 80050ec:	4633      	mov	r3, r6
 80050ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80050f0:	4621      	mov	r1, r4
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 f9da 	bl	80054ac <_printf_common>
 80050f8:	3001      	adds	r0, #1
 80050fa:	f040 8090 	bne.w	800521e <_printf_float+0x1de>
 80050fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005102:	b00d      	add	sp, #52	; 0x34
 8005104:	ecbd 8b02 	vpop	{d8}
 8005108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	4640      	mov	r0, r8
 8005112:	4649      	mov	r1, r9
 8005114:	f7fb fd12 	bl	8000b3c <__aeabi_dcmpun>
 8005118:	b140      	cbz	r0, 800512c <_printf_float+0xec>
 800511a:	464b      	mov	r3, r9
 800511c:	2b00      	cmp	r3, #0
 800511e:	bfbc      	itt	lt
 8005120:	232d      	movlt	r3, #45	; 0x2d
 8005122:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005126:	4a7f      	ldr	r2, [pc, #508]	; (8005324 <_printf_float+0x2e4>)
 8005128:	4b7f      	ldr	r3, [pc, #508]	; (8005328 <_printf_float+0x2e8>)
 800512a:	e7d1      	b.n	80050d0 <_printf_float+0x90>
 800512c:	6863      	ldr	r3, [r4, #4]
 800512e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005132:	9206      	str	r2, [sp, #24]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	d13f      	bne.n	80051b8 <_printf_float+0x178>
 8005138:	2306      	movs	r3, #6
 800513a:	6063      	str	r3, [r4, #4]
 800513c:	9b05      	ldr	r3, [sp, #20]
 800513e:	6861      	ldr	r1, [r4, #4]
 8005140:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005144:	2300      	movs	r3, #0
 8005146:	9303      	str	r3, [sp, #12]
 8005148:	ab0a      	add	r3, sp, #40	; 0x28
 800514a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800514e:	ab09      	add	r3, sp, #36	; 0x24
 8005150:	ec49 8b10 	vmov	d0, r8, r9
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	6022      	str	r2, [r4, #0]
 8005158:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800515c:	4628      	mov	r0, r5
 800515e:	f7ff fecf 	bl	8004f00 <__cvt>
 8005162:	9b06      	ldr	r3, [sp, #24]
 8005164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005166:	2b47      	cmp	r3, #71	; 0x47
 8005168:	4680      	mov	r8, r0
 800516a:	d108      	bne.n	800517e <_printf_float+0x13e>
 800516c:	1cc8      	adds	r0, r1, #3
 800516e:	db02      	blt.n	8005176 <_printf_float+0x136>
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	4299      	cmp	r1, r3
 8005174:	dd41      	ble.n	80051fa <_printf_float+0x1ba>
 8005176:	f1ab 0302 	sub.w	r3, fp, #2
 800517a:	fa5f fb83 	uxtb.w	fp, r3
 800517e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005182:	d820      	bhi.n	80051c6 <_printf_float+0x186>
 8005184:	3901      	subs	r1, #1
 8005186:	465a      	mov	r2, fp
 8005188:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800518c:	9109      	str	r1, [sp, #36]	; 0x24
 800518e:	f7ff ff19 	bl	8004fc4 <__exponent>
 8005192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005194:	1813      	adds	r3, r2, r0
 8005196:	2a01      	cmp	r2, #1
 8005198:	4681      	mov	r9, r0
 800519a:	6123      	str	r3, [r4, #16]
 800519c:	dc02      	bgt.n	80051a4 <_printf_float+0x164>
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	07d2      	lsls	r2, r2, #31
 80051a2:	d501      	bpl.n	80051a8 <_printf_float+0x168>
 80051a4:	3301      	adds	r3, #1
 80051a6:	6123      	str	r3, [r4, #16]
 80051a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d09c      	beq.n	80050ea <_printf_float+0xaa>
 80051b0:	232d      	movs	r3, #45	; 0x2d
 80051b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b6:	e798      	b.n	80050ea <_printf_float+0xaa>
 80051b8:	9a06      	ldr	r2, [sp, #24]
 80051ba:	2a47      	cmp	r2, #71	; 0x47
 80051bc:	d1be      	bne.n	800513c <_printf_float+0xfc>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1bc      	bne.n	800513c <_printf_float+0xfc>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e7b9      	b.n	800513a <_printf_float+0xfa>
 80051c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80051ca:	d118      	bne.n	80051fe <_printf_float+0x1be>
 80051cc:	2900      	cmp	r1, #0
 80051ce:	6863      	ldr	r3, [r4, #4]
 80051d0:	dd0b      	ble.n	80051ea <_printf_float+0x1aa>
 80051d2:	6121      	str	r1, [r4, #16]
 80051d4:	b913      	cbnz	r3, 80051dc <_printf_float+0x19c>
 80051d6:	6822      	ldr	r2, [r4, #0]
 80051d8:	07d0      	lsls	r0, r2, #31
 80051da:	d502      	bpl.n	80051e2 <_printf_float+0x1a2>
 80051dc:	3301      	adds	r3, #1
 80051de:	440b      	add	r3, r1
 80051e0:	6123      	str	r3, [r4, #16]
 80051e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80051e4:	f04f 0900 	mov.w	r9, #0
 80051e8:	e7de      	b.n	80051a8 <_printf_float+0x168>
 80051ea:	b913      	cbnz	r3, 80051f2 <_printf_float+0x1b2>
 80051ec:	6822      	ldr	r2, [r4, #0]
 80051ee:	07d2      	lsls	r2, r2, #31
 80051f0:	d501      	bpl.n	80051f6 <_printf_float+0x1b6>
 80051f2:	3302      	adds	r3, #2
 80051f4:	e7f4      	b.n	80051e0 <_printf_float+0x1a0>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e7f2      	b.n	80051e0 <_printf_float+0x1a0>
 80051fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80051fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005200:	4299      	cmp	r1, r3
 8005202:	db05      	blt.n	8005210 <_printf_float+0x1d0>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	6121      	str	r1, [r4, #16]
 8005208:	07d8      	lsls	r0, r3, #31
 800520a:	d5ea      	bpl.n	80051e2 <_printf_float+0x1a2>
 800520c:	1c4b      	adds	r3, r1, #1
 800520e:	e7e7      	b.n	80051e0 <_printf_float+0x1a0>
 8005210:	2900      	cmp	r1, #0
 8005212:	bfd4      	ite	le
 8005214:	f1c1 0202 	rsble	r2, r1, #2
 8005218:	2201      	movgt	r2, #1
 800521a:	4413      	add	r3, r2
 800521c:	e7e0      	b.n	80051e0 <_printf_float+0x1a0>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	055a      	lsls	r2, r3, #21
 8005222:	d407      	bmi.n	8005234 <_printf_float+0x1f4>
 8005224:	6923      	ldr	r3, [r4, #16]
 8005226:	4642      	mov	r2, r8
 8005228:	4631      	mov	r1, r6
 800522a:	4628      	mov	r0, r5
 800522c:	47b8      	blx	r7
 800522e:	3001      	adds	r0, #1
 8005230:	d12c      	bne.n	800528c <_printf_float+0x24c>
 8005232:	e764      	b.n	80050fe <_printf_float+0xbe>
 8005234:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005238:	f240 80e0 	bls.w	80053fc <_printf_float+0x3bc>
 800523c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005240:	2200      	movs	r2, #0
 8005242:	2300      	movs	r3, #0
 8005244:	f7fb fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 8005248:	2800      	cmp	r0, #0
 800524a:	d034      	beq.n	80052b6 <_printf_float+0x276>
 800524c:	4a37      	ldr	r2, [pc, #220]	; (800532c <_printf_float+0x2ec>)
 800524e:	2301      	movs	r3, #1
 8005250:	4631      	mov	r1, r6
 8005252:	4628      	mov	r0, r5
 8005254:	47b8      	blx	r7
 8005256:	3001      	adds	r0, #1
 8005258:	f43f af51 	beq.w	80050fe <_printf_float+0xbe>
 800525c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005260:	429a      	cmp	r2, r3
 8005262:	db02      	blt.n	800526a <_printf_float+0x22a>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	07d8      	lsls	r0, r3, #31
 8005268:	d510      	bpl.n	800528c <_printf_float+0x24c>
 800526a:	ee18 3a10 	vmov	r3, s16
 800526e:	4652      	mov	r2, sl
 8005270:	4631      	mov	r1, r6
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	f43f af41 	beq.w	80050fe <_printf_float+0xbe>
 800527c:	f04f 0800 	mov.w	r8, #0
 8005280:	f104 091a 	add.w	r9, r4, #26
 8005284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	4543      	cmp	r3, r8
 800528a:	dc09      	bgt.n	80052a0 <_printf_float+0x260>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	079b      	lsls	r3, r3, #30
 8005290:	f100 8107 	bmi.w	80054a2 <_printf_float+0x462>
 8005294:	68e0      	ldr	r0, [r4, #12]
 8005296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005298:	4298      	cmp	r0, r3
 800529a:	bfb8      	it	lt
 800529c:	4618      	movlt	r0, r3
 800529e:	e730      	b.n	8005102 <_printf_float+0xc2>
 80052a0:	2301      	movs	r3, #1
 80052a2:	464a      	mov	r2, r9
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	f43f af27 	beq.w	80050fe <_printf_float+0xbe>
 80052b0:	f108 0801 	add.w	r8, r8, #1
 80052b4:	e7e6      	b.n	8005284 <_printf_float+0x244>
 80052b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	dc39      	bgt.n	8005330 <_printf_float+0x2f0>
 80052bc:	4a1b      	ldr	r2, [pc, #108]	; (800532c <_printf_float+0x2ec>)
 80052be:	2301      	movs	r3, #1
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	f43f af19 	beq.w	80050fe <_printf_float+0xbe>
 80052cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80052d0:	4313      	orrs	r3, r2
 80052d2:	d102      	bne.n	80052da <_printf_float+0x29a>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	07d9      	lsls	r1, r3, #31
 80052d8:	d5d8      	bpl.n	800528c <_printf_float+0x24c>
 80052da:	ee18 3a10 	vmov	r3, s16
 80052de:	4652      	mov	r2, sl
 80052e0:	4631      	mov	r1, r6
 80052e2:	4628      	mov	r0, r5
 80052e4:	47b8      	blx	r7
 80052e6:	3001      	adds	r0, #1
 80052e8:	f43f af09 	beq.w	80050fe <_printf_float+0xbe>
 80052ec:	f04f 0900 	mov.w	r9, #0
 80052f0:	f104 0a1a 	add.w	sl, r4, #26
 80052f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f6:	425b      	negs	r3, r3
 80052f8:	454b      	cmp	r3, r9
 80052fa:	dc01      	bgt.n	8005300 <_printf_float+0x2c0>
 80052fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052fe:	e792      	b.n	8005226 <_printf_float+0x1e6>
 8005300:	2301      	movs	r3, #1
 8005302:	4652      	mov	r2, sl
 8005304:	4631      	mov	r1, r6
 8005306:	4628      	mov	r0, r5
 8005308:	47b8      	blx	r7
 800530a:	3001      	adds	r0, #1
 800530c:	f43f aef7 	beq.w	80050fe <_printf_float+0xbe>
 8005310:	f109 0901 	add.w	r9, r9, #1
 8005314:	e7ee      	b.n	80052f4 <_printf_float+0x2b4>
 8005316:	bf00      	nop
 8005318:	7fefffff 	.word	0x7fefffff
 800531c:	08007b8b 	.word	0x08007b8b
 8005320:	08007b8f 	.word	0x08007b8f
 8005324:	08007b93 	.word	0x08007b93
 8005328:	08007b97 	.word	0x08007b97
 800532c:	08007b9b 	.word	0x08007b9b
 8005330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005334:	429a      	cmp	r2, r3
 8005336:	bfa8      	it	ge
 8005338:	461a      	movge	r2, r3
 800533a:	2a00      	cmp	r2, #0
 800533c:	4691      	mov	r9, r2
 800533e:	dc37      	bgt.n	80053b0 <_printf_float+0x370>
 8005340:	f04f 0b00 	mov.w	fp, #0
 8005344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005348:	f104 021a 	add.w	r2, r4, #26
 800534c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800534e:	9305      	str	r3, [sp, #20]
 8005350:	eba3 0309 	sub.w	r3, r3, r9
 8005354:	455b      	cmp	r3, fp
 8005356:	dc33      	bgt.n	80053c0 <_printf_float+0x380>
 8005358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800535c:	429a      	cmp	r2, r3
 800535e:	db3b      	blt.n	80053d8 <_printf_float+0x398>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	07da      	lsls	r2, r3, #31
 8005364:	d438      	bmi.n	80053d8 <_printf_float+0x398>
 8005366:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800536a:	eba2 0903 	sub.w	r9, r2, r3
 800536e:	9b05      	ldr	r3, [sp, #20]
 8005370:	1ad2      	subs	r2, r2, r3
 8005372:	4591      	cmp	r9, r2
 8005374:	bfa8      	it	ge
 8005376:	4691      	movge	r9, r2
 8005378:	f1b9 0f00 	cmp.w	r9, #0
 800537c:	dc35      	bgt.n	80053ea <_printf_float+0x3aa>
 800537e:	f04f 0800 	mov.w	r8, #0
 8005382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005386:	f104 0a1a 	add.w	sl, r4, #26
 800538a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	eba3 0309 	sub.w	r3, r3, r9
 8005394:	4543      	cmp	r3, r8
 8005396:	f77f af79 	ble.w	800528c <_printf_float+0x24c>
 800539a:	2301      	movs	r3, #1
 800539c:	4652      	mov	r2, sl
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b8      	blx	r7
 80053a4:	3001      	adds	r0, #1
 80053a6:	f43f aeaa 	beq.w	80050fe <_printf_float+0xbe>
 80053aa:	f108 0801 	add.w	r8, r8, #1
 80053ae:	e7ec      	b.n	800538a <_printf_float+0x34a>
 80053b0:	4613      	mov	r3, r2
 80053b2:	4631      	mov	r1, r6
 80053b4:	4642      	mov	r2, r8
 80053b6:	4628      	mov	r0, r5
 80053b8:	47b8      	blx	r7
 80053ba:	3001      	adds	r0, #1
 80053bc:	d1c0      	bne.n	8005340 <_printf_float+0x300>
 80053be:	e69e      	b.n	80050fe <_printf_float+0xbe>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	9205      	str	r2, [sp, #20]
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	f43f ae97 	beq.w	80050fe <_printf_float+0xbe>
 80053d0:	9a05      	ldr	r2, [sp, #20]
 80053d2:	f10b 0b01 	add.w	fp, fp, #1
 80053d6:	e7b9      	b.n	800534c <_printf_float+0x30c>
 80053d8:	ee18 3a10 	vmov	r3, s16
 80053dc:	4652      	mov	r2, sl
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	d1be      	bne.n	8005366 <_printf_float+0x326>
 80053e8:	e689      	b.n	80050fe <_printf_float+0xbe>
 80053ea:	9a05      	ldr	r2, [sp, #20]
 80053ec:	464b      	mov	r3, r9
 80053ee:	4442      	add	r2, r8
 80053f0:	4631      	mov	r1, r6
 80053f2:	4628      	mov	r0, r5
 80053f4:	47b8      	blx	r7
 80053f6:	3001      	adds	r0, #1
 80053f8:	d1c1      	bne.n	800537e <_printf_float+0x33e>
 80053fa:	e680      	b.n	80050fe <_printf_float+0xbe>
 80053fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053fe:	2a01      	cmp	r2, #1
 8005400:	dc01      	bgt.n	8005406 <_printf_float+0x3c6>
 8005402:	07db      	lsls	r3, r3, #31
 8005404:	d53a      	bpl.n	800547c <_printf_float+0x43c>
 8005406:	2301      	movs	r3, #1
 8005408:	4642      	mov	r2, r8
 800540a:	4631      	mov	r1, r6
 800540c:	4628      	mov	r0, r5
 800540e:	47b8      	blx	r7
 8005410:	3001      	adds	r0, #1
 8005412:	f43f ae74 	beq.w	80050fe <_printf_float+0xbe>
 8005416:	ee18 3a10 	vmov	r3, s16
 800541a:	4652      	mov	r2, sl
 800541c:	4631      	mov	r1, r6
 800541e:	4628      	mov	r0, r5
 8005420:	47b8      	blx	r7
 8005422:	3001      	adds	r0, #1
 8005424:	f43f ae6b 	beq.w	80050fe <_printf_float+0xbe>
 8005428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800542c:	2200      	movs	r2, #0
 800542e:	2300      	movs	r3, #0
 8005430:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005434:	f7fb fb50 	bl	8000ad8 <__aeabi_dcmpeq>
 8005438:	b9d8      	cbnz	r0, 8005472 <_printf_float+0x432>
 800543a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800543e:	f108 0201 	add.w	r2, r8, #1
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	47b8      	blx	r7
 8005448:	3001      	adds	r0, #1
 800544a:	d10e      	bne.n	800546a <_printf_float+0x42a>
 800544c:	e657      	b.n	80050fe <_printf_float+0xbe>
 800544e:	2301      	movs	r3, #1
 8005450:	4652      	mov	r2, sl
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	f43f ae50 	beq.w	80050fe <_printf_float+0xbe>
 800545e:	f108 0801 	add.w	r8, r8, #1
 8005462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005464:	3b01      	subs	r3, #1
 8005466:	4543      	cmp	r3, r8
 8005468:	dcf1      	bgt.n	800544e <_printf_float+0x40e>
 800546a:	464b      	mov	r3, r9
 800546c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005470:	e6da      	b.n	8005228 <_printf_float+0x1e8>
 8005472:	f04f 0800 	mov.w	r8, #0
 8005476:	f104 0a1a 	add.w	sl, r4, #26
 800547a:	e7f2      	b.n	8005462 <_printf_float+0x422>
 800547c:	2301      	movs	r3, #1
 800547e:	4642      	mov	r2, r8
 8005480:	e7df      	b.n	8005442 <_printf_float+0x402>
 8005482:	2301      	movs	r3, #1
 8005484:	464a      	mov	r2, r9
 8005486:	4631      	mov	r1, r6
 8005488:	4628      	mov	r0, r5
 800548a:	47b8      	blx	r7
 800548c:	3001      	adds	r0, #1
 800548e:	f43f ae36 	beq.w	80050fe <_printf_float+0xbe>
 8005492:	f108 0801 	add.w	r8, r8, #1
 8005496:	68e3      	ldr	r3, [r4, #12]
 8005498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800549a:	1a5b      	subs	r3, r3, r1
 800549c:	4543      	cmp	r3, r8
 800549e:	dcf0      	bgt.n	8005482 <_printf_float+0x442>
 80054a0:	e6f8      	b.n	8005294 <_printf_float+0x254>
 80054a2:	f04f 0800 	mov.w	r8, #0
 80054a6:	f104 0919 	add.w	r9, r4, #25
 80054aa:	e7f4      	b.n	8005496 <_printf_float+0x456>

080054ac <_printf_common>:
 80054ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b0:	4616      	mov	r6, r2
 80054b2:	4699      	mov	r9, r3
 80054b4:	688a      	ldr	r2, [r1, #8]
 80054b6:	690b      	ldr	r3, [r1, #16]
 80054b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054bc:	4293      	cmp	r3, r2
 80054be:	bfb8      	it	lt
 80054c0:	4613      	movlt	r3, r2
 80054c2:	6033      	str	r3, [r6, #0]
 80054c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054c8:	4607      	mov	r7, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	b10a      	cbz	r2, 80054d2 <_printf_common+0x26>
 80054ce:	3301      	adds	r3, #1
 80054d0:	6033      	str	r3, [r6, #0]
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	0699      	lsls	r1, r3, #26
 80054d6:	bf42      	ittt	mi
 80054d8:	6833      	ldrmi	r3, [r6, #0]
 80054da:	3302      	addmi	r3, #2
 80054dc:	6033      	strmi	r3, [r6, #0]
 80054de:	6825      	ldr	r5, [r4, #0]
 80054e0:	f015 0506 	ands.w	r5, r5, #6
 80054e4:	d106      	bne.n	80054f4 <_printf_common+0x48>
 80054e6:	f104 0a19 	add.w	sl, r4, #25
 80054ea:	68e3      	ldr	r3, [r4, #12]
 80054ec:	6832      	ldr	r2, [r6, #0]
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	42ab      	cmp	r3, r5
 80054f2:	dc26      	bgt.n	8005542 <_printf_common+0x96>
 80054f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054f8:	1e13      	subs	r3, r2, #0
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	bf18      	it	ne
 80054fe:	2301      	movne	r3, #1
 8005500:	0692      	lsls	r2, r2, #26
 8005502:	d42b      	bmi.n	800555c <_printf_common+0xb0>
 8005504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005508:	4649      	mov	r1, r9
 800550a:	4638      	mov	r0, r7
 800550c:	47c0      	blx	r8
 800550e:	3001      	adds	r0, #1
 8005510:	d01e      	beq.n	8005550 <_printf_common+0xa4>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	6922      	ldr	r2, [r4, #16]
 8005516:	f003 0306 	and.w	r3, r3, #6
 800551a:	2b04      	cmp	r3, #4
 800551c:	bf02      	ittt	eq
 800551e:	68e5      	ldreq	r5, [r4, #12]
 8005520:	6833      	ldreq	r3, [r6, #0]
 8005522:	1aed      	subeq	r5, r5, r3
 8005524:	68a3      	ldr	r3, [r4, #8]
 8005526:	bf0c      	ite	eq
 8005528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800552c:	2500      	movne	r5, #0
 800552e:	4293      	cmp	r3, r2
 8005530:	bfc4      	itt	gt
 8005532:	1a9b      	subgt	r3, r3, r2
 8005534:	18ed      	addgt	r5, r5, r3
 8005536:	2600      	movs	r6, #0
 8005538:	341a      	adds	r4, #26
 800553a:	42b5      	cmp	r5, r6
 800553c:	d11a      	bne.n	8005574 <_printf_common+0xc8>
 800553e:	2000      	movs	r0, #0
 8005540:	e008      	b.n	8005554 <_printf_common+0xa8>
 8005542:	2301      	movs	r3, #1
 8005544:	4652      	mov	r2, sl
 8005546:	4649      	mov	r1, r9
 8005548:	4638      	mov	r0, r7
 800554a:	47c0      	blx	r8
 800554c:	3001      	adds	r0, #1
 800554e:	d103      	bne.n	8005558 <_printf_common+0xac>
 8005550:	f04f 30ff 	mov.w	r0, #4294967295
 8005554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005558:	3501      	adds	r5, #1
 800555a:	e7c6      	b.n	80054ea <_printf_common+0x3e>
 800555c:	18e1      	adds	r1, r4, r3
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	2030      	movs	r0, #48	; 0x30
 8005562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005566:	4422      	add	r2, r4
 8005568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800556c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005570:	3302      	adds	r3, #2
 8005572:	e7c7      	b.n	8005504 <_printf_common+0x58>
 8005574:	2301      	movs	r3, #1
 8005576:	4622      	mov	r2, r4
 8005578:	4649      	mov	r1, r9
 800557a:	4638      	mov	r0, r7
 800557c:	47c0      	blx	r8
 800557e:	3001      	adds	r0, #1
 8005580:	d0e6      	beq.n	8005550 <_printf_common+0xa4>
 8005582:	3601      	adds	r6, #1
 8005584:	e7d9      	b.n	800553a <_printf_common+0x8e>
	...

08005588 <_printf_i>:
 8005588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800558c:	7e0f      	ldrb	r7, [r1, #24]
 800558e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005590:	2f78      	cmp	r7, #120	; 0x78
 8005592:	4691      	mov	r9, r2
 8005594:	4680      	mov	r8, r0
 8005596:	460c      	mov	r4, r1
 8005598:	469a      	mov	sl, r3
 800559a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800559e:	d807      	bhi.n	80055b0 <_printf_i+0x28>
 80055a0:	2f62      	cmp	r7, #98	; 0x62
 80055a2:	d80a      	bhi.n	80055ba <_printf_i+0x32>
 80055a4:	2f00      	cmp	r7, #0
 80055a6:	f000 80d4 	beq.w	8005752 <_printf_i+0x1ca>
 80055aa:	2f58      	cmp	r7, #88	; 0x58
 80055ac:	f000 80c0 	beq.w	8005730 <_printf_i+0x1a8>
 80055b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055b8:	e03a      	b.n	8005630 <_printf_i+0xa8>
 80055ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055be:	2b15      	cmp	r3, #21
 80055c0:	d8f6      	bhi.n	80055b0 <_printf_i+0x28>
 80055c2:	a101      	add	r1, pc, #4	; (adr r1, 80055c8 <_printf_i+0x40>)
 80055c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055c8:	08005621 	.word	0x08005621
 80055cc:	08005635 	.word	0x08005635
 80055d0:	080055b1 	.word	0x080055b1
 80055d4:	080055b1 	.word	0x080055b1
 80055d8:	080055b1 	.word	0x080055b1
 80055dc:	080055b1 	.word	0x080055b1
 80055e0:	08005635 	.word	0x08005635
 80055e4:	080055b1 	.word	0x080055b1
 80055e8:	080055b1 	.word	0x080055b1
 80055ec:	080055b1 	.word	0x080055b1
 80055f0:	080055b1 	.word	0x080055b1
 80055f4:	08005739 	.word	0x08005739
 80055f8:	08005661 	.word	0x08005661
 80055fc:	080056f3 	.word	0x080056f3
 8005600:	080055b1 	.word	0x080055b1
 8005604:	080055b1 	.word	0x080055b1
 8005608:	0800575b 	.word	0x0800575b
 800560c:	080055b1 	.word	0x080055b1
 8005610:	08005661 	.word	0x08005661
 8005614:	080055b1 	.word	0x080055b1
 8005618:	080055b1 	.word	0x080055b1
 800561c:	080056fb 	.word	0x080056fb
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	1d1a      	adds	r2, r3, #4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	602a      	str	r2, [r5, #0]
 8005628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800562c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005630:	2301      	movs	r3, #1
 8005632:	e09f      	b.n	8005774 <_printf_i+0x1ec>
 8005634:	6820      	ldr	r0, [r4, #0]
 8005636:	682b      	ldr	r3, [r5, #0]
 8005638:	0607      	lsls	r7, r0, #24
 800563a:	f103 0104 	add.w	r1, r3, #4
 800563e:	6029      	str	r1, [r5, #0]
 8005640:	d501      	bpl.n	8005646 <_printf_i+0xbe>
 8005642:	681e      	ldr	r6, [r3, #0]
 8005644:	e003      	b.n	800564e <_printf_i+0xc6>
 8005646:	0646      	lsls	r6, r0, #25
 8005648:	d5fb      	bpl.n	8005642 <_printf_i+0xba>
 800564a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800564e:	2e00      	cmp	r6, #0
 8005650:	da03      	bge.n	800565a <_printf_i+0xd2>
 8005652:	232d      	movs	r3, #45	; 0x2d
 8005654:	4276      	negs	r6, r6
 8005656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800565a:	485a      	ldr	r0, [pc, #360]	; (80057c4 <_printf_i+0x23c>)
 800565c:	230a      	movs	r3, #10
 800565e:	e012      	b.n	8005686 <_printf_i+0xfe>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	6820      	ldr	r0, [r4, #0]
 8005664:	1d19      	adds	r1, r3, #4
 8005666:	6029      	str	r1, [r5, #0]
 8005668:	0605      	lsls	r5, r0, #24
 800566a:	d501      	bpl.n	8005670 <_printf_i+0xe8>
 800566c:	681e      	ldr	r6, [r3, #0]
 800566e:	e002      	b.n	8005676 <_printf_i+0xee>
 8005670:	0641      	lsls	r1, r0, #25
 8005672:	d5fb      	bpl.n	800566c <_printf_i+0xe4>
 8005674:	881e      	ldrh	r6, [r3, #0]
 8005676:	4853      	ldr	r0, [pc, #332]	; (80057c4 <_printf_i+0x23c>)
 8005678:	2f6f      	cmp	r7, #111	; 0x6f
 800567a:	bf0c      	ite	eq
 800567c:	2308      	moveq	r3, #8
 800567e:	230a      	movne	r3, #10
 8005680:	2100      	movs	r1, #0
 8005682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005686:	6865      	ldr	r5, [r4, #4]
 8005688:	60a5      	str	r5, [r4, #8]
 800568a:	2d00      	cmp	r5, #0
 800568c:	bfa2      	ittt	ge
 800568e:	6821      	ldrge	r1, [r4, #0]
 8005690:	f021 0104 	bicge.w	r1, r1, #4
 8005694:	6021      	strge	r1, [r4, #0]
 8005696:	b90e      	cbnz	r6, 800569c <_printf_i+0x114>
 8005698:	2d00      	cmp	r5, #0
 800569a:	d04b      	beq.n	8005734 <_printf_i+0x1ac>
 800569c:	4615      	mov	r5, r2
 800569e:	fbb6 f1f3 	udiv	r1, r6, r3
 80056a2:	fb03 6711 	mls	r7, r3, r1, r6
 80056a6:	5dc7      	ldrb	r7, [r0, r7]
 80056a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056ac:	4637      	mov	r7, r6
 80056ae:	42bb      	cmp	r3, r7
 80056b0:	460e      	mov	r6, r1
 80056b2:	d9f4      	bls.n	800569e <_printf_i+0x116>
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d10b      	bne.n	80056d0 <_printf_i+0x148>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	07de      	lsls	r6, r3, #31
 80056bc:	d508      	bpl.n	80056d0 <_printf_i+0x148>
 80056be:	6923      	ldr	r3, [r4, #16]
 80056c0:	6861      	ldr	r1, [r4, #4]
 80056c2:	4299      	cmp	r1, r3
 80056c4:	bfde      	ittt	le
 80056c6:	2330      	movle	r3, #48	; 0x30
 80056c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056d0:	1b52      	subs	r2, r2, r5
 80056d2:	6122      	str	r2, [r4, #16]
 80056d4:	f8cd a000 	str.w	sl, [sp]
 80056d8:	464b      	mov	r3, r9
 80056da:	aa03      	add	r2, sp, #12
 80056dc:	4621      	mov	r1, r4
 80056de:	4640      	mov	r0, r8
 80056e0:	f7ff fee4 	bl	80054ac <_printf_common>
 80056e4:	3001      	adds	r0, #1
 80056e6:	d14a      	bne.n	800577e <_printf_i+0x1f6>
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ec:	b004      	add	sp, #16
 80056ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	f043 0320 	orr.w	r3, r3, #32
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	4833      	ldr	r0, [pc, #204]	; (80057c8 <_printf_i+0x240>)
 80056fc:	2778      	movs	r7, #120	; 0x78
 80056fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	6829      	ldr	r1, [r5, #0]
 8005706:	061f      	lsls	r7, r3, #24
 8005708:	f851 6b04 	ldr.w	r6, [r1], #4
 800570c:	d402      	bmi.n	8005714 <_printf_i+0x18c>
 800570e:	065f      	lsls	r7, r3, #25
 8005710:	bf48      	it	mi
 8005712:	b2b6      	uxthmi	r6, r6
 8005714:	07df      	lsls	r7, r3, #31
 8005716:	bf48      	it	mi
 8005718:	f043 0320 	orrmi.w	r3, r3, #32
 800571c:	6029      	str	r1, [r5, #0]
 800571e:	bf48      	it	mi
 8005720:	6023      	strmi	r3, [r4, #0]
 8005722:	b91e      	cbnz	r6, 800572c <_printf_i+0x1a4>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	f023 0320 	bic.w	r3, r3, #32
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	2310      	movs	r3, #16
 800572e:	e7a7      	b.n	8005680 <_printf_i+0xf8>
 8005730:	4824      	ldr	r0, [pc, #144]	; (80057c4 <_printf_i+0x23c>)
 8005732:	e7e4      	b.n	80056fe <_printf_i+0x176>
 8005734:	4615      	mov	r5, r2
 8005736:	e7bd      	b.n	80056b4 <_printf_i+0x12c>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	6826      	ldr	r6, [r4, #0]
 800573c:	6961      	ldr	r1, [r4, #20]
 800573e:	1d18      	adds	r0, r3, #4
 8005740:	6028      	str	r0, [r5, #0]
 8005742:	0635      	lsls	r5, r6, #24
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	d501      	bpl.n	800574c <_printf_i+0x1c4>
 8005748:	6019      	str	r1, [r3, #0]
 800574a:	e002      	b.n	8005752 <_printf_i+0x1ca>
 800574c:	0670      	lsls	r0, r6, #25
 800574e:	d5fb      	bpl.n	8005748 <_printf_i+0x1c0>
 8005750:	8019      	strh	r1, [r3, #0]
 8005752:	2300      	movs	r3, #0
 8005754:	6123      	str	r3, [r4, #16]
 8005756:	4615      	mov	r5, r2
 8005758:	e7bc      	b.n	80056d4 <_printf_i+0x14c>
 800575a:	682b      	ldr	r3, [r5, #0]
 800575c:	1d1a      	adds	r2, r3, #4
 800575e:	602a      	str	r2, [r5, #0]
 8005760:	681d      	ldr	r5, [r3, #0]
 8005762:	6862      	ldr	r2, [r4, #4]
 8005764:	2100      	movs	r1, #0
 8005766:	4628      	mov	r0, r5
 8005768:	f7fa fd3a 	bl	80001e0 <memchr>
 800576c:	b108      	cbz	r0, 8005772 <_printf_i+0x1ea>
 800576e:	1b40      	subs	r0, r0, r5
 8005770:	6060      	str	r0, [r4, #4]
 8005772:	6863      	ldr	r3, [r4, #4]
 8005774:	6123      	str	r3, [r4, #16]
 8005776:	2300      	movs	r3, #0
 8005778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800577c:	e7aa      	b.n	80056d4 <_printf_i+0x14c>
 800577e:	6923      	ldr	r3, [r4, #16]
 8005780:	462a      	mov	r2, r5
 8005782:	4649      	mov	r1, r9
 8005784:	4640      	mov	r0, r8
 8005786:	47d0      	blx	sl
 8005788:	3001      	adds	r0, #1
 800578a:	d0ad      	beq.n	80056e8 <_printf_i+0x160>
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	079b      	lsls	r3, r3, #30
 8005790:	d413      	bmi.n	80057ba <_printf_i+0x232>
 8005792:	68e0      	ldr	r0, [r4, #12]
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	4298      	cmp	r0, r3
 8005798:	bfb8      	it	lt
 800579a:	4618      	movlt	r0, r3
 800579c:	e7a6      	b.n	80056ec <_printf_i+0x164>
 800579e:	2301      	movs	r3, #1
 80057a0:	4632      	mov	r2, r6
 80057a2:	4649      	mov	r1, r9
 80057a4:	4640      	mov	r0, r8
 80057a6:	47d0      	blx	sl
 80057a8:	3001      	adds	r0, #1
 80057aa:	d09d      	beq.n	80056e8 <_printf_i+0x160>
 80057ac:	3501      	adds	r5, #1
 80057ae:	68e3      	ldr	r3, [r4, #12]
 80057b0:	9903      	ldr	r1, [sp, #12]
 80057b2:	1a5b      	subs	r3, r3, r1
 80057b4:	42ab      	cmp	r3, r5
 80057b6:	dcf2      	bgt.n	800579e <_printf_i+0x216>
 80057b8:	e7eb      	b.n	8005792 <_printf_i+0x20a>
 80057ba:	2500      	movs	r5, #0
 80057bc:	f104 0619 	add.w	r6, r4, #25
 80057c0:	e7f5      	b.n	80057ae <_printf_i+0x226>
 80057c2:	bf00      	nop
 80057c4:	08007b9d 	.word	0x08007b9d
 80057c8:	08007bae 	.word	0x08007bae

080057cc <std>:
 80057cc:	2300      	movs	r3, #0
 80057ce:	b510      	push	{r4, lr}
 80057d0:	4604      	mov	r4, r0
 80057d2:	e9c0 3300 	strd	r3, r3, [r0]
 80057d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057da:	6083      	str	r3, [r0, #8]
 80057dc:	8181      	strh	r1, [r0, #12]
 80057de:	6643      	str	r3, [r0, #100]	; 0x64
 80057e0:	81c2      	strh	r2, [r0, #14]
 80057e2:	6183      	str	r3, [r0, #24]
 80057e4:	4619      	mov	r1, r3
 80057e6:	2208      	movs	r2, #8
 80057e8:	305c      	adds	r0, #92	; 0x5c
 80057ea:	f000 f9e5 	bl	8005bb8 <memset>
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <std+0x38>)
 80057f0:	6263      	str	r3, [r4, #36]	; 0x24
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <std+0x3c>)
 80057f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <std+0x40>)
 80057f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057fa:	4b05      	ldr	r3, [pc, #20]	; (8005810 <std+0x44>)
 80057fc:	6224      	str	r4, [r4, #32]
 80057fe:	6323      	str	r3, [r4, #48]	; 0x30
 8005800:	bd10      	pop	{r4, pc}
 8005802:	bf00      	nop
 8005804:	08005a09 	.word	0x08005a09
 8005808:	08005a2b 	.word	0x08005a2b
 800580c:	08005a63 	.word	0x08005a63
 8005810:	08005a87 	.word	0x08005a87

08005814 <stdio_exit_handler>:
 8005814:	4a02      	ldr	r2, [pc, #8]	; (8005820 <stdio_exit_handler+0xc>)
 8005816:	4903      	ldr	r1, [pc, #12]	; (8005824 <stdio_exit_handler+0x10>)
 8005818:	4803      	ldr	r0, [pc, #12]	; (8005828 <stdio_exit_handler+0x14>)
 800581a:	f000 b869 	b.w	80058f0 <_fwalk_sglue>
 800581e:	bf00      	nop
 8005820:	20000004 	.word	0x20000004
 8005824:	08007639 	.word	0x08007639
 8005828:	20000010 	.word	0x20000010

0800582c <cleanup_stdio>:
 800582c:	6841      	ldr	r1, [r0, #4]
 800582e:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <cleanup_stdio+0x34>)
 8005830:	4299      	cmp	r1, r3
 8005832:	b510      	push	{r4, lr}
 8005834:	4604      	mov	r4, r0
 8005836:	d001      	beq.n	800583c <cleanup_stdio+0x10>
 8005838:	f001 fefe 	bl	8007638 <_fflush_r>
 800583c:	68a1      	ldr	r1, [r4, #8]
 800583e:	4b09      	ldr	r3, [pc, #36]	; (8005864 <cleanup_stdio+0x38>)
 8005840:	4299      	cmp	r1, r3
 8005842:	d002      	beq.n	800584a <cleanup_stdio+0x1e>
 8005844:	4620      	mov	r0, r4
 8005846:	f001 fef7 	bl	8007638 <_fflush_r>
 800584a:	68e1      	ldr	r1, [r4, #12]
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <cleanup_stdio+0x3c>)
 800584e:	4299      	cmp	r1, r3
 8005850:	d004      	beq.n	800585c <cleanup_stdio+0x30>
 8005852:	4620      	mov	r0, r4
 8005854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005858:	f001 beee 	b.w	8007638 <_fflush_r>
 800585c:	bd10      	pop	{r4, pc}
 800585e:	bf00      	nop
 8005860:	20000224 	.word	0x20000224
 8005864:	2000028c 	.word	0x2000028c
 8005868:	200002f4 	.word	0x200002f4

0800586c <global_stdio_init.part.0>:
 800586c:	b510      	push	{r4, lr}
 800586e:	4b0b      	ldr	r3, [pc, #44]	; (800589c <global_stdio_init.part.0+0x30>)
 8005870:	4c0b      	ldr	r4, [pc, #44]	; (80058a0 <global_stdio_init.part.0+0x34>)
 8005872:	4a0c      	ldr	r2, [pc, #48]	; (80058a4 <global_stdio_init.part.0+0x38>)
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	4620      	mov	r0, r4
 8005878:	2200      	movs	r2, #0
 800587a:	2104      	movs	r1, #4
 800587c:	f7ff ffa6 	bl	80057cc <std>
 8005880:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005884:	2201      	movs	r2, #1
 8005886:	2109      	movs	r1, #9
 8005888:	f7ff ffa0 	bl	80057cc <std>
 800588c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005890:	2202      	movs	r2, #2
 8005892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005896:	2112      	movs	r1, #18
 8005898:	f7ff bf98 	b.w	80057cc <std>
 800589c:	2000035c 	.word	0x2000035c
 80058a0:	20000224 	.word	0x20000224
 80058a4:	08005815 	.word	0x08005815

080058a8 <__sfp_lock_acquire>:
 80058a8:	4801      	ldr	r0, [pc, #4]	; (80058b0 <__sfp_lock_acquire+0x8>)
 80058aa:	f000 ba01 	b.w	8005cb0 <__retarget_lock_acquire_recursive>
 80058ae:	bf00      	nop
 80058b0:	20000365 	.word	0x20000365

080058b4 <__sfp_lock_release>:
 80058b4:	4801      	ldr	r0, [pc, #4]	; (80058bc <__sfp_lock_release+0x8>)
 80058b6:	f000 b9fc 	b.w	8005cb2 <__retarget_lock_release_recursive>
 80058ba:	bf00      	nop
 80058bc:	20000365 	.word	0x20000365

080058c0 <__sinit>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	4604      	mov	r4, r0
 80058c4:	f7ff fff0 	bl	80058a8 <__sfp_lock_acquire>
 80058c8:	6a23      	ldr	r3, [r4, #32]
 80058ca:	b11b      	cbz	r3, 80058d4 <__sinit+0x14>
 80058cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d0:	f7ff bff0 	b.w	80058b4 <__sfp_lock_release>
 80058d4:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <__sinit+0x28>)
 80058d6:	6223      	str	r3, [r4, #32]
 80058d8:	4b04      	ldr	r3, [pc, #16]	; (80058ec <__sinit+0x2c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f5      	bne.n	80058cc <__sinit+0xc>
 80058e0:	f7ff ffc4 	bl	800586c <global_stdio_init.part.0>
 80058e4:	e7f2      	b.n	80058cc <__sinit+0xc>
 80058e6:	bf00      	nop
 80058e8:	0800582d 	.word	0x0800582d
 80058ec:	2000035c 	.word	0x2000035c

080058f0 <_fwalk_sglue>:
 80058f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f4:	4607      	mov	r7, r0
 80058f6:	4688      	mov	r8, r1
 80058f8:	4614      	mov	r4, r2
 80058fa:	2600      	movs	r6, #0
 80058fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005900:	f1b9 0901 	subs.w	r9, r9, #1
 8005904:	d505      	bpl.n	8005912 <_fwalk_sglue+0x22>
 8005906:	6824      	ldr	r4, [r4, #0]
 8005908:	2c00      	cmp	r4, #0
 800590a:	d1f7      	bne.n	80058fc <_fwalk_sglue+0xc>
 800590c:	4630      	mov	r0, r6
 800590e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005912:	89ab      	ldrh	r3, [r5, #12]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d907      	bls.n	8005928 <_fwalk_sglue+0x38>
 8005918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800591c:	3301      	adds	r3, #1
 800591e:	d003      	beq.n	8005928 <_fwalk_sglue+0x38>
 8005920:	4629      	mov	r1, r5
 8005922:	4638      	mov	r0, r7
 8005924:	47c0      	blx	r8
 8005926:	4306      	orrs	r6, r0
 8005928:	3568      	adds	r5, #104	; 0x68
 800592a:	e7e9      	b.n	8005900 <_fwalk_sglue+0x10>

0800592c <iprintf>:
 800592c:	b40f      	push	{r0, r1, r2, r3}
 800592e:	b507      	push	{r0, r1, r2, lr}
 8005930:	4906      	ldr	r1, [pc, #24]	; (800594c <iprintf+0x20>)
 8005932:	ab04      	add	r3, sp, #16
 8005934:	6808      	ldr	r0, [r1, #0]
 8005936:	f853 2b04 	ldr.w	r2, [r3], #4
 800593a:	6881      	ldr	r1, [r0, #8]
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	f001 fcdb 	bl	80072f8 <_vfiprintf_r>
 8005942:	b003      	add	sp, #12
 8005944:	f85d eb04 	ldr.w	lr, [sp], #4
 8005948:	b004      	add	sp, #16
 800594a:	4770      	bx	lr
 800594c:	2000005c 	.word	0x2000005c

08005950 <_puts_r>:
 8005950:	6a03      	ldr	r3, [r0, #32]
 8005952:	b570      	push	{r4, r5, r6, lr}
 8005954:	6884      	ldr	r4, [r0, #8]
 8005956:	4605      	mov	r5, r0
 8005958:	460e      	mov	r6, r1
 800595a:	b90b      	cbnz	r3, 8005960 <_puts_r+0x10>
 800595c:	f7ff ffb0 	bl	80058c0 <__sinit>
 8005960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005962:	07db      	lsls	r3, r3, #31
 8005964:	d405      	bmi.n	8005972 <_puts_r+0x22>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	0598      	lsls	r0, r3, #22
 800596a:	d402      	bmi.n	8005972 <_puts_r+0x22>
 800596c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800596e:	f000 f99f 	bl	8005cb0 <__retarget_lock_acquire_recursive>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	0719      	lsls	r1, r3, #28
 8005976:	d513      	bpl.n	80059a0 <_puts_r+0x50>
 8005978:	6923      	ldr	r3, [r4, #16]
 800597a:	b18b      	cbz	r3, 80059a0 <_puts_r+0x50>
 800597c:	3e01      	subs	r6, #1
 800597e:	68a3      	ldr	r3, [r4, #8]
 8005980:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005984:	3b01      	subs	r3, #1
 8005986:	60a3      	str	r3, [r4, #8]
 8005988:	b9e9      	cbnz	r1, 80059c6 <_puts_r+0x76>
 800598a:	2b00      	cmp	r3, #0
 800598c:	da2e      	bge.n	80059ec <_puts_r+0x9c>
 800598e:	4622      	mov	r2, r4
 8005990:	210a      	movs	r1, #10
 8005992:	4628      	mov	r0, r5
 8005994:	f000 f87b 	bl	8005a8e <__swbuf_r>
 8005998:	3001      	adds	r0, #1
 800599a:	d007      	beq.n	80059ac <_puts_r+0x5c>
 800599c:	250a      	movs	r5, #10
 800599e:	e007      	b.n	80059b0 <_puts_r+0x60>
 80059a0:	4621      	mov	r1, r4
 80059a2:	4628      	mov	r0, r5
 80059a4:	f000 f8b0 	bl	8005b08 <__swsetup_r>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d0e7      	beq.n	800597c <_puts_r+0x2c>
 80059ac:	f04f 35ff 	mov.w	r5, #4294967295
 80059b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059b2:	07da      	lsls	r2, r3, #31
 80059b4:	d405      	bmi.n	80059c2 <_puts_r+0x72>
 80059b6:	89a3      	ldrh	r3, [r4, #12]
 80059b8:	059b      	lsls	r3, r3, #22
 80059ba:	d402      	bmi.n	80059c2 <_puts_r+0x72>
 80059bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059be:	f000 f978 	bl	8005cb2 <__retarget_lock_release_recursive>
 80059c2:	4628      	mov	r0, r5
 80059c4:	bd70      	pop	{r4, r5, r6, pc}
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	da04      	bge.n	80059d4 <_puts_r+0x84>
 80059ca:	69a2      	ldr	r2, [r4, #24]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	dc06      	bgt.n	80059de <_puts_r+0x8e>
 80059d0:	290a      	cmp	r1, #10
 80059d2:	d004      	beq.n	80059de <_puts_r+0x8e>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	6022      	str	r2, [r4, #0]
 80059da:	7019      	strb	r1, [r3, #0]
 80059dc:	e7cf      	b.n	800597e <_puts_r+0x2e>
 80059de:	4622      	mov	r2, r4
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 f854 	bl	8005a8e <__swbuf_r>
 80059e6:	3001      	adds	r0, #1
 80059e8:	d1c9      	bne.n	800597e <_puts_r+0x2e>
 80059ea:	e7df      	b.n	80059ac <_puts_r+0x5c>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	250a      	movs	r5, #10
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	6022      	str	r2, [r4, #0]
 80059f4:	701d      	strb	r5, [r3, #0]
 80059f6:	e7db      	b.n	80059b0 <_puts_r+0x60>

080059f8 <puts>:
 80059f8:	4b02      	ldr	r3, [pc, #8]	; (8005a04 <puts+0xc>)
 80059fa:	4601      	mov	r1, r0
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	f7ff bfa7 	b.w	8005950 <_puts_r>
 8005a02:	bf00      	nop
 8005a04:	2000005c 	.word	0x2000005c

08005a08 <__sread>:
 8005a08:	b510      	push	{r4, lr}
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a10:	f000 f900 	bl	8005c14 <_read_r>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	bfab      	itete	ge
 8005a18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a1c:	181b      	addge	r3, r3, r0
 8005a1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a22:	bfac      	ite	ge
 8005a24:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a26:	81a3      	strhlt	r3, [r4, #12]
 8005a28:	bd10      	pop	{r4, pc}

08005a2a <__swrite>:
 8005a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2e:	461f      	mov	r7, r3
 8005a30:	898b      	ldrh	r3, [r1, #12]
 8005a32:	05db      	lsls	r3, r3, #23
 8005a34:	4605      	mov	r5, r0
 8005a36:	460c      	mov	r4, r1
 8005a38:	4616      	mov	r6, r2
 8005a3a:	d505      	bpl.n	8005a48 <__swrite+0x1e>
 8005a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a40:	2302      	movs	r3, #2
 8005a42:	2200      	movs	r2, #0
 8005a44:	f000 f8d4 	bl	8005bf0 <_lseek_r>
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a52:	81a3      	strh	r3, [r4, #12]
 8005a54:	4632      	mov	r2, r6
 8005a56:	463b      	mov	r3, r7
 8005a58:	4628      	mov	r0, r5
 8005a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5e:	f000 b8eb 	b.w	8005c38 <_write_r>

08005a62 <__sseek>:
 8005a62:	b510      	push	{r4, lr}
 8005a64:	460c      	mov	r4, r1
 8005a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a6a:	f000 f8c1 	bl	8005bf0 <_lseek_r>
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	bf15      	itete	ne
 8005a74:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a7e:	81a3      	strheq	r3, [r4, #12]
 8005a80:	bf18      	it	ne
 8005a82:	81a3      	strhne	r3, [r4, #12]
 8005a84:	bd10      	pop	{r4, pc}

08005a86 <__sclose>:
 8005a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a8a:	f000 b8a1 	b.w	8005bd0 <_close_r>

08005a8e <__swbuf_r>:
 8005a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a90:	460e      	mov	r6, r1
 8005a92:	4614      	mov	r4, r2
 8005a94:	4605      	mov	r5, r0
 8005a96:	b118      	cbz	r0, 8005aa0 <__swbuf_r+0x12>
 8005a98:	6a03      	ldr	r3, [r0, #32]
 8005a9a:	b90b      	cbnz	r3, 8005aa0 <__swbuf_r+0x12>
 8005a9c:	f7ff ff10 	bl	80058c0 <__sinit>
 8005aa0:	69a3      	ldr	r3, [r4, #24]
 8005aa2:	60a3      	str	r3, [r4, #8]
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	071a      	lsls	r2, r3, #28
 8005aa8:	d525      	bpl.n	8005af6 <__swbuf_r+0x68>
 8005aaa:	6923      	ldr	r3, [r4, #16]
 8005aac:	b31b      	cbz	r3, 8005af6 <__swbuf_r+0x68>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	6922      	ldr	r2, [r4, #16]
 8005ab2:	1a98      	subs	r0, r3, r2
 8005ab4:	6963      	ldr	r3, [r4, #20]
 8005ab6:	b2f6      	uxtb	r6, r6
 8005ab8:	4283      	cmp	r3, r0
 8005aba:	4637      	mov	r7, r6
 8005abc:	dc04      	bgt.n	8005ac8 <__swbuf_r+0x3a>
 8005abe:	4621      	mov	r1, r4
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f001 fdb9 	bl	8007638 <_fflush_r>
 8005ac6:	b9e0      	cbnz	r0, 8005b02 <__swbuf_r+0x74>
 8005ac8:	68a3      	ldr	r3, [r4, #8]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	60a3      	str	r3, [r4, #8]
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	6022      	str	r2, [r4, #0]
 8005ad4:	701e      	strb	r6, [r3, #0]
 8005ad6:	6962      	ldr	r2, [r4, #20]
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d004      	beq.n	8005ae8 <__swbuf_r+0x5a>
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	07db      	lsls	r3, r3, #31
 8005ae2:	d506      	bpl.n	8005af2 <__swbuf_r+0x64>
 8005ae4:	2e0a      	cmp	r6, #10
 8005ae6:	d104      	bne.n	8005af2 <__swbuf_r+0x64>
 8005ae8:	4621      	mov	r1, r4
 8005aea:	4628      	mov	r0, r5
 8005aec:	f001 fda4 	bl	8007638 <_fflush_r>
 8005af0:	b938      	cbnz	r0, 8005b02 <__swbuf_r+0x74>
 8005af2:	4638      	mov	r0, r7
 8005af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af6:	4621      	mov	r1, r4
 8005af8:	4628      	mov	r0, r5
 8005afa:	f000 f805 	bl	8005b08 <__swsetup_r>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d0d5      	beq.n	8005aae <__swbuf_r+0x20>
 8005b02:	f04f 37ff 	mov.w	r7, #4294967295
 8005b06:	e7f4      	b.n	8005af2 <__swbuf_r+0x64>

08005b08 <__swsetup_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4b2a      	ldr	r3, [pc, #168]	; (8005bb4 <__swsetup_r+0xac>)
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	460c      	mov	r4, r1
 8005b12:	b118      	cbz	r0, 8005b1c <__swsetup_r+0x14>
 8005b14:	6a03      	ldr	r3, [r0, #32]
 8005b16:	b90b      	cbnz	r3, 8005b1c <__swsetup_r+0x14>
 8005b18:	f7ff fed2 	bl	80058c0 <__sinit>
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b22:	0718      	lsls	r0, r3, #28
 8005b24:	d422      	bmi.n	8005b6c <__swsetup_r+0x64>
 8005b26:	06d9      	lsls	r1, r3, #27
 8005b28:	d407      	bmi.n	8005b3a <__swsetup_r+0x32>
 8005b2a:	2309      	movs	r3, #9
 8005b2c:	602b      	str	r3, [r5, #0]
 8005b2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b32:	81a3      	strh	r3, [r4, #12]
 8005b34:	f04f 30ff 	mov.w	r0, #4294967295
 8005b38:	e034      	b.n	8005ba4 <__swsetup_r+0x9c>
 8005b3a:	0758      	lsls	r0, r3, #29
 8005b3c:	d512      	bpl.n	8005b64 <__swsetup_r+0x5c>
 8005b3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b40:	b141      	cbz	r1, 8005b54 <__swsetup_r+0x4c>
 8005b42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b46:	4299      	cmp	r1, r3
 8005b48:	d002      	beq.n	8005b50 <__swsetup_r+0x48>
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 ff2e 	bl	80069ac <_free_r>
 8005b50:	2300      	movs	r3, #0
 8005b52:	6363      	str	r3, [r4, #52]	; 0x34
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b5a:	81a3      	strh	r3, [r4, #12]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	6063      	str	r3, [r4, #4]
 8005b60:	6923      	ldr	r3, [r4, #16]
 8005b62:	6023      	str	r3, [r4, #0]
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	f043 0308 	orr.w	r3, r3, #8
 8005b6a:	81a3      	strh	r3, [r4, #12]
 8005b6c:	6923      	ldr	r3, [r4, #16]
 8005b6e:	b94b      	cbnz	r3, 8005b84 <__swsetup_r+0x7c>
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b7a:	d003      	beq.n	8005b84 <__swsetup_r+0x7c>
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f001 fda8 	bl	80076d4 <__smakebuf_r>
 8005b84:	89a0      	ldrh	r0, [r4, #12]
 8005b86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b8a:	f010 0301 	ands.w	r3, r0, #1
 8005b8e:	d00a      	beq.n	8005ba6 <__swsetup_r+0x9e>
 8005b90:	2300      	movs	r3, #0
 8005b92:	60a3      	str	r3, [r4, #8]
 8005b94:	6963      	ldr	r3, [r4, #20]
 8005b96:	425b      	negs	r3, r3
 8005b98:	61a3      	str	r3, [r4, #24]
 8005b9a:	6923      	ldr	r3, [r4, #16]
 8005b9c:	b943      	cbnz	r3, 8005bb0 <__swsetup_r+0xa8>
 8005b9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ba2:	d1c4      	bne.n	8005b2e <__swsetup_r+0x26>
 8005ba4:	bd38      	pop	{r3, r4, r5, pc}
 8005ba6:	0781      	lsls	r1, r0, #30
 8005ba8:	bf58      	it	pl
 8005baa:	6963      	ldrpl	r3, [r4, #20]
 8005bac:	60a3      	str	r3, [r4, #8]
 8005bae:	e7f4      	b.n	8005b9a <__swsetup_r+0x92>
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	e7f7      	b.n	8005ba4 <__swsetup_r+0x9c>
 8005bb4:	2000005c 	.word	0x2000005c

08005bb8 <memset>:
 8005bb8:	4402      	add	r2, r0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d100      	bne.n	8005bc2 <memset+0xa>
 8005bc0:	4770      	bx	lr
 8005bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc6:	e7f9      	b.n	8005bbc <memset+0x4>

08005bc8 <_localeconv_r>:
 8005bc8:	4800      	ldr	r0, [pc, #0]	; (8005bcc <_localeconv_r+0x4>)
 8005bca:	4770      	bx	lr
 8005bcc:	20000150 	.word	0x20000150

08005bd0 <_close_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4d06      	ldr	r5, [pc, #24]	; (8005bec <_close_r+0x1c>)
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	4608      	mov	r0, r1
 8005bda:	602b      	str	r3, [r5, #0]
 8005bdc:	f7fd f8e1 	bl	8002da2 <_close>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d102      	bne.n	8005bea <_close_r+0x1a>
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	b103      	cbz	r3, 8005bea <_close_r+0x1a>
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	20000360 	.word	0x20000360

08005bf0 <_lseek_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4d07      	ldr	r5, [pc, #28]	; (8005c10 <_lseek_r+0x20>)
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	4608      	mov	r0, r1
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	602a      	str	r2, [r5, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f7fd f8f6 	bl	8002df0 <_lseek>
 8005c04:	1c43      	adds	r3, r0, #1
 8005c06:	d102      	bne.n	8005c0e <_lseek_r+0x1e>
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	b103      	cbz	r3, 8005c0e <_lseek_r+0x1e>
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}
 8005c10:	20000360 	.word	0x20000360

08005c14 <_read_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4d07      	ldr	r5, [pc, #28]	; (8005c34 <_read_r+0x20>)
 8005c18:	4604      	mov	r4, r0
 8005c1a:	4608      	mov	r0, r1
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	602a      	str	r2, [r5, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f7fd f8a0 	bl	8002d68 <_read>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d102      	bne.n	8005c32 <_read_r+0x1e>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b103      	cbz	r3, 8005c32 <_read_r+0x1e>
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	20000360 	.word	0x20000360

08005c38 <_write_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4d07      	ldr	r5, [pc, #28]	; (8005c58 <_write_r+0x20>)
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	4608      	mov	r0, r1
 8005c40:	4611      	mov	r1, r2
 8005c42:	2200      	movs	r2, #0
 8005c44:	602a      	str	r2, [r5, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f7fc fe48 	bl	80028dc <_write>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d102      	bne.n	8005c56 <_write_r+0x1e>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	b103      	cbz	r3, 8005c56 <_write_r+0x1e>
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
 8005c58:	20000360 	.word	0x20000360

08005c5c <__errno>:
 8005c5c:	4b01      	ldr	r3, [pc, #4]	; (8005c64 <__errno+0x8>)
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	2000005c 	.word	0x2000005c

08005c68 <__libc_init_array>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	4d0d      	ldr	r5, [pc, #52]	; (8005ca0 <__libc_init_array+0x38>)
 8005c6c:	4c0d      	ldr	r4, [pc, #52]	; (8005ca4 <__libc_init_array+0x3c>)
 8005c6e:	1b64      	subs	r4, r4, r5
 8005c70:	10a4      	asrs	r4, r4, #2
 8005c72:	2600      	movs	r6, #0
 8005c74:	42a6      	cmp	r6, r4
 8005c76:	d109      	bne.n	8005c8c <__libc_init_array+0x24>
 8005c78:	4d0b      	ldr	r5, [pc, #44]	; (8005ca8 <__libc_init_array+0x40>)
 8005c7a:	4c0c      	ldr	r4, [pc, #48]	; (8005cac <__libc_init_array+0x44>)
 8005c7c:	f001 fe58 	bl	8007930 <_init>
 8005c80:	1b64      	subs	r4, r4, r5
 8005c82:	10a4      	asrs	r4, r4, #2
 8005c84:	2600      	movs	r6, #0
 8005c86:	42a6      	cmp	r6, r4
 8005c88:	d105      	bne.n	8005c96 <__libc_init_array+0x2e>
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c90:	4798      	blx	r3
 8005c92:	3601      	adds	r6, #1
 8005c94:	e7ee      	b.n	8005c74 <__libc_init_array+0xc>
 8005c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c9a:	4798      	blx	r3
 8005c9c:	3601      	adds	r6, #1
 8005c9e:	e7f2      	b.n	8005c86 <__libc_init_array+0x1e>
 8005ca0:	08007f04 	.word	0x08007f04
 8005ca4:	08007f04 	.word	0x08007f04
 8005ca8:	08007f04 	.word	0x08007f04
 8005cac:	08007f08 	.word	0x08007f08

08005cb0 <__retarget_lock_acquire_recursive>:
 8005cb0:	4770      	bx	lr

08005cb2 <__retarget_lock_release_recursive>:
 8005cb2:	4770      	bx	lr

08005cb4 <quorem>:
 8005cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb8:	6903      	ldr	r3, [r0, #16]
 8005cba:	690c      	ldr	r4, [r1, #16]
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	db7e      	blt.n	8005dc0 <quorem+0x10c>
 8005cc2:	3c01      	subs	r4, #1
 8005cc4:	f101 0814 	add.w	r8, r1, #20
 8005cc8:	f100 0514 	add.w	r5, r0, #20
 8005ccc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ce2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ce6:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cea:	d331      	bcc.n	8005d50 <quorem+0x9c>
 8005cec:	f04f 0e00 	mov.w	lr, #0
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	46ac      	mov	ip, r5
 8005cf4:	46f2      	mov	sl, lr
 8005cf6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cfa:	b293      	uxth	r3, r2
 8005cfc:	fb06 e303 	mla	r3, r6, r3, lr
 8005d00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d04:	0c1a      	lsrs	r2, r3, #16
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	ebaa 0303 	sub.w	r3, sl, r3
 8005d0c:	f8dc a000 	ldr.w	sl, [ip]
 8005d10:	fa13 f38a 	uxtah	r3, r3, sl
 8005d14:	fb06 220e 	mla	r2, r6, lr, r2
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	9b00      	ldr	r3, [sp, #0]
 8005d1c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d20:	b292      	uxth	r2, r2
 8005d22:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d2a:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d2e:	4581      	cmp	r9, r0
 8005d30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d34:	f84c 3b04 	str.w	r3, [ip], #4
 8005d38:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d3c:	d2db      	bcs.n	8005cf6 <quorem+0x42>
 8005d3e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d42:	b92b      	cbnz	r3, 8005d50 <quorem+0x9c>
 8005d44:	9b01      	ldr	r3, [sp, #4]
 8005d46:	3b04      	subs	r3, #4
 8005d48:	429d      	cmp	r5, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	d32c      	bcc.n	8005da8 <quorem+0xf4>
 8005d4e:	613c      	str	r4, [r7, #16]
 8005d50:	4638      	mov	r0, r7
 8005d52:	f001 f9a7 	bl	80070a4 <__mcmp>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	db22      	blt.n	8005da0 <quorem+0xec>
 8005d5a:	3601      	adds	r6, #1
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	2000      	movs	r0, #0
 8005d60:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d64:	f8d1 c000 	ldr.w	ip, [r1]
 8005d68:	b293      	uxth	r3, r2
 8005d6a:	1ac3      	subs	r3, r0, r3
 8005d6c:	0c12      	lsrs	r2, r2, #16
 8005d6e:	fa13 f38c 	uxtah	r3, r3, ip
 8005d72:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005d76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d80:	45c1      	cmp	r9, r8
 8005d82:	f841 3b04 	str.w	r3, [r1], #4
 8005d86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d8a:	d2e9      	bcs.n	8005d60 <quorem+0xac>
 8005d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d94:	b922      	cbnz	r2, 8005da0 <quorem+0xec>
 8005d96:	3b04      	subs	r3, #4
 8005d98:	429d      	cmp	r5, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	d30a      	bcc.n	8005db4 <quorem+0x100>
 8005d9e:	613c      	str	r4, [r7, #16]
 8005da0:	4630      	mov	r0, r6
 8005da2:	b003      	add	sp, #12
 8005da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	3b04      	subs	r3, #4
 8005dac:	2a00      	cmp	r2, #0
 8005dae:	d1ce      	bne.n	8005d4e <quorem+0x9a>
 8005db0:	3c01      	subs	r4, #1
 8005db2:	e7c9      	b.n	8005d48 <quorem+0x94>
 8005db4:	6812      	ldr	r2, [r2, #0]
 8005db6:	3b04      	subs	r3, #4
 8005db8:	2a00      	cmp	r2, #0
 8005dba:	d1f0      	bne.n	8005d9e <quorem+0xea>
 8005dbc:	3c01      	subs	r4, #1
 8005dbe:	e7eb      	b.n	8005d98 <quorem+0xe4>
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	e7ee      	b.n	8005da2 <quorem+0xee>
 8005dc4:	0000      	movs	r0, r0
	...

08005dc8 <_dtoa_r>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	ed2d 8b04 	vpush	{d8-d9}
 8005dd0:	69c5      	ldr	r5, [r0, #28]
 8005dd2:	b093      	sub	sp, #76	; 0x4c
 8005dd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005dd8:	ec57 6b10 	vmov	r6, r7, d0
 8005ddc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005de0:	9107      	str	r1, [sp, #28]
 8005de2:	4604      	mov	r4, r0
 8005de4:	920a      	str	r2, [sp, #40]	; 0x28
 8005de6:	930d      	str	r3, [sp, #52]	; 0x34
 8005de8:	b975      	cbnz	r5, 8005e08 <_dtoa_r+0x40>
 8005dea:	2010      	movs	r0, #16
 8005dec:	f000 fe2a 	bl	8006a44 <malloc>
 8005df0:	4602      	mov	r2, r0
 8005df2:	61e0      	str	r0, [r4, #28]
 8005df4:	b920      	cbnz	r0, 8005e00 <_dtoa_r+0x38>
 8005df6:	4bae      	ldr	r3, [pc, #696]	; (80060b0 <_dtoa_r+0x2e8>)
 8005df8:	21ef      	movs	r1, #239	; 0xef
 8005dfa:	48ae      	ldr	r0, [pc, #696]	; (80060b4 <_dtoa_r+0x2ec>)
 8005dfc:	f001 fce6 	bl	80077cc <__assert_func>
 8005e00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e04:	6005      	str	r5, [r0, #0]
 8005e06:	60c5      	str	r5, [r0, #12]
 8005e08:	69e3      	ldr	r3, [r4, #28]
 8005e0a:	6819      	ldr	r1, [r3, #0]
 8005e0c:	b151      	cbz	r1, 8005e24 <_dtoa_r+0x5c>
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	604a      	str	r2, [r1, #4]
 8005e12:	2301      	movs	r3, #1
 8005e14:	4093      	lsls	r3, r2
 8005e16:	608b      	str	r3, [r1, #8]
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 ff07 	bl	8006c2c <_Bfree>
 8005e1e:	69e3      	ldr	r3, [r4, #28]
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	1e3b      	subs	r3, r7, #0
 8005e26:	bfbb      	ittet	lt
 8005e28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e2c:	9303      	strlt	r3, [sp, #12]
 8005e2e:	2300      	movge	r3, #0
 8005e30:	2201      	movlt	r2, #1
 8005e32:	bfac      	ite	ge
 8005e34:	f8c8 3000 	strge.w	r3, [r8]
 8005e38:	f8c8 2000 	strlt.w	r2, [r8]
 8005e3c:	4b9e      	ldr	r3, [pc, #632]	; (80060b8 <_dtoa_r+0x2f0>)
 8005e3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e42:	ea33 0308 	bics.w	r3, r3, r8
 8005e46:	d11b      	bne.n	8005e80 <_dtoa_r+0xb8>
 8005e48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005e54:	4333      	orrs	r3, r6
 8005e56:	f000 8593 	beq.w	8006980 <_dtoa_r+0xbb8>
 8005e5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e5c:	b963      	cbnz	r3, 8005e78 <_dtoa_r+0xb0>
 8005e5e:	4b97      	ldr	r3, [pc, #604]	; (80060bc <_dtoa_r+0x2f4>)
 8005e60:	e027      	b.n	8005eb2 <_dtoa_r+0xea>
 8005e62:	4b97      	ldr	r3, [pc, #604]	; (80060c0 <_dtoa_r+0x2f8>)
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	9800      	ldr	r0, [sp, #0]
 8005e6e:	b013      	add	sp, #76	; 0x4c
 8005e70:	ecbd 8b04 	vpop	{d8-d9}
 8005e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e78:	4b90      	ldr	r3, [pc, #576]	; (80060bc <_dtoa_r+0x2f4>)
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	3303      	adds	r3, #3
 8005e7e:	e7f3      	b.n	8005e68 <_dtoa_r+0xa0>
 8005e80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e84:	2200      	movs	r2, #0
 8005e86:	ec51 0b17 	vmov	r0, r1, d7
 8005e8a:	eeb0 8a47 	vmov.f32	s16, s14
 8005e8e:	eef0 8a67 	vmov.f32	s17, s15
 8005e92:	2300      	movs	r3, #0
 8005e94:	f7fa fe20 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e98:	4681      	mov	r9, r0
 8005e9a:	b160      	cbz	r0, 8005eb6 <_dtoa_r+0xee>
 8005e9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 8568 	beq.w	800697a <_dtoa_r+0xbb2>
 8005eaa:	4b86      	ldr	r3, [pc, #536]	; (80060c4 <_dtoa_r+0x2fc>)
 8005eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	e7da      	b.n	8005e6c <_dtoa_r+0xa4>
 8005eb6:	aa10      	add	r2, sp, #64	; 0x40
 8005eb8:	a911      	add	r1, sp, #68	; 0x44
 8005eba:	4620      	mov	r0, r4
 8005ebc:	eeb0 0a48 	vmov.f32	s0, s16
 8005ec0:	eef0 0a68 	vmov.f32	s1, s17
 8005ec4:	f001 f994 	bl	80071f0 <__d2b>
 8005ec8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005ecc:	4682      	mov	sl, r0
 8005ece:	2d00      	cmp	r5, #0
 8005ed0:	d07f      	beq.n	8005fd2 <_dtoa_r+0x20a>
 8005ed2:	ee18 3a90 	vmov	r3, s17
 8005ed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eda:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005ede:	ec51 0b18 	vmov	r0, r1, d8
 8005ee2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005ee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005eea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005eee:	4619      	mov	r1, r3
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4b75      	ldr	r3, [pc, #468]	; (80060c8 <_dtoa_r+0x300>)
 8005ef4:	f7fa f9d0 	bl	8000298 <__aeabi_dsub>
 8005ef8:	a367      	add	r3, pc, #412	; (adr r3, 8006098 <_dtoa_r+0x2d0>)
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f7fa fb83 	bl	8000608 <__aeabi_dmul>
 8005f02:	a367      	add	r3, pc, #412	; (adr r3, 80060a0 <_dtoa_r+0x2d8>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f7fa f9c8 	bl	800029c <__adddf3>
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	4628      	mov	r0, r5
 8005f10:	460f      	mov	r7, r1
 8005f12:	f7fa fb0f 	bl	8000534 <__aeabi_i2d>
 8005f16:	a364      	add	r3, pc, #400	; (adr r3, 80060a8 <_dtoa_r+0x2e0>)
 8005f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1c:	f7fa fb74 	bl	8000608 <__aeabi_dmul>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4630      	mov	r0, r6
 8005f26:	4639      	mov	r1, r7
 8005f28:	f7fa f9b8 	bl	800029c <__adddf3>
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	460f      	mov	r7, r1
 8005f30:	f7fa fe1a 	bl	8000b68 <__aeabi_d2iz>
 8005f34:	2200      	movs	r2, #0
 8005f36:	4683      	mov	fp, r0
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	4639      	mov	r1, r7
 8005f3e:	f7fa fdd5 	bl	8000aec <__aeabi_dcmplt>
 8005f42:	b148      	cbz	r0, 8005f58 <_dtoa_r+0x190>
 8005f44:	4658      	mov	r0, fp
 8005f46:	f7fa faf5 	bl	8000534 <__aeabi_i2d>
 8005f4a:	4632      	mov	r2, r6
 8005f4c:	463b      	mov	r3, r7
 8005f4e:	f7fa fdc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f52:	b908      	cbnz	r0, 8005f58 <_dtoa_r+0x190>
 8005f54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f58:	f1bb 0f16 	cmp.w	fp, #22
 8005f5c:	d857      	bhi.n	800600e <_dtoa_r+0x246>
 8005f5e:	4b5b      	ldr	r3, [pc, #364]	; (80060cc <_dtoa_r+0x304>)
 8005f60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	ec51 0b18 	vmov	r0, r1, d8
 8005f6c:	f7fa fdbe 	bl	8000aec <__aeabi_dcmplt>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d04e      	beq.n	8006012 <_dtoa_r+0x24a>
 8005f74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f78:	2300      	movs	r3, #0
 8005f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8005f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f7e:	1b5b      	subs	r3, r3, r5
 8005f80:	1e5a      	subs	r2, r3, #1
 8005f82:	bf45      	ittet	mi
 8005f84:	f1c3 0301 	rsbmi	r3, r3, #1
 8005f88:	9305      	strmi	r3, [sp, #20]
 8005f8a:	2300      	movpl	r3, #0
 8005f8c:	2300      	movmi	r3, #0
 8005f8e:	9206      	str	r2, [sp, #24]
 8005f90:	bf54      	ite	pl
 8005f92:	9305      	strpl	r3, [sp, #20]
 8005f94:	9306      	strmi	r3, [sp, #24]
 8005f96:	f1bb 0f00 	cmp.w	fp, #0
 8005f9a:	db3c      	blt.n	8006016 <_dtoa_r+0x24e>
 8005f9c:	9b06      	ldr	r3, [sp, #24]
 8005f9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005fa2:	445b      	add	r3, fp
 8005fa4:	9306      	str	r3, [sp, #24]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	9308      	str	r3, [sp, #32]
 8005faa:	9b07      	ldr	r3, [sp, #28]
 8005fac:	2b09      	cmp	r3, #9
 8005fae:	d868      	bhi.n	8006082 <_dtoa_r+0x2ba>
 8005fb0:	2b05      	cmp	r3, #5
 8005fb2:	bfc4      	itt	gt
 8005fb4:	3b04      	subgt	r3, #4
 8005fb6:	9307      	strgt	r3, [sp, #28]
 8005fb8:	9b07      	ldr	r3, [sp, #28]
 8005fba:	f1a3 0302 	sub.w	r3, r3, #2
 8005fbe:	bfcc      	ite	gt
 8005fc0:	2500      	movgt	r5, #0
 8005fc2:	2501      	movle	r5, #1
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	f200 8085 	bhi.w	80060d4 <_dtoa_r+0x30c>
 8005fca:	e8df f003 	tbb	[pc, r3]
 8005fce:	3b2e      	.short	0x3b2e
 8005fd0:	5839      	.short	0x5839
 8005fd2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005fd6:	441d      	add	r5, r3
 8005fd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	bfc1      	itttt	gt
 8005fe0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fe4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005fe8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005fec:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005ff0:	bfd6      	itet	le
 8005ff2:	f1c3 0320 	rsble	r3, r3, #32
 8005ff6:	ea48 0003 	orrgt.w	r0, r8, r3
 8005ffa:	fa06 f003 	lslle.w	r0, r6, r3
 8005ffe:	f7fa fa89 	bl	8000514 <__aeabi_ui2d>
 8006002:	2201      	movs	r2, #1
 8006004:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006008:	3d01      	subs	r5, #1
 800600a:	920e      	str	r2, [sp, #56]	; 0x38
 800600c:	e76f      	b.n	8005eee <_dtoa_r+0x126>
 800600e:	2301      	movs	r3, #1
 8006010:	e7b3      	b.n	8005f7a <_dtoa_r+0x1b2>
 8006012:	900c      	str	r0, [sp, #48]	; 0x30
 8006014:	e7b2      	b.n	8005f7c <_dtoa_r+0x1b4>
 8006016:	9b05      	ldr	r3, [sp, #20]
 8006018:	eba3 030b 	sub.w	r3, r3, fp
 800601c:	9305      	str	r3, [sp, #20]
 800601e:	f1cb 0300 	rsb	r3, fp, #0
 8006022:	9308      	str	r3, [sp, #32]
 8006024:	2300      	movs	r3, #0
 8006026:	930b      	str	r3, [sp, #44]	; 0x2c
 8006028:	e7bf      	b.n	8005faa <_dtoa_r+0x1e2>
 800602a:	2300      	movs	r3, #0
 800602c:	9309      	str	r3, [sp, #36]	; 0x24
 800602e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006030:	2b00      	cmp	r3, #0
 8006032:	dc52      	bgt.n	80060da <_dtoa_r+0x312>
 8006034:	2301      	movs	r3, #1
 8006036:	9301      	str	r3, [sp, #4]
 8006038:	9304      	str	r3, [sp, #16]
 800603a:	461a      	mov	r2, r3
 800603c:	920a      	str	r2, [sp, #40]	; 0x28
 800603e:	e00b      	b.n	8006058 <_dtoa_r+0x290>
 8006040:	2301      	movs	r3, #1
 8006042:	e7f3      	b.n	800602c <_dtoa_r+0x264>
 8006044:	2300      	movs	r3, #0
 8006046:	9309      	str	r3, [sp, #36]	; 0x24
 8006048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800604a:	445b      	add	r3, fp
 800604c:	9301      	str	r3, [sp, #4]
 800604e:	3301      	adds	r3, #1
 8006050:	2b01      	cmp	r3, #1
 8006052:	9304      	str	r3, [sp, #16]
 8006054:	bfb8      	it	lt
 8006056:	2301      	movlt	r3, #1
 8006058:	69e0      	ldr	r0, [r4, #28]
 800605a:	2100      	movs	r1, #0
 800605c:	2204      	movs	r2, #4
 800605e:	f102 0614 	add.w	r6, r2, #20
 8006062:	429e      	cmp	r6, r3
 8006064:	d93d      	bls.n	80060e2 <_dtoa_r+0x31a>
 8006066:	6041      	str	r1, [r0, #4]
 8006068:	4620      	mov	r0, r4
 800606a:	f000 fd9f 	bl	8006bac <_Balloc>
 800606e:	9000      	str	r0, [sp, #0]
 8006070:	2800      	cmp	r0, #0
 8006072:	d139      	bne.n	80060e8 <_dtoa_r+0x320>
 8006074:	4b16      	ldr	r3, [pc, #88]	; (80060d0 <_dtoa_r+0x308>)
 8006076:	4602      	mov	r2, r0
 8006078:	f240 11af 	movw	r1, #431	; 0x1af
 800607c:	e6bd      	b.n	8005dfa <_dtoa_r+0x32>
 800607e:	2301      	movs	r3, #1
 8006080:	e7e1      	b.n	8006046 <_dtoa_r+0x27e>
 8006082:	2501      	movs	r5, #1
 8006084:	2300      	movs	r3, #0
 8006086:	9307      	str	r3, [sp, #28]
 8006088:	9509      	str	r5, [sp, #36]	; 0x24
 800608a:	f04f 33ff 	mov.w	r3, #4294967295
 800608e:	9301      	str	r3, [sp, #4]
 8006090:	9304      	str	r3, [sp, #16]
 8006092:	2200      	movs	r2, #0
 8006094:	2312      	movs	r3, #18
 8006096:	e7d1      	b.n	800603c <_dtoa_r+0x274>
 8006098:	636f4361 	.word	0x636f4361
 800609c:	3fd287a7 	.word	0x3fd287a7
 80060a0:	8b60c8b3 	.word	0x8b60c8b3
 80060a4:	3fc68a28 	.word	0x3fc68a28
 80060a8:	509f79fb 	.word	0x509f79fb
 80060ac:	3fd34413 	.word	0x3fd34413
 80060b0:	08007bcc 	.word	0x08007bcc
 80060b4:	08007be3 	.word	0x08007be3
 80060b8:	7ff00000 	.word	0x7ff00000
 80060bc:	08007bc8 	.word	0x08007bc8
 80060c0:	08007bbf 	.word	0x08007bbf
 80060c4:	08007b9c 	.word	0x08007b9c
 80060c8:	3ff80000 	.word	0x3ff80000
 80060cc:	08007cd0 	.word	0x08007cd0
 80060d0:	08007c3b 	.word	0x08007c3b
 80060d4:	2301      	movs	r3, #1
 80060d6:	9309      	str	r3, [sp, #36]	; 0x24
 80060d8:	e7d7      	b.n	800608a <_dtoa_r+0x2c2>
 80060da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060dc:	9301      	str	r3, [sp, #4]
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	e7ba      	b.n	8006058 <_dtoa_r+0x290>
 80060e2:	3101      	adds	r1, #1
 80060e4:	0052      	lsls	r2, r2, #1
 80060e6:	e7ba      	b.n	800605e <_dtoa_r+0x296>
 80060e8:	69e3      	ldr	r3, [r4, #28]
 80060ea:	9a00      	ldr	r2, [sp, #0]
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	9b04      	ldr	r3, [sp, #16]
 80060f0:	2b0e      	cmp	r3, #14
 80060f2:	f200 80a8 	bhi.w	8006246 <_dtoa_r+0x47e>
 80060f6:	2d00      	cmp	r5, #0
 80060f8:	f000 80a5 	beq.w	8006246 <_dtoa_r+0x47e>
 80060fc:	f1bb 0f00 	cmp.w	fp, #0
 8006100:	dd38      	ble.n	8006174 <_dtoa_r+0x3ac>
 8006102:	4bc0      	ldr	r3, [pc, #768]	; (8006404 <_dtoa_r+0x63c>)
 8006104:	f00b 020f 	and.w	r2, fp, #15
 8006108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800610c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006110:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006114:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006118:	d019      	beq.n	800614e <_dtoa_r+0x386>
 800611a:	4bbb      	ldr	r3, [pc, #748]	; (8006408 <_dtoa_r+0x640>)
 800611c:	ec51 0b18 	vmov	r0, r1, d8
 8006120:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006124:	f7fa fb9a 	bl	800085c <__aeabi_ddiv>
 8006128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800612c:	f008 080f 	and.w	r8, r8, #15
 8006130:	2503      	movs	r5, #3
 8006132:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006408 <_dtoa_r+0x640>
 8006136:	f1b8 0f00 	cmp.w	r8, #0
 800613a:	d10a      	bne.n	8006152 <_dtoa_r+0x38a>
 800613c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006140:	4632      	mov	r2, r6
 8006142:	463b      	mov	r3, r7
 8006144:	f7fa fb8a 	bl	800085c <__aeabi_ddiv>
 8006148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800614c:	e02b      	b.n	80061a6 <_dtoa_r+0x3de>
 800614e:	2502      	movs	r5, #2
 8006150:	e7ef      	b.n	8006132 <_dtoa_r+0x36a>
 8006152:	f018 0f01 	tst.w	r8, #1
 8006156:	d008      	beq.n	800616a <_dtoa_r+0x3a2>
 8006158:	4630      	mov	r0, r6
 800615a:	4639      	mov	r1, r7
 800615c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006160:	f7fa fa52 	bl	8000608 <__aeabi_dmul>
 8006164:	3501      	adds	r5, #1
 8006166:	4606      	mov	r6, r0
 8006168:	460f      	mov	r7, r1
 800616a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800616e:	f109 0908 	add.w	r9, r9, #8
 8006172:	e7e0      	b.n	8006136 <_dtoa_r+0x36e>
 8006174:	f000 809f 	beq.w	80062b6 <_dtoa_r+0x4ee>
 8006178:	f1cb 0600 	rsb	r6, fp, #0
 800617c:	4ba1      	ldr	r3, [pc, #644]	; (8006404 <_dtoa_r+0x63c>)
 800617e:	4fa2      	ldr	r7, [pc, #648]	; (8006408 <_dtoa_r+0x640>)
 8006180:	f006 020f 	and.w	r2, r6, #15
 8006184:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	ec51 0b18 	vmov	r0, r1, d8
 8006190:	f7fa fa3a 	bl	8000608 <__aeabi_dmul>
 8006194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006198:	1136      	asrs	r6, r6, #4
 800619a:	2300      	movs	r3, #0
 800619c:	2502      	movs	r5, #2
 800619e:	2e00      	cmp	r6, #0
 80061a0:	d17e      	bne.n	80062a0 <_dtoa_r+0x4d8>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1d0      	bne.n	8006148 <_dtoa_r+0x380>
 80061a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 8084 	beq.w	80062ba <_dtoa_r+0x4f2>
 80061b2:	4b96      	ldr	r3, [pc, #600]	; (800640c <_dtoa_r+0x644>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	4640      	mov	r0, r8
 80061b8:	4649      	mov	r1, r9
 80061ba:	f7fa fc97 	bl	8000aec <__aeabi_dcmplt>
 80061be:	2800      	cmp	r0, #0
 80061c0:	d07b      	beq.n	80062ba <_dtoa_r+0x4f2>
 80061c2:	9b04      	ldr	r3, [sp, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d078      	beq.n	80062ba <_dtoa_r+0x4f2>
 80061c8:	9b01      	ldr	r3, [sp, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	dd39      	ble.n	8006242 <_dtoa_r+0x47a>
 80061ce:	4b90      	ldr	r3, [pc, #576]	; (8006410 <_dtoa_r+0x648>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	4640      	mov	r0, r8
 80061d4:	4649      	mov	r1, r9
 80061d6:	f7fa fa17 	bl	8000608 <__aeabi_dmul>
 80061da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061de:	9e01      	ldr	r6, [sp, #4]
 80061e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80061e4:	3501      	adds	r5, #1
 80061e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80061ea:	4628      	mov	r0, r5
 80061ec:	f7fa f9a2 	bl	8000534 <__aeabi_i2d>
 80061f0:	4642      	mov	r2, r8
 80061f2:	464b      	mov	r3, r9
 80061f4:	f7fa fa08 	bl	8000608 <__aeabi_dmul>
 80061f8:	4b86      	ldr	r3, [pc, #536]	; (8006414 <_dtoa_r+0x64c>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	f7fa f84e 	bl	800029c <__adddf3>
 8006200:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006208:	9303      	str	r3, [sp, #12]
 800620a:	2e00      	cmp	r6, #0
 800620c:	d158      	bne.n	80062c0 <_dtoa_r+0x4f8>
 800620e:	4b82      	ldr	r3, [pc, #520]	; (8006418 <_dtoa_r+0x650>)
 8006210:	2200      	movs	r2, #0
 8006212:	4640      	mov	r0, r8
 8006214:	4649      	mov	r1, r9
 8006216:	f7fa f83f 	bl	8000298 <__aeabi_dsub>
 800621a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800621e:	4680      	mov	r8, r0
 8006220:	4689      	mov	r9, r1
 8006222:	f7fa fc81 	bl	8000b28 <__aeabi_dcmpgt>
 8006226:	2800      	cmp	r0, #0
 8006228:	f040 8296 	bne.w	8006758 <_dtoa_r+0x990>
 800622c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006230:	4640      	mov	r0, r8
 8006232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006236:	4649      	mov	r1, r9
 8006238:	f7fa fc58 	bl	8000aec <__aeabi_dcmplt>
 800623c:	2800      	cmp	r0, #0
 800623e:	f040 8289 	bne.w	8006754 <_dtoa_r+0x98c>
 8006242:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006246:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006248:	2b00      	cmp	r3, #0
 800624a:	f2c0 814e 	blt.w	80064ea <_dtoa_r+0x722>
 800624e:	f1bb 0f0e 	cmp.w	fp, #14
 8006252:	f300 814a 	bgt.w	80064ea <_dtoa_r+0x722>
 8006256:	4b6b      	ldr	r3, [pc, #428]	; (8006404 <_dtoa_r+0x63c>)
 8006258:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800625c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	f280 80dc 	bge.w	8006420 <_dtoa_r+0x658>
 8006268:	9b04      	ldr	r3, [sp, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f300 80d8 	bgt.w	8006420 <_dtoa_r+0x658>
 8006270:	f040 826f 	bne.w	8006752 <_dtoa_r+0x98a>
 8006274:	4b68      	ldr	r3, [pc, #416]	; (8006418 <_dtoa_r+0x650>)
 8006276:	2200      	movs	r2, #0
 8006278:	4640      	mov	r0, r8
 800627a:	4649      	mov	r1, r9
 800627c:	f7fa f9c4 	bl	8000608 <__aeabi_dmul>
 8006280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006284:	f7fa fc46 	bl	8000b14 <__aeabi_dcmpge>
 8006288:	9e04      	ldr	r6, [sp, #16]
 800628a:	4637      	mov	r7, r6
 800628c:	2800      	cmp	r0, #0
 800628e:	f040 8245 	bne.w	800671c <_dtoa_r+0x954>
 8006292:	9d00      	ldr	r5, [sp, #0]
 8006294:	2331      	movs	r3, #49	; 0x31
 8006296:	f805 3b01 	strb.w	r3, [r5], #1
 800629a:	f10b 0b01 	add.w	fp, fp, #1
 800629e:	e241      	b.n	8006724 <_dtoa_r+0x95c>
 80062a0:	07f2      	lsls	r2, r6, #31
 80062a2:	d505      	bpl.n	80062b0 <_dtoa_r+0x4e8>
 80062a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062a8:	f7fa f9ae 	bl	8000608 <__aeabi_dmul>
 80062ac:	3501      	adds	r5, #1
 80062ae:	2301      	movs	r3, #1
 80062b0:	1076      	asrs	r6, r6, #1
 80062b2:	3708      	adds	r7, #8
 80062b4:	e773      	b.n	800619e <_dtoa_r+0x3d6>
 80062b6:	2502      	movs	r5, #2
 80062b8:	e775      	b.n	80061a6 <_dtoa_r+0x3de>
 80062ba:	9e04      	ldr	r6, [sp, #16]
 80062bc:	465f      	mov	r7, fp
 80062be:	e792      	b.n	80061e6 <_dtoa_r+0x41e>
 80062c0:	9900      	ldr	r1, [sp, #0]
 80062c2:	4b50      	ldr	r3, [pc, #320]	; (8006404 <_dtoa_r+0x63c>)
 80062c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062c8:	4431      	add	r1, r6
 80062ca:	9102      	str	r1, [sp, #8]
 80062cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062ce:	eeb0 9a47 	vmov.f32	s18, s14
 80062d2:	eef0 9a67 	vmov.f32	s19, s15
 80062d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062de:	2900      	cmp	r1, #0
 80062e0:	d044      	beq.n	800636c <_dtoa_r+0x5a4>
 80062e2:	494e      	ldr	r1, [pc, #312]	; (800641c <_dtoa_r+0x654>)
 80062e4:	2000      	movs	r0, #0
 80062e6:	f7fa fab9 	bl	800085c <__aeabi_ddiv>
 80062ea:	ec53 2b19 	vmov	r2, r3, d9
 80062ee:	f7f9 ffd3 	bl	8000298 <__aeabi_dsub>
 80062f2:	9d00      	ldr	r5, [sp, #0]
 80062f4:	ec41 0b19 	vmov	d9, r0, r1
 80062f8:	4649      	mov	r1, r9
 80062fa:	4640      	mov	r0, r8
 80062fc:	f7fa fc34 	bl	8000b68 <__aeabi_d2iz>
 8006300:	4606      	mov	r6, r0
 8006302:	f7fa f917 	bl	8000534 <__aeabi_i2d>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4640      	mov	r0, r8
 800630c:	4649      	mov	r1, r9
 800630e:	f7f9 ffc3 	bl	8000298 <__aeabi_dsub>
 8006312:	3630      	adds	r6, #48	; 0x30
 8006314:	f805 6b01 	strb.w	r6, [r5], #1
 8006318:	ec53 2b19 	vmov	r2, r3, d9
 800631c:	4680      	mov	r8, r0
 800631e:	4689      	mov	r9, r1
 8006320:	f7fa fbe4 	bl	8000aec <__aeabi_dcmplt>
 8006324:	2800      	cmp	r0, #0
 8006326:	d164      	bne.n	80063f2 <_dtoa_r+0x62a>
 8006328:	4642      	mov	r2, r8
 800632a:	464b      	mov	r3, r9
 800632c:	4937      	ldr	r1, [pc, #220]	; (800640c <_dtoa_r+0x644>)
 800632e:	2000      	movs	r0, #0
 8006330:	f7f9 ffb2 	bl	8000298 <__aeabi_dsub>
 8006334:	ec53 2b19 	vmov	r2, r3, d9
 8006338:	f7fa fbd8 	bl	8000aec <__aeabi_dcmplt>
 800633c:	2800      	cmp	r0, #0
 800633e:	f040 80b6 	bne.w	80064ae <_dtoa_r+0x6e6>
 8006342:	9b02      	ldr	r3, [sp, #8]
 8006344:	429d      	cmp	r5, r3
 8006346:	f43f af7c 	beq.w	8006242 <_dtoa_r+0x47a>
 800634a:	4b31      	ldr	r3, [pc, #196]	; (8006410 <_dtoa_r+0x648>)
 800634c:	ec51 0b19 	vmov	r0, r1, d9
 8006350:	2200      	movs	r2, #0
 8006352:	f7fa f959 	bl	8000608 <__aeabi_dmul>
 8006356:	4b2e      	ldr	r3, [pc, #184]	; (8006410 <_dtoa_r+0x648>)
 8006358:	ec41 0b19 	vmov	d9, r0, r1
 800635c:	2200      	movs	r2, #0
 800635e:	4640      	mov	r0, r8
 8006360:	4649      	mov	r1, r9
 8006362:	f7fa f951 	bl	8000608 <__aeabi_dmul>
 8006366:	4680      	mov	r8, r0
 8006368:	4689      	mov	r9, r1
 800636a:	e7c5      	b.n	80062f8 <_dtoa_r+0x530>
 800636c:	ec51 0b17 	vmov	r0, r1, d7
 8006370:	f7fa f94a 	bl	8000608 <__aeabi_dmul>
 8006374:	9b02      	ldr	r3, [sp, #8]
 8006376:	9d00      	ldr	r5, [sp, #0]
 8006378:	930f      	str	r3, [sp, #60]	; 0x3c
 800637a:	ec41 0b19 	vmov	d9, r0, r1
 800637e:	4649      	mov	r1, r9
 8006380:	4640      	mov	r0, r8
 8006382:	f7fa fbf1 	bl	8000b68 <__aeabi_d2iz>
 8006386:	4606      	mov	r6, r0
 8006388:	f7fa f8d4 	bl	8000534 <__aeabi_i2d>
 800638c:	3630      	adds	r6, #48	; 0x30
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4640      	mov	r0, r8
 8006394:	4649      	mov	r1, r9
 8006396:	f7f9 ff7f 	bl	8000298 <__aeabi_dsub>
 800639a:	f805 6b01 	strb.w	r6, [r5], #1
 800639e:	9b02      	ldr	r3, [sp, #8]
 80063a0:	429d      	cmp	r5, r3
 80063a2:	4680      	mov	r8, r0
 80063a4:	4689      	mov	r9, r1
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	d124      	bne.n	80063f6 <_dtoa_r+0x62e>
 80063ac:	4b1b      	ldr	r3, [pc, #108]	; (800641c <_dtoa_r+0x654>)
 80063ae:	ec51 0b19 	vmov	r0, r1, d9
 80063b2:	f7f9 ff73 	bl	800029c <__adddf3>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4640      	mov	r0, r8
 80063bc:	4649      	mov	r1, r9
 80063be:	f7fa fbb3 	bl	8000b28 <__aeabi_dcmpgt>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d173      	bne.n	80064ae <_dtoa_r+0x6e6>
 80063c6:	ec53 2b19 	vmov	r2, r3, d9
 80063ca:	4914      	ldr	r1, [pc, #80]	; (800641c <_dtoa_r+0x654>)
 80063cc:	2000      	movs	r0, #0
 80063ce:	f7f9 ff63 	bl	8000298 <__aeabi_dsub>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4640      	mov	r0, r8
 80063d8:	4649      	mov	r1, r9
 80063da:	f7fa fb87 	bl	8000aec <__aeabi_dcmplt>
 80063de:	2800      	cmp	r0, #0
 80063e0:	f43f af2f 	beq.w	8006242 <_dtoa_r+0x47a>
 80063e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063e6:	1e6b      	subs	r3, r5, #1
 80063e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80063ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063ee:	2b30      	cmp	r3, #48	; 0x30
 80063f0:	d0f8      	beq.n	80063e4 <_dtoa_r+0x61c>
 80063f2:	46bb      	mov	fp, r7
 80063f4:	e04a      	b.n	800648c <_dtoa_r+0x6c4>
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <_dtoa_r+0x648>)
 80063f8:	f7fa f906 	bl	8000608 <__aeabi_dmul>
 80063fc:	4680      	mov	r8, r0
 80063fe:	4689      	mov	r9, r1
 8006400:	e7bd      	b.n	800637e <_dtoa_r+0x5b6>
 8006402:	bf00      	nop
 8006404:	08007cd0 	.word	0x08007cd0
 8006408:	08007ca8 	.word	0x08007ca8
 800640c:	3ff00000 	.word	0x3ff00000
 8006410:	40240000 	.word	0x40240000
 8006414:	401c0000 	.word	0x401c0000
 8006418:	40140000 	.word	0x40140000
 800641c:	3fe00000 	.word	0x3fe00000
 8006420:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006424:	9d00      	ldr	r5, [sp, #0]
 8006426:	4642      	mov	r2, r8
 8006428:	464b      	mov	r3, r9
 800642a:	4630      	mov	r0, r6
 800642c:	4639      	mov	r1, r7
 800642e:	f7fa fa15 	bl	800085c <__aeabi_ddiv>
 8006432:	f7fa fb99 	bl	8000b68 <__aeabi_d2iz>
 8006436:	9001      	str	r0, [sp, #4]
 8006438:	f7fa f87c 	bl	8000534 <__aeabi_i2d>
 800643c:	4642      	mov	r2, r8
 800643e:	464b      	mov	r3, r9
 8006440:	f7fa f8e2 	bl	8000608 <__aeabi_dmul>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4630      	mov	r0, r6
 800644a:	4639      	mov	r1, r7
 800644c:	f7f9 ff24 	bl	8000298 <__aeabi_dsub>
 8006450:	9e01      	ldr	r6, [sp, #4]
 8006452:	9f04      	ldr	r7, [sp, #16]
 8006454:	3630      	adds	r6, #48	; 0x30
 8006456:	f805 6b01 	strb.w	r6, [r5], #1
 800645a:	9e00      	ldr	r6, [sp, #0]
 800645c:	1bae      	subs	r6, r5, r6
 800645e:	42b7      	cmp	r7, r6
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	d134      	bne.n	80064d0 <_dtoa_r+0x708>
 8006466:	f7f9 ff19 	bl	800029c <__adddf3>
 800646a:	4642      	mov	r2, r8
 800646c:	464b      	mov	r3, r9
 800646e:	4606      	mov	r6, r0
 8006470:	460f      	mov	r7, r1
 8006472:	f7fa fb59 	bl	8000b28 <__aeabi_dcmpgt>
 8006476:	b9c8      	cbnz	r0, 80064ac <_dtoa_r+0x6e4>
 8006478:	4642      	mov	r2, r8
 800647a:	464b      	mov	r3, r9
 800647c:	4630      	mov	r0, r6
 800647e:	4639      	mov	r1, r7
 8006480:	f7fa fb2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006484:	b110      	cbz	r0, 800648c <_dtoa_r+0x6c4>
 8006486:	9b01      	ldr	r3, [sp, #4]
 8006488:	07db      	lsls	r3, r3, #31
 800648a:	d40f      	bmi.n	80064ac <_dtoa_r+0x6e4>
 800648c:	4651      	mov	r1, sl
 800648e:	4620      	mov	r0, r4
 8006490:	f000 fbcc 	bl	8006c2c <_Bfree>
 8006494:	2300      	movs	r3, #0
 8006496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006498:	702b      	strb	r3, [r5, #0]
 800649a:	f10b 0301 	add.w	r3, fp, #1
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f43f ace2 	beq.w	8005e6c <_dtoa_r+0xa4>
 80064a8:	601d      	str	r5, [r3, #0]
 80064aa:	e4df      	b.n	8005e6c <_dtoa_r+0xa4>
 80064ac:	465f      	mov	r7, fp
 80064ae:	462b      	mov	r3, r5
 80064b0:	461d      	mov	r5, r3
 80064b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064b6:	2a39      	cmp	r2, #57	; 0x39
 80064b8:	d106      	bne.n	80064c8 <_dtoa_r+0x700>
 80064ba:	9a00      	ldr	r2, [sp, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d1f7      	bne.n	80064b0 <_dtoa_r+0x6e8>
 80064c0:	9900      	ldr	r1, [sp, #0]
 80064c2:	2230      	movs	r2, #48	; 0x30
 80064c4:	3701      	adds	r7, #1
 80064c6:	700a      	strb	r2, [r1, #0]
 80064c8:	781a      	ldrb	r2, [r3, #0]
 80064ca:	3201      	adds	r2, #1
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	e790      	b.n	80063f2 <_dtoa_r+0x62a>
 80064d0:	4ba3      	ldr	r3, [pc, #652]	; (8006760 <_dtoa_r+0x998>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	f7fa f898 	bl	8000608 <__aeabi_dmul>
 80064d8:	2200      	movs	r2, #0
 80064da:	2300      	movs	r3, #0
 80064dc:	4606      	mov	r6, r0
 80064de:	460f      	mov	r7, r1
 80064e0:	f7fa fafa 	bl	8000ad8 <__aeabi_dcmpeq>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d09e      	beq.n	8006426 <_dtoa_r+0x65e>
 80064e8:	e7d0      	b.n	800648c <_dtoa_r+0x6c4>
 80064ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ec:	2a00      	cmp	r2, #0
 80064ee:	f000 80ca 	beq.w	8006686 <_dtoa_r+0x8be>
 80064f2:	9a07      	ldr	r2, [sp, #28]
 80064f4:	2a01      	cmp	r2, #1
 80064f6:	f300 80ad 	bgt.w	8006654 <_dtoa_r+0x88c>
 80064fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064fc:	2a00      	cmp	r2, #0
 80064fe:	f000 80a5 	beq.w	800664c <_dtoa_r+0x884>
 8006502:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006506:	9e08      	ldr	r6, [sp, #32]
 8006508:	9d05      	ldr	r5, [sp, #20]
 800650a:	9a05      	ldr	r2, [sp, #20]
 800650c:	441a      	add	r2, r3
 800650e:	9205      	str	r2, [sp, #20]
 8006510:	9a06      	ldr	r2, [sp, #24]
 8006512:	2101      	movs	r1, #1
 8006514:	441a      	add	r2, r3
 8006516:	4620      	mov	r0, r4
 8006518:	9206      	str	r2, [sp, #24]
 800651a:	f000 fc3d 	bl	8006d98 <__i2b>
 800651e:	4607      	mov	r7, r0
 8006520:	b165      	cbz	r5, 800653c <_dtoa_r+0x774>
 8006522:	9b06      	ldr	r3, [sp, #24]
 8006524:	2b00      	cmp	r3, #0
 8006526:	dd09      	ble.n	800653c <_dtoa_r+0x774>
 8006528:	42ab      	cmp	r3, r5
 800652a:	9a05      	ldr	r2, [sp, #20]
 800652c:	bfa8      	it	ge
 800652e:	462b      	movge	r3, r5
 8006530:	1ad2      	subs	r2, r2, r3
 8006532:	9205      	str	r2, [sp, #20]
 8006534:	9a06      	ldr	r2, [sp, #24]
 8006536:	1aed      	subs	r5, r5, r3
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	9306      	str	r3, [sp, #24]
 800653c:	9b08      	ldr	r3, [sp, #32]
 800653e:	b1f3      	cbz	r3, 800657e <_dtoa_r+0x7b6>
 8006540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80a3 	beq.w	800668e <_dtoa_r+0x8c6>
 8006548:	2e00      	cmp	r6, #0
 800654a:	dd10      	ble.n	800656e <_dtoa_r+0x7a6>
 800654c:	4639      	mov	r1, r7
 800654e:	4632      	mov	r2, r6
 8006550:	4620      	mov	r0, r4
 8006552:	f000 fce1 	bl	8006f18 <__pow5mult>
 8006556:	4652      	mov	r2, sl
 8006558:	4601      	mov	r1, r0
 800655a:	4607      	mov	r7, r0
 800655c:	4620      	mov	r0, r4
 800655e:	f000 fc31 	bl	8006dc4 <__multiply>
 8006562:	4651      	mov	r1, sl
 8006564:	4680      	mov	r8, r0
 8006566:	4620      	mov	r0, r4
 8006568:	f000 fb60 	bl	8006c2c <_Bfree>
 800656c:	46c2      	mov	sl, r8
 800656e:	9b08      	ldr	r3, [sp, #32]
 8006570:	1b9a      	subs	r2, r3, r6
 8006572:	d004      	beq.n	800657e <_dtoa_r+0x7b6>
 8006574:	4651      	mov	r1, sl
 8006576:	4620      	mov	r0, r4
 8006578:	f000 fcce 	bl	8006f18 <__pow5mult>
 800657c:	4682      	mov	sl, r0
 800657e:	2101      	movs	r1, #1
 8006580:	4620      	mov	r0, r4
 8006582:	f000 fc09 	bl	8006d98 <__i2b>
 8006586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006588:	2b00      	cmp	r3, #0
 800658a:	4606      	mov	r6, r0
 800658c:	f340 8081 	ble.w	8006692 <_dtoa_r+0x8ca>
 8006590:	461a      	mov	r2, r3
 8006592:	4601      	mov	r1, r0
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fcbf 	bl	8006f18 <__pow5mult>
 800659a:	9b07      	ldr	r3, [sp, #28]
 800659c:	2b01      	cmp	r3, #1
 800659e:	4606      	mov	r6, r0
 80065a0:	dd7a      	ble.n	8006698 <_dtoa_r+0x8d0>
 80065a2:	f04f 0800 	mov.w	r8, #0
 80065a6:	6933      	ldr	r3, [r6, #16]
 80065a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80065ac:	6918      	ldr	r0, [r3, #16]
 80065ae:	f000 fba5 	bl	8006cfc <__hi0bits>
 80065b2:	f1c0 0020 	rsb	r0, r0, #32
 80065b6:	9b06      	ldr	r3, [sp, #24]
 80065b8:	4418      	add	r0, r3
 80065ba:	f010 001f 	ands.w	r0, r0, #31
 80065be:	f000 8094 	beq.w	80066ea <_dtoa_r+0x922>
 80065c2:	f1c0 0320 	rsb	r3, r0, #32
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	f340 8085 	ble.w	80066d6 <_dtoa_r+0x90e>
 80065cc:	9b05      	ldr	r3, [sp, #20]
 80065ce:	f1c0 001c 	rsb	r0, r0, #28
 80065d2:	4403      	add	r3, r0
 80065d4:	9305      	str	r3, [sp, #20]
 80065d6:	9b06      	ldr	r3, [sp, #24]
 80065d8:	4403      	add	r3, r0
 80065da:	4405      	add	r5, r0
 80065dc:	9306      	str	r3, [sp, #24]
 80065de:	9b05      	ldr	r3, [sp, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	dd05      	ble.n	80065f0 <_dtoa_r+0x828>
 80065e4:	4651      	mov	r1, sl
 80065e6:	461a      	mov	r2, r3
 80065e8:	4620      	mov	r0, r4
 80065ea:	f000 fcef 	bl	8006fcc <__lshift>
 80065ee:	4682      	mov	sl, r0
 80065f0:	9b06      	ldr	r3, [sp, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	dd05      	ble.n	8006602 <_dtoa_r+0x83a>
 80065f6:	4631      	mov	r1, r6
 80065f8:	461a      	mov	r2, r3
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 fce6 	bl	8006fcc <__lshift>
 8006600:	4606      	mov	r6, r0
 8006602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006604:	2b00      	cmp	r3, #0
 8006606:	d072      	beq.n	80066ee <_dtoa_r+0x926>
 8006608:	4631      	mov	r1, r6
 800660a:	4650      	mov	r0, sl
 800660c:	f000 fd4a 	bl	80070a4 <__mcmp>
 8006610:	2800      	cmp	r0, #0
 8006612:	da6c      	bge.n	80066ee <_dtoa_r+0x926>
 8006614:	2300      	movs	r3, #0
 8006616:	4651      	mov	r1, sl
 8006618:	220a      	movs	r2, #10
 800661a:	4620      	mov	r0, r4
 800661c:	f000 fb28 	bl	8006c70 <__multadd>
 8006620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006622:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006626:	4682      	mov	sl, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 81b0 	beq.w	800698e <_dtoa_r+0xbc6>
 800662e:	2300      	movs	r3, #0
 8006630:	4639      	mov	r1, r7
 8006632:	220a      	movs	r2, #10
 8006634:	4620      	mov	r0, r4
 8006636:	f000 fb1b 	bl	8006c70 <__multadd>
 800663a:	9b01      	ldr	r3, [sp, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	4607      	mov	r7, r0
 8006640:	f300 8096 	bgt.w	8006770 <_dtoa_r+0x9a8>
 8006644:	9b07      	ldr	r3, [sp, #28]
 8006646:	2b02      	cmp	r3, #2
 8006648:	dc59      	bgt.n	80066fe <_dtoa_r+0x936>
 800664a:	e091      	b.n	8006770 <_dtoa_r+0x9a8>
 800664c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800664e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006652:	e758      	b.n	8006506 <_dtoa_r+0x73e>
 8006654:	9b04      	ldr	r3, [sp, #16]
 8006656:	1e5e      	subs	r6, r3, #1
 8006658:	9b08      	ldr	r3, [sp, #32]
 800665a:	42b3      	cmp	r3, r6
 800665c:	bfbf      	itttt	lt
 800665e:	9b08      	ldrlt	r3, [sp, #32]
 8006660:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006662:	9608      	strlt	r6, [sp, #32]
 8006664:	1af3      	sublt	r3, r6, r3
 8006666:	bfb4      	ite	lt
 8006668:	18d2      	addlt	r2, r2, r3
 800666a:	1b9e      	subge	r6, r3, r6
 800666c:	9b04      	ldr	r3, [sp, #16]
 800666e:	bfbc      	itt	lt
 8006670:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006672:	2600      	movlt	r6, #0
 8006674:	2b00      	cmp	r3, #0
 8006676:	bfb7      	itett	lt
 8006678:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800667c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006680:	1a9d      	sublt	r5, r3, r2
 8006682:	2300      	movlt	r3, #0
 8006684:	e741      	b.n	800650a <_dtoa_r+0x742>
 8006686:	9e08      	ldr	r6, [sp, #32]
 8006688:	9d05      	ldr	r5, [sp, #20]
 800668a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800668c:	e748      	b.n	8006520 <_dtoa_r+0x758>
 800668e:	9a08      	ldr	r2, [sp, #32]
 8006690:	e770      	b.n	8006574 <_dtoa_r+0x7ac>
 8006692:	9b07      	ldr	r3, [sp, #28]
 8006694:	2b01      	cmp	r3, #1
 8006696:	dc19      	bgt.n	80066cc <_dtoa_r+0x904>
 8006698:	9b02      	ldr	r3, [sp, #8]
 800669a:	b9bb      	cbnz	r3, 80066cc <_dtoa_r+0x904>
 800669c:	9b03      	ldr	r3, [sp, #12]
 800669e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a2:	b99b      	cbnz	r3, 80066cc <_dtoa_r+0x904>
 80066a4:	9b03      	ldr	r3, [sp, #12]
 80066a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066aa:	0d1b      	lsrs	r3, r3, #20
 80066ac:	051b      	lsls	r3, r3, #20
 80066ae:	b183      	cbz	r3, 80066d2 <_dtoa_r+0x90a>
 80066b0:	9b05      	ldr	r3, [sp, #20]
 80066b2:	3301      	adds	r3, #1
 80066b4:	9305      	str	r3, [sp, #20]
 80066b6:	9b06      	ldr	r3, [sp, #24]
 80066b8:	3301      	adds	r3, #1
 80066ba:	9306      	str	r3, [sp, #24]
 80066bc:	f04f 0801 	mov.w	r8, #1
 80066c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f47f af6f 	bne.w	80065a6 <_dtoa_r+0x7de>
 80066c8:	2001      	movs	r0, #1
 80066ca:	e774      	b.n	80065b6 <_dtoa_r+0x7ee>
 80066cc:	f04f 0800 	mov.w	r8, #0
 80066d0:	e7f6      	b.n	80066c0 <_dtoa_r+0x8f8>
 80066d2:	4698      	mov	r8, r3
 80066d4:	e7f4      	b.n	80066c0 <_dtoa_r+0x8f8>
 80066d6:	d082      	beq.n	80065de <_dtoa_r+0x816>
 80066d8:	9a05      	ldr	r2, [sp, #20]
 80066da:	331c      	adds	r3, #28
 80066dc:	441a      	add	r2, r3
 80066de:	9205      	str	r2, [sp, #20]
 80066e0:	9a06      	ldr	r2, [sp, #24]
 80066e2:	441a      	add	r2, r3
 80066e4:	441d      	add	r5, r3
 80066e6:	9206      	str	r2, [sp, #24]
 80066e8:	e779      	b.n	80065de <_dtoa_r+0x816>
 80066ea:	4603      	mov	r3, r0
 80066ec:	e7f4      	b.n	80066d8 <_dtoa_r+0x910>
 80066ee:	9b04      	ldr	r3, [sp, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dc37      	bgt.n	8006764 <_dtoa_r+0x99c>
 80066f4:	9b07      	ldr	r3, [sp, #28]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	dd34      	ble.n	8006764 <_dtoa_r+0x99c>
 80066fa:	9b04      	ldr	r3, [sp, #16]
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	b963      	cbnz	r3, 800671c <_dtoa_r+0x954>
 8006702:	4631      	mov	r1, r6
 8006704:	2205      	movs	r2, #5
 8006706:	4620      	mov	r0, r4
 8006708:	f000 fab2 	bl	8006c70 <__multadd>
 800670c:	4601      	mov	r1, r0
 800670e:	4606      	mov	r6, r0
 8006710:	4650      	mov	r0, sl
 8006712:	f000 fcc7 	bl	80070a4 <__mcmp>
 8006716:	2800      	cmp	r0, #0
 8006718:	f73f adbb 	bgt.w	8006292 <_dtoa_r+0x4ca>
 800671c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800671e:	9d00      	ldr	r5, [sp, #0]
 8006720:	ea6f 0b03 	mvn.w	fp, r3
 8006724:	f04f 0800 	mov.w	r8, #0
 8006728:	4631      	mov	r1, r6
 800672a:	4620      	mov	r0, r4
 800672c:	f000 fa7e 	bl	8006c2c <_Bfree>
 8006730:	2f00      	cmp	r7, #0
 8006732:	f43f aeab 	beq.w	800648c <_dtoa_r+0x6c4>
 8006736:	f1b8 0f00 	cmp.w	r8, #0
 800673a:	d005      	beq.n	8006748 <_dtoa_r+0x980>
 800673c:	45b8      	cmp	r8, r7
 800673e:	d003      	beq.n	8006748 <_dtoa_r+0x980>
 8006740:	4641      	mov	r1, r8
 8006742:	4620      	mov	r0, r4
 8006744:	f000 fa72 	bl	8006c2c <_Bfree>
 8006748:	4639      	mov	r1, r7
 800674a:	4620      	mov	r0, r4
 800674c:	f000 fa6e 	bl	8006c2c <_Bfree>
 8006750:	e69c      	b.n	800648c <_dtoa_r+0x6c4>
 8006752:	2600      	movs	r6, #0
 8006754:	4637      	mov	r7, r6
 8006756:	e7e1      	b.n	800671c <_dtoa_r+0x954>
 8006758:	46bb      	mov	fp, r7
 800675a:	4637      	mov	r7, r6
 800675c:	e599      	b.n	8006292 <_dtoa_r+0x4ca>
 800675e:	bf00      	nop
 8006760:	40240000 	.word	0x40240000
 8006764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80c8 	beq.w	80068fc <_dtoa_r+0xb34>
 800676c:	9b04      	ldr	r3, [sp, #16]
 800676e:	9301      	str	r3, [sp, #4]
 8006770:	2d00      	cmp	r5, #0
 8006772:	dd05      	ble.n	8006780 <_dtoa_r+0x9b8>
 8006774:	4639      	mov	r1, r7
 8006776:	462a      	mov	r2, r5
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fc27 	bl	8006fcc <__lshift>
 800677e:	4607      	mov	r7, r0
 8006780:	f1b8 0f00 	cmp.w	r8, #0
 8006784:	d05b      	beq.n	800683e <_dtoa_r+0xa76>
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	4620      	mov	r0, r4
 800678a:	f000 fa0f 	bl	8006bac <_Balloc>
 800678e:	4605      	mov	r5, r0
 8006790:	b928      	cbnz	r0, 800679e <_dtoa_r+0x9d6>
 8006792:	4b83      	ldr	r3, [pc, #524]	; (80069a0 <_dtoa_r+0xbd8>)
 8006794:	4602      	mov	r2, r0
 8006796:	f240 21ef 	movw	r1, #751	; 0x2ef
 800679a:	f7ff bb2e 	b.w	8005dfa <_dtoa_r+0x32>
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	3202      	adds	r2, #2
 80067a2:	0092      	lsls	r2, r2, #2
 80067a4:	f107 010c 	add.w	r1, r7, #12
 80067a8:	300c      	adds	r0, #12
 80067aa:	f001 f801 	bl	80077b0 <memcpy>
 80067ae:	2201      	movs	r2, #1
 80067b0:	4629      	mov	r1, r5
 80067b2:	4620      	mov	r0, r4
 80067b4:	f000 fc0a 	bl	8006fcc <__lshift>
 80067b8:	9b00      	ldr	r3, [sp, #0]
 80067ba:	3301      	adds	r3, #1
 80067bc:	9304      	str	r3, [sp, #16]
 80067be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067c2:	4413      	add	r3, r2
 80067c4:	9308      	str	r3, [sp, #32]
 80067c6:	9b02      	ldr	r3, [sp, #8]
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	46b8      	mov	r8, r7
 80067ce:	9306      	str	r3, [sp, #24]
 80067d0:	4607      	mov	r7, r0
 80067d2:	9b04      	ldr	r3, [sp, #16]
 80067d4:	4631      	mov	r1, r6
 80067d6:	3b01      	subs	r3, #1
 80067d8:	4650      	mov	r0, sl
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	f7ff fa6a 	bl	8005cb4 <quorem>
 80067e0:	4641      	mov	r1, r8
 80067e2:	9002      	str	r0, [sp, #8]
 80067e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067e8:	4650      	mov	r0, sl
 80067ea:	f000 fc5b 	bl	80070a4 <__mcmp>
 80067ee:	463a      	mov	r2, r7
 80067f0:	9005      	str	r0, [sp, #20]
 80067f2:	4631      	mov	r1, r6
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 fc71 	bl	80070dc <__mdiff>
 80067fa:	68c2      	ldr	r2, [r0, #12]
 80067fc:	4605      	mov	r5, r0
 80067fe:	bb02      	cbnz	r2, 8006842 <_dtoa_r+0xa7a>
 8006800:	4601      	mov	r1, r0
 8006802:	4650      	mov	r0, sl
 8006804:	f000 fc4e 	bl	80070a4 <__mcmp>
 8006808:	4602      	mov	r2, r0
 800680a:	4629      	mov	r1, r5
 800680c:	4620      	mov	r0, r4
 800680e:	9209      	str	r2, [sp, #36]	; 0x24
 8006810:	f000 fa0c 	bl	8006c2c <_Bfree>
 8006814:	9b07      	ldr	r3, [sp, #28]
 8006816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006818:	9d04      	ldr	r5, [sp, #16]
 800681a:	ea43 0102 	orr.w	r1, r3, r2
 800681e:	9b06      	ldr	r3, [sp, #24]
 8006820:	4319      	orrs	r1, r3
 8006822:	d110      	bne.n	8006846 <_dtoa_r+0xa7e>
 8006824:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006828:	d029      	beq.n	800687e <_dtoa_r+0xab6>
 800682a:	9b05      	ldr	r3, [sp, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	dd02      	ble.n	8006836 <_dtoa_r+0xa6e>
 8006830:	9b02      	ldr	r3, [sp, #8]
 8006832:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006836:	9b01      	ldr	r3, [sp, #4]
 8006838:	f883 9000 	strb.w	r9, [r3]
 800683c:	e774      	b.n	8006728 <_dtoa_r+0x960>
 800683e:	4638      	mov	r0, r7
 8006840:	e7ba      	b.n	80067b8 <_dtoa_r+0x9f0>
 8006842:	2201      	movs	r2, #1
 8006844:	e7e1      	b.n	800680a <_dtoa_r+0xa42>
 8006846:	9b05      	ldr	r3, [sp, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	db04      	blt.n	8006856 <_dtoa_r+0xa8e>
 800684c:	9907      	ldr	r1, [sp, #28]
 800684e:	430b      	orrs	r3, r1
 8006850:	9906      	ldr	r1, [sp, #24]
 8006852:	430b      	orrs	r3, r1
 8006854:	d120      	bne.n	8006898 <_dtoa_r+0xad0>
 8006856:	2a00      	cmp	r2, #0
 8006858:	dded      	ble.n	8006836 <_dtoa_r+0xa6e>
 800685a:	4651      	mov	r1, sl
 800685c:	2201      	movs	r2, #1
 800685e:	4620      	mov	r0, r4
 8006860:	f000 fbb4 	bl	8006fcc <__lshift>
 8006864:	4631      	mov	r1, r6
 8006866:	4682      	mov	sl, r0
 8006868:	f000 fc1c 	bl	80070a4 <__mcmp>
 800686c:	2800      	cmp	r0, #0
 800686e:	dc03      	bgt.n	8006878 <_dtoa_r+0xab0>
 8006870:	d1e1      	bne.n	8006836 <_dtoa_r+0xa6e>
 8006872:	f019 0f01 	tst.w	r9, #1
 8006876:	d0de      	beq.n	8006836 <_dtoa_r+0xa6e>
 8006878:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800687c:	d1d8      	bne.n	8006830 <_dtoa_r+0xa68>
 800687e:	9a01      	ldr	r2, [sp, #4]
 8006880:	2339      	movs	r3, #57	; 0x39
 8006882:	7013      	strb	r3, [r2, #0]
 8006884:	462b      	mov	r3, r5
 8006886:	461d      	mov	r5, r3
 8006888:	3b01      	subs	r3, #1
 800688a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800688e:	2a39      	cmp	r2, #57	; 0x39
 8006890:	d06c      	beq.n	800696c <_dtoa_r+0xba4>
 8006892:	3201      	adds	r2, #1
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	e747      	b.n	8006728 <_dtoa_r+0x960>
 8006898:	2a00      	cmp	r2, #0
 800689a:	dd07      	ble.n	80068ac <_dtoa_r+0xae4>
 800689c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80068a0:	d0ed      	beq.n	800687e <_dtoa_r+0xab6>
 80068a2:	9a01      	ldr	r2, [sp, #4]
 80068a4:	f109 0301 	add.w	r3, r9, #1
 80068a8:	7013      	strb	r3, [r2, #0]
 80068aa:	e73d      	b.n	8006728 <_dtoa_r+0x960>
 80068ac:	9b04      	ldr	r3, [sp, #16]
 80068ae:	9a08      	ldr	r2, [sp, #32]
 80068b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d043      	beq.n	8006940 <_dtoa_r+0xb78>
 80068b8:	4651      	mov	r1, sl
 80068ba:	2300      	movs	r3, #0
 80068bc:	220a      	movs	r2, #10
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 f9d6 	bl	8006c70 <__multadd>
 80068c4:	45b8      	cmp	r8, r7
 80068c6:	4682      	mov	sl, r0
 80068c8:	f04f 0300 	mov.w	r3, #0
 80068cc:	f04f 020a 	mov.w	r2, #10
 80068d0:	4641      	mov	r1, r8
 80068d2:	4620      	mov	r0, r4
 80068d4:	d107      	bne.n	80068e6 <_dtoa_r+0xb1e>
 80068d6:	f000 f9cb 	bl	8006c70 <__multadd>
 80068da:	4680      	mov	r8, r0
 80068dc:	4607      	mov	r7, r0
 80068de:	9b04      	ldr	r3, [sp, #16]
 80068e0:	3301      	adds	r3, #1
 80068e2:	9304      	str	r3, [sp, #16]
 80068e4:	e775      	b.n	80067d2 <_dtoa_r+0xa0a>
 80068e6:	f000 f9c3 	bl	8006c70 <__multadd>
 80068ea:	4639      	mov	r1, r7
 80068ec:	4680      	mov	r8, r0
 80068ee:	2300      	movs	r3, #0
 80068f0:	220a      	movs	r2, #10
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 f9bc 	bl	8006c70 <__multadd>
 80068f8:	4607      	mov	r7, r0
 80068fa:	e7f0      	b.n	80068de <_dtoa_r+0xb16>
 80068fc:	9b04      	ldr	r3, [sp, #16]
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	9d00      	ldr	r5, [sp, #0]
 8006902:	4631      	mov	r1, r6
 8006904:	4650      	mov	r0, sl
 8006906:	f7ff f9d5 	bl	8005cb4 <quorem>
 800690a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800690e:	9b00      	ldr	r3, [sp, #0]
 8006910:	f805 9b01 	strb.w	r9, [r5], #1
 8006914:	1aea      	subs	r2, r5, r3
 8006916:	9b01      	ldr	r3, [sp, #4]
 8006918:	4293      	cmp	r3, r2
 800691a:	dd07      	ble.n	800692c <_dtoa_r+0xb64>
 800691c:	4651      	mov	r1, sl
 800691e:	2300      	movs	r3, #0
 8006920:	220a      	movs	r2, #10
 8006922:	4620      	mov	r0, r4
 8006924:	f000 f9a4 	bl	8006c70 <__multadd>
 8006928:	4682      	mov	sl, r0
 800692a:	e7ea      	b.n	8006902 <_dtoa_r+0xb3a>
 800692c:	9b01      	ldr	r3, [sp, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	bfc8      	it	gt
 8006932:	461d      	movgt	r5, r3
 8006934:	9b00      	ldr	r3, [sp, #0]
 8006936:	bfd8      	it	le
 8006938:	2501      	movle	r5, #1
 800693a:	441d      	add	r5, r3
 800693c:	f04f 0800 	mov.w	r8, #0
 8006940:	4651      	mov	r1, sl
 8006942:	2201      	movs	r2, #1
 8006944:	4620      	mov	r0, r4
 8006946:	f000 fb41 	bl	8006fcc <__lshift>
 800694a:	4631      	mov	r1, r6
 800694c:	4682      	mov	sl, r0
 800694e:	f000 fba9 	bl	80070a4 <__mcmp>
 8006952:	2800      	cmp	r0, #0
 8006954:	dc96      	bgt.n	8006884 <_dtoa_r+0xabc>
 8006956:	d102      	bne.n	800695e <_dtoa_r+0xb96>
 8006958:	f019 0f01 	tst.w	r9, #1
 800695c:	d192      	bne.n	8006884 <_dtoa_r+0xabc>
 800695e:	462b      	mov	r3, r5
 8006960:	461d      	mov	r5, r3
 8006962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006966:	2a30      	cmp	r2, #48	; 0x30
 8006968:	d0fa      	beq.n	8006960 <_dtoa_r+0xb98>
 800696a:	e6dd      	b.n	8006728 <_dtoa_r+0x960>
 800696c:	9a00      	ldr	r2, [sp, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	d189      	bne.n	8006886 <_dtoa_r+0xabe>
 8006972:	f10b 0b01 	add.w	fp, fp, #1
 8006976:	2331      	movs	r3, #49	; 0x31
 8006978:	e796      	b.n	80068a8 <_dtoa_r+0xae0>
 800697a:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <_dtoa_r+0xbdc>)
 800697c:	f7ff ba99 	b.w	8005eb2 <_dtoa_r+0xea>
 8006980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006982:	2b00      	cmp	r3, #0
 8006984:	f47f aa6d 	bne.w	8005e62 <_dtoa_r+0x9a>
 8006988:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <_dtoa_r+0xbe0>)
 800698a:	f7ff ba92 	b.w	8005eb2 <_dtoa_r+0xea>
 800698e:	9b01      	ldr	r3, [sp, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	dcb5      	bgt.n	8006900 <_dtoa_r+0xb38>
 8006994:	9b07      	ldr	r3, [sp, #28]
 8006996:	2b02      	cmp	r3, #2
 8006998:	f73f aeb1 	bgt.w	80066fe <_dtoa_r+0x936>
 800699c:	e7b0      	b.n	8006900 <_dtoa_r+0xb38>
 800699e:	bf00      	nop
 80069a0:	08007c3b 	.word	0x08007c3b
 80069a4:	08007b9b 	.word	0x08007b9b
 80069a8:	08007bbf 	.word	0x08007bbf

080069ac <_free_r>:
 80069ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069ae:	2900      	cmp	r1, #0
 80069b0:	d044      	beq.n	8006a3c <_free_r+0x90>
 80069b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b6:	9001      	str	r0, [sp, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f1a1 0404 	sub.w	r4, r1, #4
 80069be:	bfb8      	it	lt
 80069c0:	18e4      	addlt	r4, r4, r3
 80069c2:	f000 f8e7 	bl	8006b94 <__malloc_lock>
 80069c6:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <_free_r+0x94>)
 80069c8:	9801      	ldr	r0, [sp, #4]
 80069ca:	6813      	ldr	r3, [r2, #0]
 80069cc:	b933      	cbnz	r3, 80069dc <_free_r+0x30>
 80069ce:	6063      	str	r3, [r4, #4]
 80069d0:	6014      	str	r4, [r2, #0]
 80069d2:	b003      	add	sp, #12
 80069d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069d8:	f000 b8e2 	b.w	8006ba0 <__malloc_unlock>
 80069dc:	42a3      	cmp	r3, r4
 80069de:	d908      	bls.n	80069f2 <_free_r+0x46>
 80069e0:	6825      	ldr	r5, [r4, #0]
 80069e2:	1961      	adds	r1, r4, r5
 80069e4:	428b      	cmp	r3, r1
 80069e6:	bf01      	itttt	eq
 80069e8:	6819      	ldreq	r1, [r3, #0]
 80069ea:	685b      	ldreq	r3, [r3, #4]
 80069ec:	1949      	addeq	r1, r1, r5
 80069ee:	6021      	streq	r1, [r4, #0]
 80069f0:	e7ed      	b.n	80069ce <_free_r+0x22>
 80069f2:	461a      	mov	r2, r3
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	b10b      	cbz	r3, 80069fc <_free_r+0x50>
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	d9fa      	bls.n	80069f2 <_free_r+0x46>
 80069fc:	6811      	ldr	r1, [r2, #0]
 80069fe:	1855      	adds	r5, r2, r1
 8006a00:	42a5      	cmp	r5, r4
 8006a02:	d10b      	bne.n	8006a1c <_free_r+0x70>
 8006a04:	6824      	ldr	r4, [r4, #0]
 8006a06:	4421      	add	r1, r4
 8006a08:	1854      	adds	r4, r2, r1
 8006a0a:	42a3      	cmp	r3, r4
 8006a0c:	6011      	str	r1, [r2, #0]
 8006a0e:	d1e0      	bne.n	80069d2 <_free_r+0x26>
 8006a10:	681c      	ldr	r4, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	6053      	str	r3, [r2, #4]
 8006a16:	440c      	add	r4, r1
 8006a18:	6014      	str	r4, [r2, #0]
 8006a1a:	e7da      	b.n	80069d2 <_free_r+0x26>
 8006a1c:	d902      	bls.n	8006a24 <_free_r+0x78>
 8006a1e:	230c      	movs	r3, #12
 8006a20:	6003      	str	r3, [r0, #0]
 8006a22:	e7d6      	b.n	80069d2 <_free_r+0x26>
 8006a24:	6825      	ldr	r5, [r4, #0]
 8006a26:	1961      	adds	r1, r4, r5
 8006a28:	428b      	cmp	r3, r1
 8006a2a:	bf04      	itt	eq
 8006a2c:	6819      	ldreq	r1, [r3, #0]
 8006a2e:	685b      	ldreq	r3, [r3, #4]
 8006a30:	6063      	str	r3, [r4, #4]
 8006a32:	bf04      	itt	eq
 8006a34:	1949      	addeq	r1, r1, r5
 8006a36:	6021      	streq	r1, [r4, #0]
 8006a38:	6054      	str	r4, [r2, #4]
 8006a3a:	e7ca      	b.n	80069d2 <_free_r+0x26>
 8006a3c:	b003      	add	sp, #12
 8006a3e:	bd30      	pop	{r4, r5, pc}
 8006a40:	20000368 	.word	0x20000368

08006a44 <malloc>:
 8006a44:	4b02      	ldr	r3, [pc, #8]	; (8006a50 <malloc+0xc>)
 8006a46:	4601      	mov	r1, r0
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	f000 b823 	b.w	8006a94 <_malloc_r>
 8006a4e:	bf00      	nop
 8006a50:	2000005c 	.word	0x2000005c

08006a54 <sbrk_aligned>:
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	4e0e      	ldr	r6, [pc, #56]	; (8006a90 <sbrk_aligned+0x3c>)
 8006a58:	460c      	mov	r4, r1
 8006a5a:	6831      	ldr	r1, [r6, #0]
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	b911      	cbnz	r1, 8006a66 <sbrk_aligned+0x12>
 8006a60:	f000 fe96 	bl	8007790 <_sbrk_r>
 8006a64:	6030      	str	r0, [r6, #0]
 8006a66:	4621      	mov	r1, r4
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f000 fe91 	bl	8007790 <_sbrk_r>
 8006a6e:	1c43      	adds	r3, r0, #1
 8006a70:	d00a      	beq.n	8006a88 <sbrk_aligned+0x34>
 8006a72:	1cc4      	adds	r4, r0, #3
 8006a74:	f024 0403 	bic.w	r4, r4, #3
 8006a78:	42a0      	cmp	r0, r4
 8006a7a:	d007      	beq.n	8006a8c <sbrk_aligned+0x38>
 8006a7c:	1a21      	subs	r1, r4, r0
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 fe86 	bl	8007790 <_sbrk_r>
 8006a84:	3001      	adds	r0, #1
 8006a86:	d101      	bne.n	8006a8c <sbrk_aligned+0x38>
 8006a88:	f04f 34ff 	mov.w	r4, #4294967295
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	2000036c 	.word	0x2000036c

08006a94 <_malloc_r>:
 8006a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a98:	1ccd      	adds	r5, r1, #3
 8006a9a:	f025 0503 	bic.w	r5, r5, #3
 8006a9e:	3508      	adds	r5, #8
 8006aa0:	2d0c      	cmp	r5, #12
 8006aa2:	bf38      	it	cc
 8006aa4:	250c      	movcc	r5, #12
 8006aa6:	2d00      	cmp	r5, #0
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	db01      	blt.n	8006ab0 <_malloc_r+0x1c>
 8006aac:	42a9      	cmp	r1, r5
 8006aae:	d905      	bls.n	8006abc <_malloc_r+0x28>
 8006ab0:	230c      	movs	r3, #12
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	2600      	movs	r6, #0
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006abc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b90 <_malloc_r+0xfc>
 8006ac0:	f000 f868 	bl	8006b94 <__malloc_lock>
 8006ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ac8:	461c      	mov	r4, r3
 8006aca:	bb5c      	cbnz	r4, 8006b24 <_malloc_r+0x90>
 8006acc:	4629      	mov	r1, r5
 8006ace:	4638      	mov	r0, r7
 8006ad0:	f7ff ffc0 	bl	8006a54 <sbrk_aligned>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	d155      	bne.n	8006b86 <_malloc_r+0xf2>
 8006ada:	f8d8 4000 	ldr.w	r4, [r8]
 8006ade:	4626      	mov	r6, r4
 8006ae0:	2e00      	cmp	r6, #0
 8006ae2:	d145      	bne.n	8006b70 <_malloc_r+0xdc>
 8006ae4:	2c00      	cmp	r4, #0
 8006ae6:	d048      	beq.n	8006b7a <_malloc_r+0xe6>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	4631      	mov	r1, r6
 8006aec:	4638      	mov	r0, r7
 8006aee:	eb04 0903 	add.w	r9, r4, r3
 8006af2:	f000 fe4d 	bl	8007790 <_sbrk_r>
 8006af6:	4581      	cmp	r9, r0
 8006af8:	d13f      	bne.n	8006b7a <_malloc_r+0xe6>
 8006afa:	6821      	ldr	r1, [r4, #0]
 8006afc:	1a6d      	subs	r5, r5, r1
 8006afe:	4629      	mov	r1, r5
 8006b00:	4638      	mov	r0, r7
 8006b02:	f7ff ffa7 	bl	8006a54 <sbrk_aligned>
 8006b06:	3001      	adds	r0, #1
 8006b08:	d037      	beq.n	8006b7a <_malloc_r+0xe6>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	442b      	add	r3, r5
 8006b0e:	6023      	str	r3, [r4, #0]
 8006b10:	f8d8 3000 	ldr.w	r3, [r8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d038      	beq.n	8006b8a <_malloc_r+0xf6>
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	42a2      	cmp	r2, r4
 8006b1c:	d12b      	bne.n	8006b76 <_malloc_r+0xe2>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	605a      	str	r2, [r3, #4]
 8006b22:	e00f      	b.n	8006b44 <_malloc_r+0xb0>
 8006b24:	6822      	ldr	r2, [r4, #0]
 8006b26:	1b52      	subs	r2, r2, r5
 8006b28:	d41f      	bmi.n	8006b6a <_malloc_r+0xd6>
 8006b2a:	2a0b      	cmp	r2, #11
 8006b2c:	d917      	bls.n	8006b5e <_malloc_r+0xca>
 8006b2e:	1961      	adds	r1, r4, r5
 8006b30:	42a3      	cmp	r3, r4
 8006b32:	6025      	str	r5, [r4, #0]
 8006b34:	bf18      	it	ne
 8006b36:	6059      	strne	r1, [r3, #4]
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	bf08      	it	eq
 8006b3c:	f8c8 1000 	streq.w	r1, [r8]
 8006b40:	5162      	str	r2, [r4, r5]
 8006b42:	604b      	str	r3, [r1, #4]
 8006b44:	4638      	mov	r0, r7
 8006b46:	f104 060b 	add.w	r6, r4, #11
 8006b4a:	f000 f829 	bl	8006ba0 <__malloc_unlock>
 8006b4e:	f026 0607 	bic.w	r6, r6, #7
 8006b52:	1d23      	adds	r3, r4, #4
 8006b54:	1af2      	subs	r2, r6, r3
 8006b56:	d0ae      	beq.n	8006ab6 <_malloc_r+0x22>
 8006b58:	1b9b      	subs	r3, r3, r6
 8006b5a:	50a3      	str	r3, [r4, r2]
 8006b5c:	e7ab      	b.n	8006ab6 <_malloc_r+0x22>
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	6862      	ldr	r2, [r4, #4]
 8006b62:	d1dd      	bne.n	8006b20 <_malloc_r+0x8c>
 8006b64:	f8c8 2000 	str.w	r2, [r8]
 8006b68:	e7ec      	b.n	8006b44 <_malloc_r+0xb0>
 8006b6a:	4623      	mov	r3, r4
 8006b6c:	6864      	ldr	r4, [r4, #4]
 8006b6e:	e7ac      	b.n	8006aca <_malloc_r+0x36>
 8006b70:	4634      	mov	r4, r6
 8006b72:	6876      	ldr	r6, [r6, #4]
 8006b74:	e7b4      	b.n	8006ae0 <_malloc_r+0x4c>
 8006b76:	4613      	mov	r3, r2
 8006b78:	e7cc      	b.n	8006b14 <_malloc_r+0x80>
 8006b7a:	230c      	movs	r3, #12
 8006b7c:	603b      	str	r3, [r7, #0]
 8006b7e:	4638      	mov	r0, r7
 8006b80:	f000 f80e 	bl	8006ba0 <__malloc_unlock>
 8006b84:	e797      	b.n	8006ab6 <_malloc_r+0x22>
 8006b86:	6025      	str	r5, [r4, #0]
 8006b88:	e7dc      	b.n	8006b44 <_malloc_r+0xb0>
 8006b8a:	605b      	str	r3, [r3, #4]
 8006b8c:	deff      	udf	#255	; 0xff
 8006b8e:	bf00      	nop
 8006b90:	20000368 	.word	0x20000368

08006b94 <__malloc_lock>:
 8006b94:	4801      	ldr	r0, [pc, #4]	; (8006b9c <__malloc_lock+0x8>)
 8006b96:	f7ff b88b 	b.w	8005cb0 <__retarget_lock_acquire_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	20000364 	.word	0x20000364

08006ba0 <__malloc_unlock>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	; (8006ba8 <__malloc_unlock+0x8>)
 8006ba2:	f7ff b886 	b.w	8005cb2 <__retarget_lock_release_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	20000364 	.word	0x20000364

08006bac <_Balloc>:
 8006bac:	b570      	push	{r4, r5, r6, lr}
 8006bae:	69c6      	ldr	r6, [r0, #28]
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	460d      	mov	r5, r1
 8006bb4:	b976      	cbnz	r6, 8006bd4 <_Balloc+0x28>
 8006bb6:	2010      	movs	r0, #16
 8006bb8:	f7ff ff44 	bl	8006a44 <malloc>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	61e0      	str	r0, [r4, #28]
 8006bc0:	b920      	cbnz	r0, 8006bcc <_Balloc+0x20>
 8006bc2:	4b18      	ldr	r3, [pc, #96]	; (8006c24 <_Balloc+0x78>)
 8006bc4:	4818      	ldr	r0, [pc, #96]	; (8006c28 <_Balloc+0x7c>)
 8006bc6:	216b      	movs	r1, #107	; 0x6b
 8006bc8:	f000 fe00 	bl	80077cc <__assert_func>
 8006bcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bd0:	6006      	str	r6, [r0, #0]
 8006bd2:	60c6      	str	r6, [r0, #12]
 8006bd4:	69e6      	ldr	r6, [r4, #28]
 8006bd6:	68f3      	ldr	r3, [r6, #12]
 8006bd8:	b183      	cbz	r3, 8006bfc <_Balloc+0x50>
 8006bda:	69e3      	ldr	r3, [r4, #28]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006be2:	b9b8      	cbnz	r0, 8006c14 <_Balloc+0x68>
 8006be4:	2101      	movs	r1, #1
 8006be6:	fa01 f605 	lsl.w	r6, r1, r5
 8006bea:	1d72      	adds	r2, r6, #5
 8006bec:	0092      	lsls	r2, r2, #2
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 fe0a 	bl	8007808 <_calloc_r>
 8006bf4:	b160      	cbz	r0, 8006c10 <_Balloc+0x64>
 8006bf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bfa:	e00e      	b.n	8006c1a <_Balloc+0x6e>
 8006bfc:	2221      	movs	r2, #33	; 0x21
 8006bfe:	2104      	movs	r1, #4
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 fe01 	bl	8007808 <_calloc_r>
 8006c06:	69e3      	ldr	r3, [r4, #28]
 8006c08:	60f0      	str	r0, [r6, #12]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e4      	bne.n	8006bda <_Balloc+0x2e>
 8006c10:	2000      	movs	r0, #0
 8006c12:	bd70      	pop	{r4, r5, r6, pc}
 8006c14:	6802      	ldr	r2, [r0, #0]
 8006c16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c20:	e7f7      	b.n	8006c12 <_Balloc+0x66>
 8006c22:	bf00      	nop
 8006c24:	08007bcc 	.word	0x08007bcc
 8006c28:	08007c4c 	.word	0x08007c4c

08006c2c <_Bfree>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	69c6      	ldr	r6, [r0, #28]
 8006c30:	4605      	mov	r5, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	b976      	cbnz	r6, 8006c54 <_Bfree+0x28>
 8006c36:	2010      	movs	r0, #16
 8006c38:	f7ff ff04 	bl	8006a44 <malloc>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	61e8      	str	r0, [r5, #28]
 8006c40:	b920      	cbnz	r0, 8006c4c <_Bfree+0x20>
 8006c42:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <_Bfree+0x3c>)
 8006c44:	4809      	ldr	r0, [pc, #36]	; (8006c6c <_Bfree+0x40>)
 8006c46:	218f      	movs	r1, #143	; 0x8f
 8006c48:	f000 fdc0 	bl	80077cc <__assert_func>
 8006c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c50:	6006      	str	r6, [r0, #0]
 8006c52:	60c6      	str	r6, [r0, #12]
 8006c54:	b13c      	cbz	r4, 8006c66 <_Bfree+0x3a>
 8006c56:	69eb      	ldr	r3, [r5, #28]
 8006c58:	6862      	ldr	r2, [r4, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c60:	6021      	str	r1, [r4, #0]
 8006c62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c66:	bd70      	pop	{r4, r5, r6, pc}
 8006c68:	08007bcc 	.word	0x08007bcc
 8006c6c:	08007c4c 	.word	0x08007c4c

08006c70 <__multadd>:
 8006c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c74:	690d      	ldr	r5, [r1, #16]
 8006c76:	4607      	mov	r7, r0
 8006c78:	460c      	mov	r4, r1
 8006c7a:	461e      	mov	r6, r3
 8006c7c:	f101 0c14 	add.w	ip, r1, #20
 8006c80:	2000      	movs	r0, #0
 8006c82:	f8dc 3000 	ldr.w	r3, [ip]
 8006c86:	b299      	uxth	r1, r3
 8006c88:	fb02 6101 	mla	r1, r2, r1, r6
 8006c8c:	0c1e      	lsrs	r6, r3, #16
 8006c8e:	0c0b      	lsrs	r3, r1, #16
 8006c90:	fb02 3306 	mla	r3, r2, r6, r3
 8006c94:	b289      	uxth	r1, r1
 8006c96:	3001      	adds	r0, #1
 8006c98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c9c:	4285      	cmp	r5, r0
 8006c9e:	f84c 1b04 	str.w	r1, [ip], #4
 8006ca2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ca6:	dcec      	bgt.n	8006c82 <__multadd+0x12>
 8006ca8:	b30e      	cbz	r6, 8006cee <__multadd+0x7e>
 8006caa:	68a3      	ldr	r3, [r4, #8]
 8006cac:	42ab      	cmp	r3, r5
 8006cae:	dc19      	bgt.n	8006ce4 <__multadd+0x74>
 8006cb0:	6861      	ldr	r1, [r4, #4]
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	3101      	adds	r1, #1
 8006cb6:	f7ff ff79 	bl	8006bac <_Balloc>
 8006cba:	4680      	mov	r8, r0
 8006cbc:	b928      	cbnz	r0, 8006cca <__multadd+0x5a>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	; (8006cf4 <__multadd+0x84>)
 8006cc2:	480d      	ldr	r0, [pc, #52]	; (8006cf8 <__multadd+0x88>)
 8006cc4:	21ba      	movs	r1, #186	; 0xba
 8006cc6:	f000 fd81 	bl	80077cc <__assert_func>
 8006cca:	6922      	ldr	r2, [r4, #16]
 8006ccc:	3202      	adds	r2, #2
 8006cce:	f104 010c 	add.w	r1, r4, #12
 8006cd2:	0092      	lsls	r2, r2, #2
 8006cd4:	300c      	adds	r0, #12
 8006cd6:	f000 fd6b 	bl	80077b0 <memcpy>
 8006cda:	4621      	mov	r1, r4
 8006cdc:	4638      	mov	r0, r7
 8006cde:	f7ff ffa5 	bl	8006c2c <_Bfree>
 8006ce2:	4644      	mov	r4, r8
 8006ce4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ce8:	3501      	adds	r5, #1
 8006cea:	615e      	str	r6, [r3, #20]
 8006cec:	6125      	str	r5, [r4, #16]
 8006cee:	4620      	mov	r0, r4
 8006cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cf4:	08007c3b 	.word	0x08007c3b
 8006cf8:	08007c4c 	.word	0x08007c4c

08006cfc <__hi0bits>:
 8006cfc:	0c03      	lsrs	r3, r0, #16
 8006cfe:	041b      	lsls	r3, r3, #16
 8006d00:	b9d3      	cbnz	r3, 8006d38 <__hi0bits+0x3c>
 8006d02:	0400      	lsls	r0, r0, #16
 8006d04:	2310      	movs	r3, #16
 8006d06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d0a:	bf04      	itt	eq
 8006d0c:	0200      	lsleq	r0, r0, #8
 8006d0e:	3308      	addeq	r3, #8
 8006d10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d14:	bf04      	itt	eq
 8006d16:	0100      	lsleq	r0, r0, #4
 8006d18:	3304      	addeq	r3, #4
 8006d1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d1e:	bf04      	itt	eq
 8006d20:	0080      	lsleq	r0, r0, #2
 8006d22:	3302      	addeq	r3, #2
 8006d24:	2800      	cmp	r0, #0
 8006d26:	db05      	blt.n	8006d34 <__hi0bits+0x38>
 8006d28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d2c:	f103 0301 	add.w	r3, r3, #1
 8006d30:	bf08      	it	eq
 8006d32:	2320      	moveq	r3, #32
 8006d34:	4618      	mov	r0, r3
 8006d36:	4770      	bx	lr
 8006d38:	2300      	movs	r3, #0
 8006d3a:	e7e4      	b.n	8006d06 <__hi0bits+0xa>

08006d3c <__lo0bits>:
 8006d3c:	6803      	ldr	r3, [r0, #0]
 8006d3e:	f013 0207 	ands.w	r2, r3, #7
 8006d42:	d00c      	beq.n	8006d5e <__lo0bits+0x22>
 8006d44:	07d9      	lsls	r1, r3, #31
 8006d46:	d422      	bmi.n	8006d8e <__lo0bits+0x52>
 8006d48:	079a      	lsls	r2, r3, #30
 8006d4a:	bf49      	itett	mi
 8006d4c:	085b      	lsrmi	r3, r3, #1
 8006d4e:	089b      	lsrpl	r3, r3, #2
 8006d50:	6003      	strmi	r3, [r0, #0]
 8006d52:	2201      	movmi	r2, #1
 8006d54:	bf5c      	itt	pl
 8006d56:	6003      	strpl	r3, [r0, #0]
 8006d58:	2202      	movpl	r2, #2
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4770      	bx	lr
 8006d5e:	b299      	uxth	r1, r3
 8006d60:	b909      	cbnz	r1, 8006d66 <__lo0bits+0x2a>
 8006d62:	0c1b      	lsrs	r3, r3, #16
 8006d64:	2210      	movs	r2, #16
 8006d66:	b2d9      	uxtb	r1, r3
 8006d68:	b909      	cbnz	r1, 8006d6e <__lo0bits+0x32>
 8006d6a:	3208      	adds	r2, #8
 8006d6c:	0a1b      	lsrs	r3, r3, #8
 8006d6e:	0719      	lsls	r1, r3, #28
 8006d70:	bf04      	itt	eq
 8006d72:	091b      	lsreq	r3, r3, #4
 8006d74:	3204      	addeq	r2, #4
 8006d76:	0799      	lsls	r1, r3, #30
 8006d78:	bf04      	itt	eq
 8006d7a:	089b      	lsreq	r3, r3, #2
 8006d7c:	3202      	addeq	r2, #2
 8006d7e:	07d9      	lsls	r1, r3, #31
 8006d80:	d403      	bmi.n	8006d8a <__lo0bits+0x4e>
 8006d82:	085b      	lsrs	r3, r3, #1
 8006d84:	f102 0201 	add.w	r2, r2, #1
 8006d88:	d003      	beq.n	8006d92 <__lo0bits+0x56>
 8006d8a:	6003      	str	r3, [r0, #0]
 8006d8c:	e7e5      	b.n	8006d5a <__lo0bits+0x1e>
 8006d8e:	2200      	movs	r2, #0
 8006d90:	e7e3      	b.n	8006d5a <__lo0bits+0x1e>
 8006d92:	2220      	movs	r2, #32
 8006d94:	e7e1      	b.n	8006d5a <__lo0bits+0x1e>
	...

08006d98 <__i2b>:
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	f7ff ff05 	bl	8006bac <_Balloc>
 8006da2:	4602      	mov	r2, r0
 8006da4:	b928      	cbnz	r0, 8006db2 <__i2b+0x1a>
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <__i2b+0x24>)
 8006da8:	4805      	ldr	r0, [pc, #20]	; (8006dc0 <__i2b+0x28>)
 8006daa:	f240 1145 	movw	r1, #325	; 0x145
 8006dae:	f000 fd0d 	bl	80077cc <__assert_func>
 8006db2:	2301      	movs	r3, #1
 8006db4:	6144      	str	r4, [r0, #20]
 8006db6:	6103      	str	r3, [r0, #16]
 8006db8:	bd10      	pop	{r4, pc}
 8006dba:	bf00      	nop
 8006dbc:	08007c3b 	.word	0x08007c3b
 8006dc0:	08007c4c 	.word	0x08007c4c

08006dc4 <__multiply>:
 8006dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	4691      	mov	r9, r2
 8006dca:	690a      	ldr	r2, [r1, #16]
 8006dcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	bfb8      	it	lt
 8006dd4:	460b      	movlt	r3, r1
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	bfbc      	itt	lt
 8006dda:	464c      	movlt	r4, r9
 8006ddc:	4699      	movlt	r9, r3
 8006dde:	6927      	ldr	r7, [r4, #16]
 8006de0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006de4:	68a3      	ldr	r3, [r4, #8]
 8006de6:	6861      	ldr	r1, [r4, #4]
 8006de8:	eb07 060a 	add.w	r6, r7, sl
 8006dec:	42b3      	cmp	r3, r6
 8006dee:	b085      	sub	sp, #20
 8006df0:	bfb8      	it	lt
 8006df2:	3101      	addlt	r1, #1
 8006df4:	f7ff feda 	bl	8006bac <_Balloc>
 8006df8:	b930      	cbnz	r0, 8006e08 <__multiply+0x44>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	4b44      	ldr	r3, [pc, #272]	; (8006f10 <__multiply+0x14c>)
 8006dfe:	4845      	ldr	r0, [pc, #276]	; (8006f14 <__multiply+0x150>)
 8006e00:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006e04:	f000 fce2 	bl	80077cc <__assert_func>
 8006e08:	f100 0514 	add.w	r5, r0, #20
 8006e0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e10:	462b      	mov	r3, r5
 8006e12:	2200      	movs	r2, #0
 8006e14:	4543      	cmp	r3, r8
 8006e16:	d321      	bcc.n	8006e5c <__multiply+0x98>
 8006e18:	f104 0314 	add.w	r3, r4, #20
 8006e1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e20:	f109 0314 	add.w	r3, r9, #20
 8006e24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e28:	9202      	str	r2, [sp, #8]
 8006e2a:	1b3a      	subs	r2, r7, r4
 8006e2c:	3a15      	subs	r2, #21
 8006e2e:	f022 0203 	bic.w	r2, r2, #3
 8006e32:	3204      	adds	r2, #4
 8006e34:	f104 0115 	add.w	r1, r4, #21
 8006e38:	428f      	cmp	r7, r1
 8006e3a:	bf38      	it	cc
 8006e3c:	2204      	movcc	r2, #4
 8006e3e:	9201      	str	r2, [sp, #4]
 8006e40:	9a02      	ldr	r2, [sp, #8]
 8006e42:	9303      	str	r3, [sp, #12]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d80c      	bhi.n	8006e62 <__multiply+0x9e>
 8006e48:	2e00      	cmp	r6, #0
 8006e4a:	dd03      	ble.n	8006e54 <__multiply+0x90>
 8006e4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d05b      	beq.n	8006f0c <__multiply+0x148>
 8006e54:	6106      	str	r6, [r0, #16]
 8006e56:	b005      	add	sp, #20
 8006e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5c:	f843 2b04 	str.w	r2, [r3], #4
 8006e60:	e7d8      	b.n	8006e14 <__multiply+0x50>
 8006e62:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e66:	f1ba 0f00 	cmp.w	sl, #0
 8006e6a:	d024      	beq.n	8006eb6 <__multiply+0xf2>
 8006e6c:	f104 0e14 	add.w	lr, r4, #20
 8006e70:	46a9      	mov	r9, r5
 8006e72:	f04f 0c00 	mov.w	ip, #0
 8006e76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e7a:	f8d9 1000 	ldr.w	r1, [r9]
 8006e7e:	fa1f fb82 	uxth.w	fp, r2
 8006e82:	b289      	uxth	r1, r1
 8006e84:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006e8c:	f8d9 2000 	ldr.w	r2, [r9]
 8006e90:	4461      	add	r1, ip
 8006e92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e96:	fb0a c20b 	mla	r2, sl, fp, ip
 8006e9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e9e:	b289      	uxth	r1, r1
 8006ea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ea4:	4577      	cmp	r7, lr
 8006ea6:	f849 1b04 	str.w	r1, [r9], #4
 8006eaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006eae:	d8e2      	bhi.n	8006e76 <__multiply+0xb2>
 8006eb0:	9a01      	ldr	r2, [sp, #4]
 8006eb2:	f845 c002 	str.w	ip, [r5, r2]
 8006eb6:	9a03      	ldr	r2, [sp, #12]
 8006eb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	f1b9 0f00 	cmp.w	r9, #0
 8006ec2:	d021      	beq.n	8006f08 <__multiply+0x144>
 8006ec4:	6829      	ldr	r1, [r5, #0]
 8006ec6:	f104 0c14 	add.w	ip, r4, #20
 8006eca:	46ae      	mov	lr, r5
 8006ecc:	f04f 0a00 	mov.w	sl, #0
 8006ed0:	f8bc b000 	ldrh.w	fp, [ip]
 8006ed4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ed8:	fb09 220b 	mla	r2, r9, fp, r2
 8006edc:	4452      	add	r2, sl
 8006ede:	b289      	uxth	r1, r1
 8006ee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ee4:	f84e 1b04 	str.w	r1, [lr], #4
 8006ee8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006eec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ef0:	f8be 1000 	ldrh.w	r1, [lr]
 8006ef4:	fb09 110a 	mla	r1, r9, sl, r1
 8006ef8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006efc:	4567      	cmp	r7, ip
 8006efe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f02:	d8e5      	bhi.n	8006ed0 <__multiply+0x10c>
 8006f04:	9a01      	ldr	r2, [sp, #4]
 8006f06:	50a9      	str	r1, [r5, r2]
 8006f08:	3504      	adds	r5, #4
 8006f0a:	e799      	b.n	8006e40 <__multiply+0x7c>
 8006f0c:	3e01      	subs	r6, #1
 8006f0e:	e79b      	b.n	8006e48 <__multiply+0x84>
 8006f10:	08007c3b 	.word	0x08007c3b
 8006f14:	08007c4c 	.word	0x08007c4c

08006f18 <__pow5mult>:
 8006f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f1c:	4615      	mov	r5, r2
 8006f1e:	f012 0203 	ands.w	r2, r2, #3
 8006f22:	4606      	mov	r6, r0
 8006f24:	460f      	mov	r7, r1
 8006f26:	d007      	beq.n	8006f38 <__pow5mult+0x20>
 8006f28:	4c25      	ldr	r4, [pc, #148]	; (8006fc0 <__pow5mult+0xa8>)
 8006f2a:	3a01      	subs	r2, #1
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f32:	f7ff fe9d 	bl	8006c70 <__multadd>
 8006f36:	4607      	mov	r7, r0
 8006f38:	10ad      	asrs	r5, r5, #2
 8006f3a:	d03d      	beq.n	8006fb8 <__pow5mult+0xa0>
 8006f3c:	69f4      	ldr	r4, [r6, #28]
 8006f3e:	b97c      	cbnz	r4, 8006f60 <__pow5mult+0x48>
 8006f40:	2010      	movs	r0, #16
 8006f42:	f7ff fd7f 	bl	8006a44 <malloc>
 8006f46:	4602      	mov	r2, r0
 8006f48:	61f0      	str	r0, [r6, #28]
 8006f4a:	b928      	cbnz	r0, 8006f58 <__pow5mult+0x40>
 8006f4c:	4b1d      	ldr	r3, [pc, #116]	; (8006fc4 <__pow5mult+0xac>)
 8006f4e:	481e      	ldr	r0, [pc, #120]	; (8006fc8 <__pow5mult+0xb0>)
 8006f50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006f54:	f000 fc3a 	bl	80077cc <__assert_func>
 8006f58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f5c:	6004      	str	r4, [r0, #0]
 8006f5e:	60c4      	str	r4, [r0, #12]
 8006f60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006f64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f68:	b94c      	cbnz	r4, 8006f7e <__pow5mult+0x66>
 8006f6a:	f240 2171 	movw	r1, #625	; 0x271
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f7ff ff12 	bl	8006d98 <__i2b>
 8006f74:	2300      	movs	r3, #0
 8006f76:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	6003      	str	r3, [r0, #0]
 8006f7e:	f04f 0900 	mov.w	r9, #0
 8006f82:	07eb      	lsls	r3, r5, #31
 8006f84:	d50a      	bpl.n	8006f9c <__pow5mult+0x84>
 8006f86:	4639      	mov	r1, r7
 8006f88:	4622      	mov	r2, r4
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f7ff ff1a 	bl	8006dc4 <__multiply>
 8006f90:	4639      	mov	r1, r7
 8006f92:	4680      	mov	r8, r0
 8006f94:	4630      	mov	r0, r6
 8006f96:	f7ff fe49 	bl	8006c2c <_Bfree>
 8006f9a:	4647      	mov	r7, r8
 8006f9c:	106d      	asrs	r5, r5, #1
 8006f9e:	d00b      	beq.n	8006fb8 <__pow5mult+0xa0>
 8006fa0:	6820      	ldr	r0, [r4, #0]
 8006fa2:	b938      	cbnz	r0, 8006fb4 <__pow5mult+0x9c>
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f7ff ff0b 	bl	8006dc4 <__multiply>
 8006fae:	6020      	str	r0, [r4, #0]
 8006fb0:	f8c0 9000 	str.w	r9, [r0]
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	e7e4      	b.n	8006f82 <__pow5mult+0x6a>
 8006fb8:	4638      	mov	r0, r7
 8006fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fbe:	bf00      	nop
 8006fc0:	08007d98 	.word	0x08007d98
 8006fc4:	08007bcc 	.word	0x08007bcc
 8006fc8:	08007c4c 	.word	0x08007c4c

08006fcc <__lshift>:
 8006fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	6849      	ldr	r1, [r1, #4]
 8006fd4:	6923      	ldr	r3, [r4, #16]
 8006fd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fda:	68a3      	ldr	r3, [r4, #8]
 8006fdc:	4607      	mov	r7, r0
 8006fde:	4691      	mov	r9, r2
 8006fe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fe4:	f108 0601 	add.w	r6, r8, #1
 8006fe8:	42b3      	cmp	r3, r6
 8006fea:	db0b      	blt.n	8007004 <__lshift+0x38>
 8006fec:	4638      	mov	r0, r7
 8006fee:	f7ff fddd 	bl	8006bac <_Balloc>
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	b948      	cbnz	r0, 800700a <__lshift+0x3e>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	4b28      	ldr	r3, [pc, #160]	; (800709c <__lshift+0xd0>)
 8006ffa:	4829      	ldr	r0, [pc, #164]	; (80070a0 <__lshift+0xd4>)
 8006ffc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007000:	f000 fbe4 	bl	80077cc <__assert_func>
 8007004:	3101      	adds	r1, #1
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	e7ee      	b.n	8006fe8 <__lshift+0x1c>
 800700a:	2300      	movs	r3, #0
 800700c:	f100 0114 	add.w	r1, r0, #20
 8007010:	f100 0210 	add.w	r2, r0, #16
 8007014:	4618      	mov	r0, r3
 8007016:	4553      	cmp	r3, sl
 8007018:	db33      	blt.n	8007082 <__lshift+0xb6>
 800701a:	6920      	ldr	r0, [r4, #16]
 800701c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007020:	f104 0314 	add.w	r3, r4, #20
 8007024:	f019 091f 	ands.w	r9, r9, #31
 8007028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800702c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007030:	d02b      	beq.n	800708a <__lshift+0xbe>
 8007032:	f1c9 0e20 	rsb	lr, r9, #32
 8007036:	468a      	mov	sl, r1
 8007038:	2200      	movs	r2, #0
 800703a:	6818      	ldr	r0, [r3, #0]
 800703c:	fa00 f009 	lsl.w	r0, r0, r9
 8007040:	4310      	orrs	r0, r2
 8007042:	f84a 0b04 	str.w	r0, [sl], #4
 8007046:	f853 2b04 	ldr.w	r2, [r3], #4
 800704a:	459c      	cmp	ip, r3
 800704c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007050:	d8f3      	bhi.n	800703a <__lshift+0x6e>
 8007052:	ebac 0304 	sub.w	r3, ip, r4
 8007056:	3b15      	subs	r3, #21
 8007058:	f023 0303 	bic.w	r3, r3, #3
 800705c:	3304      	adds	r3, #4
 800705e:	f104 0015 	add.w	r0, r4, #21
 8007062:	4584      	cmp	ip, r0
 8007064:	bf38      	it	cc
 8007066:	2304      	movcc	r3, #4
 8007068:	50ca      	str	r2, [r1, r3]
 800706a:	b10a      	cbz	r2, 8007070 <__lshift+0xa4>
 800706c:	f108 0602 	add.w	r6, r8, #2
 8007070:	3e01      	subs	r6, #1
 8007072:	4638      	mov	r0, r7
 8007074:	612e      	str	r6, [r5, #16]
 8007076:	4621      	mov	r1, r4
 8007078:	f7ff fdd8 	bl	8006c2c <_Bfree>
 800707c:	4628      	mov	r0, r5
 800707e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007082:	f842 0f04 	str.w	r0, [r2, #4]!
 8007086:	3301      	adds	r3, #1
 8007088:	e7c5      	b.n	8007016 <__lshift+0x4a>
 800708a:	3904      	subs	r1, #4
 800708c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007090:	f841 2f04 	str.w	r2, [r1, #4]!
 8007094:	459c      	cmp	ip, r3
 8007096:	d8f9      	bhi.n	800708c <__lshift+0xc0>
 8007098:	e7ea      	b.n	8007070 <__lshift+0xa4>
 800709a:	bf00      	nop
 800709c:	08007c3b 	.word	0x08007c3b
 80070a0:	08007c4c 	.word	0x08007c4c

080070a4 <__mcmp>:
 80070a4:	b530      	push	{r4, r5, lr}
 80070a6:	6902      	ldr	r2, [r0, #16]
 80070a8:	690c      	ldr	r4, [r1, #16]
 80070aa:	1b12      	subs	r2, r2, r4
 80070ac:	d10e      	bne.n	80070cc <__mcmp+0x28>
 80070ae:	f100 0314 	add.w	r3, r0, #20
 80070b2:	3114      	adds	r1, #20
 80070b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070c4:	42a5      	cmp	r5, r4
 80070c6:	d003      	beq.n	80070d0 <__mcmp+0x2c>
 80070c8:	d305      	bcc.n	80070d6 <__mcmp+0x32>
 80070ca:	2201      	movs	r2, #1
 80070cc:	4610      	mov	r0, r2
 80070ce:	bd30      	pop	{r4, r5, pc}
 80070d0:	4283      	cmp	r3, r0
 80070d2:	d3f3      	bcc.n	80070bc <__mcmp+0x18>
 80070d4:	e7fa      	b.n	80070cc <__mcmp+0x28>
 80070d6:	f04f 32ff 	mov.w	r2, #4294967295
 80070da:	e7f7      	b.n	80070cc <__mcmp+0x28>

080070dc <__mdiff>:
 80070dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	460c      	mov	r4, r1
 80070e2:	4606      	mov	r6, r0
 80070e4:	4611      	mov	r1, r2
 80070e6:	4620      	mov	r0, r4
 80070e8:	4690      	mov	r8, r2
 80070ea:	f7ff ffdb 	bl	80070a4 <__mcmp>
 80070ee:	1e05      	subs	r5, r0, #0
 80070f0:	d110      	bne.n	8007114 <__mdiff+0x38>
 80070f2:	4629      	mov	r1, r5
 80070f4:	4630      	mov	r0, r6
 80070f6:	f7ff fd59 	bl	8006bac <_Balloc>
 80070fa:	b930      	cbnz	r0, 800710a <__mdiff+0x2e>
 80070fc:	4b3a      	ldr	r3, [pc, #232]	; (80071e8 <__mdiff+0x10c>)
 80070fe:	4602      	mov	r2, r0
 8007100:	f240 2137 	movw	r1, #567	; 0x237
 8007104:	4839      	ldr	r0, [pc, #228]	; (80071ec <__mdiff+0x110>)
 8007106:	f000 fb61 	bl	80077cc <__assert_func>
 800710a:	2301      	movs	r3, #1
 800710c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007114:	bfa4      	itt	ge
 8007116:	4643      	movge	r3, r8
 8007118:	46a0      	movge	r8, r4
 800711a:	4630      	mov	r0, r6
 800711c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007120:	bfa6      	itte	ge
 8007122:	461c      	movge	r4, r3
 8007124:	2500      	movge	r5, #0
 8007126:	2501      	movlt	r5, #1
 8007128:	f7ff fd40 	bl	8006bac <_Balloc>
 800712c:	b920      	cbnz	r0, 8007138 <__mdiff+0x5c>
 800712e:	4b2e      	ldr	r3, [pc, #184]	; (80071e8 <__mdiff+0x10c>)
 8007130:	4602      	mov	r2, r0
 8007132:	f240 2145 	movw	r1, #581	; 0x245
 8007136:	e7e5      	b.n	8007104 <__mdiff+0x28>
 8007138:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800713c:	6926      	ldr	r6, [r4, #16]
 800713e:	60c5      	str	r5, [r0, #12]
 8007140:	f104 0914 	add.w	r9, r4, #20
 8007144:	f108 0514 	add.w	r5, r8, #20
 8007148:	f100 0e14 	add.w	lr, r0, #20
 800714c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007150:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007154:	f108 0210 	add.w	r2, r8, #16
 8007158:	46f2      	mov	sl, lr
 800715a:	2100      	movs	r1, #0
 800715c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007160:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007164:	fa11 f88b 	uxtah	r8, r1, fp
 8007168:	b299      	uxth	r1, r3
 800716a:	0c1b      	lsrs	r3, r3, #16
 800716c:	eba8 0801 	sub.w	r8, r8, r1
 8007170:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007174:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007178:	fa1f f888 	uxth.w	r8, r8
 800717c:	1419      	asrs	r1, r3, #16
 800717e:	454e      	cmp	r6, r9
 8007180:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007184:	f84a 3b04 	str.w	r3, [sl], #4
 8007188:	d8e8      	bhi.n	800715c <__mdiff+0x80>
 800718a:	1b33      	subs	r3, r6, r4
 800718c:	3b15      	subs	r3, #21
 800718e:	f023 0303 	bic.w	r3, r3, #3
 8007192:	3304      	adds	r3, #4
 8007194:	3415      	adds	r4, #21
 8007196:	42a6      	cmp	r6, r4
 8007198:	bf38      	it	cc
 800719a:	2304      	movcc	r3, #4
 800719c:	441d      	add	r5, r3
 800719e:	4473      	add	r3, lr
 80071a0:	469e      	mov	lr, r3
 80071a2:	462e      	mov	r6, r5
 80071a4:	4566      	cmp	r6, ip
 80071a6:	d30e      	bcc.n	80071c6 <__mdiff+0xea>
 80071a8:	f10c 0203 	add.w	r2, ip, #3
 80071ac:	1b52      	subs	r2, r2, r5
 80071ae:	f022 0203 	bic.w	r2, r2, #3
 80071b2:	3d03      	subs	r5, #3
 80071b4:	45ac      	cmp	ip, r5
 80071b6:	bf38      	it	cc
 80071b8:	2200      	movcc	r2, #0
 80071ba:	4413      	add	r3, r2
 80071bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80071c0:	b17a      	cbz	r2, 80071e2 <__mdiff+0x106>
 80071c2:	6107      	str	r7, [r0, #16]
 80071c4:	e7a4      	b.n	8007110 <__mdiff+0x34>
 80071c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80071ca:	fa11 f288 	uxtah	r2, r1, r8
 80071ce:	1414      	asrs	r4, r2, #16
 80071d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071d4:	b292      	uxth	r2, r2
 80071d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80071da:	f84e 2b04 	str.w	r2, [lr], #4
 80071de:	1421      	asrs	r1, r4, #16
 80071e0:	e7e0      	b.n	80071a4 <__mdiff+0xc8>
 80071e2:	3f01      	subs	r7, #1
 80071e4:	e7ea      	b.n	80071bc <__mdiff+0xe0>
 80071e6:	bf00      	nop
 80071e8:	08007c3b 	.word	0x08007c3b
 80071ec:	08007c4c 	.word	0x08007c4c

080071f0 <__d2b>:
 80071f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071f4:	460f      	mov	r7, r1
 80071f6:	2101      	movs	r1, #1
 80071f8:	ec59 8b10 	vmov	r8, r9, d0
 80071fc:	4616      	mov	r6, r2
 80071fe:	f7ff fcd5 	bl	8006bac <_Balloc>
 8007202:	4604      	mov	r4, r0
 8007204:	b930      	cbnz	r0, 8007214 <__d2b+0x24>
 8007206:	4602      	mov	r2, r0
 8007208:	4b24      	ldr	r3, [pc, #144]	; (800729c <__d2b+0xac>)
 800720a:	4825      	ldr	r0, [pc, #148]	; (80072a0 <__d2b+0xb0>)
 800720c:	f240 310f 	movw	r1, #783	; 0x30f
 8007210:	f000 fadc 	bl	80077cc <__assert_func>
 8007214:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007218:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800721c:	bb2d      	cbnz	r5, 800726a <__d2b+0x7a>
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	f1b8 0300 	subs.w	r3, r8, #0
 8007224:	d026      	beq.n	8007274 <__d2b+0x84>
 8007226:	4668      	mov	r0, sp
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	f7ff fd87 	bl	8006d3c <__lo0bits>
 800722e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007232:	b1e8      	cbz	r0, 8007270 <__d2b+0x80>
 8007234:	f1c0 0320 	rsb	r3, r0, #32
 8007238:	fa02 f303 	lsl.w	r3, r2, r3
 800723c:	430b      	orrs	r3, r1
 800723e:	40c2      	lsrs	r2, r0
 8007240:	6163      	str	r3, [r4, #20]
 8007242:	9201      	str	r2, [sp, #4]
 8007244:	9b01      	ldr	r3, [sp, #4]
 8007246:	61a3      	str	r3, [r4, #24]
 8007248:	2b00      	cmp	r3, #0
 800724a:	bf14      	ite	ne
 800724c:	2202      	movne	r2, #2
 800724e:	2201      	moveq	r2, #1
 8007250:	6122      	str	r2, [r4, #16]
 8007252:	b1bd      	cbz	r5, 8007284 <__d2b+0x94>
 8007254:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007258:	4405      	add	r5, r0
 800725a:	603d      	str	r5, [r7, #0]
 800725c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007260:	6030      	str	r0, [r6, #0]
 8007262:	4620      	mov	r0, r4
 8007264:	b003      	add	sp, #12
 8007266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800726a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800726e:	e7d6      	b.n	800721e <__d2b+0x2e>
 8007270:	6161      	str	r1, [r4, #20]
 8007272:	e7e7      	b.n	8007244 <__d2b+0x54>
 8007274:	a801      	add	r0, sp, #4
 8007276:	f7ff fd61 	bl	8006d3c <__lo0bits>
 800727a:	9b01      	ldr	r3, [sp, #4]
 800727c:	6163      	str	r3, [r4, #20]
 800727e:	3020      	adds	r0, #32
 8007280:	2201      	movs	r2, #1
 8007282:	e7e5      	b.n	8007250 <__d2b+0x60>
 8007284:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007288:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800728c:	6038      	str	r0, [r7, #0]
 800728e:	6918      	ldr	r0, [r3, #16]
 8007290:	f7ff fd34 	bl	8006cfc <__hi0bits>
 8007294:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007298:	e7e2      	b.n	8007260 <__d2b+0x70>
 800729a:	bf00      	nop
 800729c:	08007c3b 	.word	0x08007c3b
 80072a0:	08007c4c 	.word	0x08007c4c

080072a4 <__sfputc_r>:
 80072a4:	6893      	ldr	r3, [r2, #8]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	b410      	push	{r4}
 80072ac:	6093      	str	r3, [r2, #8]
 80072ae:	da08      	bge.n	80072c2 <__sfputc_r+0x1e>
 80072b0:	6994      	ldr	r4, [r2, #24]
 80072b2:	42a3      	cmp	r3, r4
 80072b4:	db01      	blt.n	80072ba <__sfputc_r+0x16>
 80072b6:	290a      	cmp	r1, #10
 80072b8:	d103      	bne.n	80072c2 <__sfputc_r+0x1e>
 80072ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072be:	f7fe bbe6 	b.w	8005a8e <__swbuf_r>
 80072c2:	6813      	ldr	r3, [r2, #0]
 80072c4:	1c58      	adds	r0, r3, #1
 80072c6:	6010      	str	r0, [r2, #0]
 80072c8:	7019      	strb	r1, [r3, #0]
 80072ca:	4608      	mov	r0, r1
 80072cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <__sfputs_r>:
 80072d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d4:	4606      	mov	r6, r0
 80072d6:	460f      	mov	r7, r1
 80072d8:	4614      	mov	r4, r2
 80072da:	18d5      	adds	r5, r2, r3
 80072dc:	42ac      	cmp	r4, r5
 80072de:	d101      	bne.n	80072e4 <__sfputs_r+0x12>
 80072e0:	2000      	movs	r0, #0
 80072e2:	e007      	b.n	80072f4 <__sfputs_r+0x22>
 80072e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e8:	463a      	mov	r2, r7
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7ff ffda 	bl	80072a4 <__sfputc_r>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	d1f3      	bne.n	80072dc <__sfputs_r+0xa>
 80072f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072f8 <_vfiprintf_r>:
 80072f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	460d      	mov	r5, r1
 80072fe:	b09d      	sub	sp, #116	; 0x74
 8007300:	4614      	mov	r4, r2
 8007302:	4698      	mov	r8, r3
 8007304:	4606      	mov	r6, r0
 8007306:	b118      	cbz	r0, 8007310 <_vfiprintf_r+0x18>
 8007308:	6a03      	ldr	r3, [r0, #32]
 800730a:	b90b      	cbnz	r3, 8007310 <_vfiprintf_r+0x18>
 800730c:	f7fe fad8 	bl	80058c0 <__sinit>
 8007310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007312:	07d9      	lsls	r1, r3, #31
 8007314:	d405      	bmi.n	8007322 <_vfiprintf_r+0x2a>
 8007316:	89ab      	ldrh	r3, [r5, #12]
 8007318:	059a      	lsls	r2, r3, #22
 800731a:	d402      	bmi.n	8007322 <_vfiprintf_r+0x2a>
 800731c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800731e:	f7fe fcc7 	bl	8005cb0 <__retarget_lock_acquire_recursive>
 8007322:	89ab      	ldrh	r3, [r5, #12]
 8007324:	071b      	lsls	r3, r3, #28
 8007326:	d501      	bpl.n	800732c <_vfiprintf_r+0x34>
 8007328:	692b      	ldr	r3, [r5, #16]
 800732a:	b99b      	cbnz	r3, 8007354 <_vfiprintf_r+0x5c>
 800732c:	4629      	mov	r1, r5
 800732e:	4630      	mov	r0, r6
 8007330:	f7fe fbea 	bl	8005b08 <__swsetup_r>
 8007334:	b170      	cbz	r0, 8007354 <_vfiprintf_r+0x5c>
 8007336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007338:	07dc      	lsls	r4, r3, #31
 800733a:	d504      	bpl.n	8007346 <_vfiprintf_r+0x4e>
 800733c:	f04f 30ff 	mov.w	r0, #4294967295
 8007340:	b01d      	add	sp, #116	; 0x74
 8007342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007346:	89ab      	ldrh	r3, [r5, #12]
 8007348:	0598      	lsls	r0, r3, #22
 800734a:	d4f7      	bmi.n	800733c <_vfiprintf_r+0x44>
 800734c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800734e:	f7fe fcb0 	bl	8005cb2 <__retarget_lock_release_recursive>
 8007352:	e7f3      	b.n	800733c <_vfiprintf_r+0x44>
 8007354:	2300      	movs	r3, #0
 8007356:	9309      	str	r3, [sp, #36]	; 0x24
 8007358:	2320      	movs	r3, #32
 800735a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800735e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007362:	2330      	movs	r3, #48	; 0x30
 8007364:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007518 <_vfiprintf_r+0x220>
 8007368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800736c:	f04f 0901 	mov.w	r9, #1
 8007370:	4623      	mov	r3, r4
 8007372:	469a      	mov	sl, r3
 8007374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007378:	b10a      	cbz	r2, 800737e <_vfiprintf_r+0x86>
 800737a:	2a25      	cmp	r2, #37	; 0x25
 800737c:	d1f9      	bne.n	8007372 <_vfiprintf_r+0x7a>
 800737e:	ebba 0b04 	subs.w	fp, sl, r4
 8007382:	d00b      	beq.n	800739c <_vfiprintf_r+0xa4>
 8007384:	465b      	mov	r3, fp
 8007386:	4622      	mov	r2, r4
 8007388:	4629      	mov	r1, r5
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff ffa1 	bl	80072d2 <__sfputs_r>
 8007390:	3001      	adds	r0, #1
 8007392:	f000 80a9 	beq.w	80074e8 <_vfiprintf_r+0x1f0>
 8007396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007398:	445a      	add	r2, fp
 800739a:	9209      	str	r2, [sp, #36]	; 0x24
 800739c:	f89a 3000 	ldrb.w	r3, [sl]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80a1 	beq.w	80074e8 <_vfiprintf_r+0x1f0>
 80073a6:	2300      	movs	r3, #0
 80073a8:	f04f 32ff 	mov.w	r2, #4294967295
 80073ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073b0:	f10a 0a01 	add.w	sl, sl, #1
 80073b4:	9304      	str	r3, [sp, #16]
 80073b6:	9307      	str	r3, [sp, #28]
 80073b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073bc:	931a      	str	r3, [sp, #104]	; 0x68
 80073be:	4654      	mov	r4, sl
 80073c0:	2205      	movs	r2, #5
 80073c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073c6:	4854      	ldr	r0, [pc, #336]	; (8007518 <_vfiprintf_r+0x220>)
 80073c8:	f7f8 ff0a 	bl	80001e0 <memchr>
 80073cc:	9a04      	ldr	r2, [sp, #16]
 80073ce:	b9d8      	cbnz	r0, 8007408 <_vfiprintf_r+0x110>
 80073d0:	06d1      	lsls	r1, r2, #27
 80073d2:	bf44      	itt	mi
 80073d4:	2320      	movmi	r3, #32
 80073d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073da:	0713      	lsls	r3, r2, #28
 80073dc:	bf44      	itt	mi
 80073de:	232b      	movmi	r3, #43	; 0x2b
 80073e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073e4:	f89a 3000 	ldrb.w	r3, [sl]
 80073e8:	2b2a      	cmp	r3, #42	; 0x2a
 80073ea:	d015      	beq.n	8007418 <_vfiprintf_r+0x120>
 80073ec:	9a07      	ldr	r2, [sp, #28]
 80073ee:	4654      	mov	r4, sl
 80073f0:	2000      	movs	r0, #0
 80073f2:	f04f 0c0a 	mov.w	ip, #10
 80073f6:	4621      	mov	r1, r4
 80073f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073fc:	3b30      	subs	r3, #48	; 0x30
 80073fe:	2b09      	cmp	r3, #9
 8007400:	d94d      	bls.n	800749e <_vfiprintf_r+0x1a6>
 8007402:	b1b0      	cbz	r0, 8007432 <_vfiprintf_r+0x13a>
 8007404:	9207      	str	r2, [sp, #28]
 8007406:	e014      	b.n	8007432 <_vfiprintf_r+0x13a>
 8007408:	eba0 0308 	sub.w	r3, r0, r8
 800740c:	fa09 f303 	lsl.w	r3, r9, r3
 8007410:	4313      	orrs	r3, r2
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	46a2      	mov	sl, r4
 8007416:	e7d2      	b.n	80073be <_vfiprintf_r+0xc6>
 8007418:	9b03      	ldr	r3, [sp, #12]
 800741a:	1d19      	adds	r1, r3, #4
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	9103      	str	r1, [sp, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	bfbb      	ittet	lt
 8007424:	425b      	neglt	r3, r3
 8007426:	f042 0202 	orrlt.w	r2, r2, #2
 800742a:	9307      	strge	r3, [sp, #28]
 800742c:	9307      	strlt	r3, [sp, #28]
 800742e:	bfb8      	it	lt
 8007430:	9204      	strlt	r2, [sp, #16]
 8007432:	7823      	ldrb	r3, [r4, #0]
 8007434:	2b2e      	cmp	r3, #46	; 0x2e
 8007436:	d10c      	bne.n	8007452 <_vfiprintf_r+0x15a>
 8007438:	7863      	ldrb	r3, [r4, #1]
 800743a:	2b2a      	cmp	r3, #42	; 0x2a
 800743c:	d134      	bne.n	80074a8 <_vfiprintf_r+0x1b0>
 800743e:	9b03      	ldr	r3, [sp, #12]
 8007440:	1d1a      	adds	r2, r3, #4
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	9203      	str	r2, [sp, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	bfb8      	it	lt
 800744a:	f04f 33ff 	movlt.w	r3, #4294967295
 800744e:	3402      	adds	r4, #2
 8007450:	9305      	str	r3, [sp, #20]
 8007452:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007528 <_vfiprintf_r+0x230>
 8007456:	7821      	ldrb	r1, [r4, #0]
 8007458:	2203      	movs	r2, #3
 800745a:	4650      	mov	r0, sl
 800745c:	f7f8 fec0 	bl	80001e0 <memchr>
 8007460:	b138      	cbz	r0, 8007472 <_vfiprintf_r+0x17a>
 8007462:	9b04      	ldr	r3, [sp, #16]
 8007464:	eba0 000a 	sub.w	r0, r0, sl
 8007468:	2240      	movs	r2, #64	; 0x40
 800746a:	4082      	lsls	r2, r0
 800746c:	4313      	orrs	r3, r2
 800746e:	3401      	adds	r4, #1
 8007470:	9304      	str	r3, [sp, #16]
 8007472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007476:	4829      	ldr	r0, [pc, #164]	; (800751c <_vfiprintf_r+0x224>)
 8007478:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800747c:	2206      	movs	r2, #6
 800747e:	f7f8 feaf 	bl	80001e0 <memchr>
 8007482:	2800      	cmp	r0, #0
 8007484:	d03f      	beq.n	8007506 <_vfiprintf_r+0x20e>
 8007486:	4b26      	ldr	r3, [pc, #152]	; (8007520 <_vfiprintf_r+0x228>)
 8007488:	bb1b      	cbnz	r3, 80074d2 <_vfiprintf_r+0x1da>
 800748a:	9b03      	ldr	r3, [sp, #12]
 800748c:	3307      	adds	r3, #7
 800748e:	f023 0307 	bic.w	r3, r3, #7
 8007492:	3308      	adds	r3, #8
 8007494:	9303      	str	r3, [sp, #12]
 8007496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007498:	443b      	add	r3, r7
 800749a:	9309      	str	r3, [sp, #36]	; 0x24
 800749c:	e768      	b.n	8007370 <_vfiprintf_r+0x78>
 800749e:	fb0c 3202 	mla	r2, ip, r2, r3
 80074a2:	460c      	mov	r4, r1
 80074a4:	2001      	movs	r0, #1
 80074a6:	e7a6      	b.n	80073f6 <_vfiprintf_r+0xfe>
 80074a8:	2300      	movs	r3, #0
 80074aa:	3401      	adds	r4, #1
 80074ac:	9305      	str	r3, [sp, #20]
 80074ae:	4619      	mov	r1, r3
 80074b0:	f04f 0c0a 	mov.w	ip, #10
 80074b4:	4620      	mov	r0, r4
 80074b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ba:	3a30      	subs	r2, #48	; 0x30
 80074bc:	2a09      	cmp	r2, #9
 80074be:	d903      	bls.n	80074c8 <_vfiprintf_r+0x1d0>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0c6      	beq.n	8007452 <_vfiprintf_r+0x15a>
 80074c4:	9105      	str	r1, [sp, #20]
 80074c6:	e7c4      	b.n	8007452 <_vfiprintf_r+0x15a>
 80074c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074cc:	4604      	mov	r4, r0
 80074ce:	2301      	movs	r3, #1
 80074d0:	e7f0      	b.n	80074b4 <_vfiprintf_r+0x1bc>
 80074d2:	ab03      	add	r3, sp, #12
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	462a      	mov	r2, r5
 80074d8:	4b12      	ldr	r3, [pc, #72]	; (8007524 <_vfiprintf_r+0x22c>)
 80074da:	a904      	add	r1, sp, #16
 80074dc:	4630      	mov	r0, r6
 80074de:	f7fd fdaf 	bl	8005040 <_printf_float>
 80074e2:	4607      	mov	r7, r0
 80074e4:	1c78      	adds	r0, r7, #1
 80074e6:	d1d6      	bne.n	8007496 <_vfiprintf_r+0x19e>
 80074e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ea:	07d9      	lsls	r1, r3, #31
 80074ec:	d405      	bmi.n	80074fa <_vfiprintf_r+0x202>
 80074ee:	89ab      	ldrh	r3, [r5, #12]
 80074f0:	059a      	lsls	r2, r3, #22
 80074f2:	d402      	bmi.n	80074fa <_vfiprintf_r+0x202>
 80074f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074f6:	f7fe fbdc 	bl	8005cb2 <__retarget_lock_release_recursive>
 80074fa:	89ab      	ldrh	r3, [r5, #12]
 80074fc:	065b      	lsls	r3, r3, #25
 80074fe:	f53f af1d 	bmi.w	800733c <_vfiprintf_r+0x44>
 8007502:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007504:	e71c      	b.n	8007340 <_vfiprintf_r+0x48>
 8007506:	ab03      	add	r3, sp, #12
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	462a      	mov	r2, r5
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <_vfiprintf_r+0x22c>)
 800750e:	a904      	add	r1, sp, #16
 8007510:	4630      	mov	r0, r6
 8007512:	f7fe f839 	bl	8005588 <_printf_i>
 8007516:	e7e4      	b.n	80074e2 <_vfiprintf_r+0x1ea>
 8007518:	08007da4 	.word	0x08007da4
 800751c:	08007dae 	.word	0x08007dae
 8007520:	08005041 	.word	0x08005041
 8007524:	080072d3 	.word	0x080072d3
 8007528:	08007daa 	.word	0x08007daa

0800752c <__sflush_r>:
 800752c:	898a      	ldrh	r2, [r1, #12]
 800752e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007532:	4605      	mov	r5, r0
 8007534:	0710      	lsls	r0, r2, #28
 8007536:	460c      	mov	r4, r1
 8007538:	d458      	bmi.n	80075ec <__sflush_r+0xc0>
 800753a:	684b      	ldr	r3, [r1, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	dc05      	bgt.n	800754c <__sflush_r+0x20>
 8007540:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	dc02      	bgt.n	800754c <__sflush_r+0x20>
 8007546:	2000      	movs	r0, #0
 8007548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800754c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800754e:	2e00      	cmp	r6, #0
 8007550:	d0f9      	beq.n	8007546 <__sflush_r+0x1a>
 8007552:	2300      	movs	r3, #0
 8007554:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007558:	682f      	ldr	r7, [r5, #0]
 800755a:	6a21      	ldr	r1, [r4, #32]
 800755c:	602b      	str	r3, [r5, #0]
 800755e:	d032      	beq.n	80075c6 <__sflush_r+0x9a>
 8007560:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	075a      	lsls	r2, r3, #29
 8007566:	d505      	bpl.n	8007574 <__sflush_r+0x48>
 8007568:	6863      	ldr	r3, [r4, #4]
 800756a:	1ac0      	subs	r0, r0, r3
 800756c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800756e:	b10b      	cbz	r3, 8007574 <__sflush_r+0x48>
 8007570:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007572:	1ac0      	subs	r0, r0, r3
 8007574:	2300      	movs	r3, #0
 8007576:	4602      	mov	r2, r0
 8007578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800757a:	6a21      	ldr	r1, [r4, #32]
 800757c:	4628      	mov	r0, r5
 800757e:	47b0      	blx	r6
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	d106      	bne.n	8007594 <__sflush_r+0x68>
 8007586:	6829      	ldr	r1, [r5, #0]
 8007588:	291d      	cmp	r1, #29
 800758a:	d82b      	bhi.n	80075e4 <__sflush_r+0xb8>
 800758c:	4a29      	ldr	r2, [pc, #164]	; (8007634 <__sflush_r+0x108>)
 800758e:	410a      	asrs	r2, r1
 8007590:	07d6      	lsls	r6, r2, #31
 8007592:	d427      	bmi.n	80075e4 <__sflush_r+0xb8>
 8007594:	2200      	movs	r2, #0
 8007596:	6062      	str	r2, [r4, #4]
 8007598:	04d9      	lsls	r1, r3, #19
 800759a:	6922      	ldr	r2, [r4, #16]
 800759c:	6022      	str	r2, [r4, #0]
 800759e:	d504      	bpl.n	80075aa <__sflush_r+0x7e>
 80075a0:	1c42      	adds	r2, r0, #1
 80075a2:	d101      	bne.n	80075a8 <__sflush_r+0x7c>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b903      	cbnz	r3, 80075aa <__sflush_r+0x7e>
 80075a8:	6560      	str	r0, [r4, #84]	; 0x54
 80075aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ac:	602f      	str	r7, [r5, #0]
 80075ae:	2900      	cmp	r1, #0
 80075b0:	d0c9      	beq.n	8007546 <__sflush_r+0x1a>
 80075b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075b6:	4299      	cmp	r1, r3
 80075b8:	d002      	beq.n	80075c0 <__sflush_r+0x94>
 80075ba:	4628      	mov	r0, r5
 80075bc:	f7ff f9f6 	bl	80069ac <_free_r>
 80075c0:	2000      	movs	r0, #0
 80075c2:	6360      	str	r0, [r4, #52]	; 0x34
 80075c4:	e7c0      	b.n	8007548 <__sflush_r+0x1c>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4628      	mov	r0, r5
 80075ca:	47b0      	blx	r6
 80075cc:	1c41      	adds	r1, r0, #1
 80075ce:	d1c8      	bne.n	8007562 <__sflush_r+0x36>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0c5      	beq.n	8007562 <__sflush_r+0x36>
 80075d6:	2b1d      	cmp	r3, #29
 80075d8:	d001      	beq.n	80075de <__sflush_r+0xb2>
 80075da:	2b16      	cmp	r3, #22
 80075dc:	d101      	bne.n	80075e2 <__sflush_r+0xb6>
 80075de:	602f      	str	r7, [r5, #0]
 80075e0:	e7b1      	b.n	8007546 <__sflush_r+0x1a>
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	e7ad      	b.n	8007548 <__sflush_r+0x1c>
 80075ec:	690f      	ldr	r7, [r1, #16]
 80075ee:	2f00      	cmp	r7, #0
 80075f0:	d0a9      	beq.n	8007546 <__sflush_r+0x1a>
 80075f2:	0793      	lsls	r3, r2, #30
 80075f4:	680e      	ldr	r6, [r1, #0]
 80075f6:	bf08      	it	eq
 80075f8:	694b      	ldreq	r3, [r1, #20]
 80075fa:	600f      	str	r7, [r1, #0]
 80075fc:	bf18      	it	ne
 80075fe:	2300      	movne	r3, #0
 8007600:	eba6 0807 	sub.w	r8, r6, r7
 8007604:	608b      	str	r3, [r1, #8]
 8007606:	f1b8 0f00 	cmp.w	r8, #0
 800760a:	dd9c      	ble.n	8007546 <__sflush_r+0x1a>
 800760c:	6a21      	ldr	r1, [r4, #32]
 800760e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007610:	4643      	mov	r3, r8
 8007612:	463a      	mov	r2, r7
 8007614:	4628      	mov	r0, r5
 8007616:	47b0      	blx	r6
 8007618:	2800      	cmp	r0, #0
 800761a:	dc06      	bgt.n	800762a <__sflush_r+0xfe>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007622:	81a3      	strh	r3, [r4, #12]
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	e78e      	b.n	8007548 <__sflush_r+0x1c>
 800762a:	4407      	add	r7, r0
 800762c:	eba8 0800 	sub.w	r8, r8, r0
 8007630:	e7e9      	b.n	8007606 <__sflush_r+0xda>
 8007632:	bf00      	nop
 8007634:	dfbffffe 	.word	0xdfbffffe

08007638 <_fflush_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	690b      	ldr	r3, [r1, #16]
 800763c:	4605      	mov	r5, r0
 800763e:	460c      	mov	r4, r1
 8007640:	b913      	cbnz	r3, 8007648 <_fflush_r+0x10>
 8007642:	2500      	movs	r5, #0
 8007644:	4628      	mov	r0, r5
 8007646:	bd38      	pop	{r3, r4, r5, pc}
 8007648:	b118      	cbz	r0, 8007652 <_fflush_r+0x1a>
 800764a:	6a03      	ldr	r3, [r0, #32]
 800764c:	b90b      	cbnz	r3, 8007652 <_fflush_r+0x1a>
 800764e:	f7fe f937 	bl	80058c0 <__sinit>
 8007652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0f3      	beq.n	8007642 <_fflush_r+0xa>
 800765a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800765c:	07d0      	lsls	r0, r2, #31
 800765e:	d404      	bmi.n	800766a <_fflush_r+0x32>
 8007660:	0599      	lsls	r1, r3, #22
 8007662:	d402      	bmi.n	800766a <_fflush_r+0x32>
 8007664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007666:	f7fe fb23 	bl	8005cb0 <__retarget_lock_acquire_recursive>
 800766a:	4628      	mov	r0, r5
 800766c:	4621      	mov	r1, r4
 800766e:	f7ff ff5d 	bl	800752c <__sflush_r>
 8007672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007674:	07da      	lsls	r2, r3, #31
 8007676:	4605      	mov	r5, r0
 8007678:	d4e4      	bmi.n	8007644 <_fflush_r+0xc>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	059b      	lsls	r3, r3, #22
 800767e:	d4e1      	bmi.n	8007644 <_fflush_r+0xc>
 8007680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007682:	f7fe fb16 	bl	8005cb2 <__retarget_lock_release_recursive>
 8007686:	e7dd      	b.n	8007644 <_fflush_r+0xc>

08007688 <__swhatbuf_r>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	460c      	mov	r4, r1
 800768c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007690:	2900      	cmp	r1, #0
 8007692:	b096      	sub	sp, #88	; 0x58
 8007694:	4615      	mov	r5, r2
 8007696:	461e      	mov	r6, r3
 8007698:	da0d      	bge.n	80076b6 <__swhatbuf_r+0x2e>
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076a0:	f04f 0100 	mov.w	r1, #0
 80076a4:	bf0c      	ite	eq
 80076a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80076aa:	2340      	movne	r3, #64	; 0x40
 80076ac:	2000      	movs	r0, #0
 80076ae:	6031      	str	r1, [r6, #0]
 80076b0:	602b      	str	r3, [r5, #0]
 80076b2:	b016      	add	sp, #88	; 0x58
 80076b4:	bd70      	pop	{r4, r5, r6, pc}
 80076b6:	466a      	mov	r2, sp
 80076b8:	f000 f848 	bl	800774c <_fstat_r>
 80076bc:	2800      	cmp	r0, #0
 80076be:	dbec      	blt.n	800769a <__swhatbuf_r+0x12>
 80076c0:	9901      	ldr	r1, [sp, #4]
 80076c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80076c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80076ca:	4259      	negs	r1, r3
 80076cc:	4159      	adcs	r1, r3
 80076ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076d2:	e7eb      	b.n	80076ac <__swhatbuf_r+0x24>

080076d4 <__smakebuf_r>:
 80076d4:	898b      	ldrh	r3, [r1, #12]
 80076d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076d8:	079d      	lsls	r5, r3, #30
 80076da:	4606      	mov	r6, r0
 80076dc:	460c      	mov	r4, r1
 80076de:	d507      	bpl.n	80076f0 <__smakebuf_r+0x1c>
 80076e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	6123      	str	r3, [r4, #16]
 80076e8:	2301      	movs	r3, #1
 80076ea:	6163      	str	r3, [r4, #20]
 80076ec:	b002      	add	sp, #8
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	ab01      	add	r3, sp, #4
 80076f2:	466a      	mov	r2, sp
 80076f4:	f7ff ffc8 	bl	8007688 <__swhatbuf_r>
 80076f8:	9900      	ldr	r1, [sp, #0]
 80076fa:	4605      	mov	r5, r0
 80076fc:	4630      	mov	r0, r6
 80076fe:	f7ff f9c9 	bl	8006a94 <_malloc_r>
 8007702:	b948      	cbnz	r0, 8007718 <__smakebuf_r+0x44>
 8007704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007708:	059a      	lsls	r2, r3, #22
 800770a:	d4ef      	bmi.n	80076ec <__smakebuf_r+0x18>
 800770c:	f023 0303 	bic.w	r3, r3, #3
 8007710:	f043 0302 	orr.w	r3, r3, #2
 8007714:	81a3      	strh	r3, [r4, #12]
 8007716:	e7e3      	b.n	80076e0 <__smakebuf_r+0xc>
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	6020      	str	r0, [r4, #0]
 800771c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007720:	81a3      	strh	r3, [r4, #12]
 8007722:	9b00      	ldr	r3, [sp, #0]
 8007724:	6163      	str	r3, [r4, #20]
 8007726:	9b01      	ldr	r3, [sp, #4]
 8007728:	6120      	str	r0, [r4, #16]
 800772a:	b15b      	cbz	r3, 8007744 <__smakebuf_r+0x70>
 800772c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007730:	4630      	mov	r0, r6
 8007732:	f000 f81d 	bl	8007770 <_isatty_r>
 8007736:	b128      	cbz	r0, 8007744 <__smakebuf_r+0x70>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	f023 0303 	bic.w	r3, r3, #3
 800773e:	f043 0301 	orr.w	r3, r3, #1
 8007742:	81a3      	strh	r3, [r4, #12]
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	431d      	orrs	r5, r3
 8007748:	81a5      	strh	r5, [r4, #12]
 800774a:	e7cf      	b.n	80076ec <__smakebuf_r+0x18>

0800774c <_fstat_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	4d07      	ldr	r5, [pc, #28]	; (800776c <_fstat_r+0x20>)
 8007750:	2300      	movs	r3, #0
 8007752:	4604      	mov	r4, r0
 8007754:	4608      	mov	r0, r1
 8007756:	4611      	mov	r1, r2
 8007758:	602b      	str	r3, [r5, #0]
 800775a:	f7fb fb2e 	bl	8002dba <_fstat>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	d102      	bne.n	8007768 <_fstat_r+0x1c>
 8007762:	682b      	ldr	r3, [r5, #0]
 8007764:	b103      	cbz	r3, 8007768 <_fstat_r+0x1c>
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	bd38      	pop	{r3, r4, r5, pc}
 800776a:	bf00      	nop
 800776c:	20000360 	.word	0x20000360

08007770 <_isatty_r>:
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	4d06      	ldr	r5, [pc, #24]	; (800778c <_isatty_r+0x1c>)
 8007774:	2300      	movs	r3, #0
 8007776:	4604      	mov	r4, r0
 8007778:	4608      	mov	r0, r1
 800777a:	602b      	str	r3, [r5, #0]
 800777c:	f7fb fb2d 	bl	8002dda <_isatty>
 8007780:	1c43      	adds	r3, r0, #1
 8007782:	d102      	bne.n	800778a <_isatty_r+0x1a>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	b103      	cbz	r3, 800778a <_isatty_r+0x1a>
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	bd38      	pop	{r3, r4, r5, pc}
 800778c:	20000360 	.word	0x20000360

08007790 <_sbrk_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4d06      	ldr	r5, [pc, #24]	; (80077ac <_sbrk_r+0x1c>)
 8007794:	2300      	movs	r3, #0
 8007796:	4604      	mov	r4, r0
 8007798:	4608      	mov	r0, r1
 800779a:	602b      	str	r3, [r5, #0]
 800779c:	f7fb fb36 	bl	8002e0c <_sbrk>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d102      	bne.n	80077aa <_sbrk_r+0x1a>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	b103      	cbz	r3, 80077aa <_sbrk_r+0x1a>
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	bd38      	pop	{r3, r4, r5, pc}
 80077ac:	20000360 	.word	0x20000360

080077b0 <memcpy>:
 80077b0:	440a      	add	r2, r1
 80077b2:	4291      	cmp	r1, r2
 80077b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80077b8:	d100      	bne.n	80077bc <memcpy+0xc>
 80077ba:	4770      	bx	lr
 80077bc:	b510      	push	{r4, lr}
 80077be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077c6:	4291      	cmp	r1, r2
 80077c8:	d1f9      	bne.n	80077be <memcpy+0xe>
 80077ca:	bd10      	pop	{r4, pc}

080077cc <__assert_func>:
 80077cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077ce:	4614      	mov	r4, r2
 80077d0:	461a      	mov	r2, r3
 80077d2:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <__assert_func+0x2c>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4605      	mov	r5, r0
 80077d8:	68d8      	ldr	r0, [r3, #12]
 80077da:	b14c      	cbz	r4, 80077f0 <__assert_func+0x24>
 80077dc:	4b07      	ldr	r3, [pc, #28]	; (80077fc <__assert_func+0x30>)
 80077de:	9100      	str	r1, [sp, #0]
 80077e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077e4:	4906      	ldr	r1, [pc, #24]	; (8007800 <__assert_func+0x34>)
 80077e6:	462b      	mov	r3, r5
 80077e8:	f000 f844 	bl	8007874 <fiprintf>
 80077ec:	f000 f854 	bl	8007898 <abort>
 80077f0:	4b04      	ldr	r3, [pc, #16]	; (8007804 <__assert_func+0x38>)
 80077f2:	461c      	mov	r4, r3
 80077f4:	e7f3      	b.n	80077de <__assert_func+0x12>
 80077f6:	bf00      	nop
 80077f8:	2000005c 	.word	0x2000005c
 80077fc:	08007dbf 	.word	0x08007dbf
 8007800:	08007dcc 	.word	0x08007dcc
 8007804:	08007dfa 	.word	0x08007dfa

08007808 <_calloc_r>:
 8007808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800780a:	fba1 2402 	umull	r2, r4, r1, r2
 800780e:	b94c      	cbnz	r4, 8007824 <_calloc_r+0x1c>
 8007810:	4611      	mov	r1, r2
 8007812:	9201      	str	r2, [sp, #4]
 8007814:	f7ff f93e 	bl	8006a94 <_malloc_r>
 8007818:	9a01      	ldr	r2, [sp, #4]
 800781a:	4605      	mov	r5, r0
 800781c:	b930      	cbnz	r0, 800782c <_calloc_r+0x24>
 800781e:	4628      	mov	r0, r5
 8007820:	b003      	add	sp, #12
 8007822:	bd30      	pop	{r4, r5, pc}
 8007824:	220c      	movs	r2, #12
 8007826:	6002      	str	r2, [r0, #0]
 8007828:	2500      	movs	r5, #0
 800782a:	e7f8      	b.n	800781e <_calloc_r+0x16>
 800782c:	4621      	mov	r1, r4
 800782e:	f7fe f9c3 	bl	8005bb8 <memset>
 8007832:	e7f4      	b.n	800781e <_calloc_r+0x16>

08007834 <__ascii_mbtowc>:
 8007834:	b082      	sub	sp, #8
 8007836:	b901      	cbnz	r1, 800783a <__ascii_mbtowc+0x6>
 8007838:	a901      	add	r1, sp, #4
 800783a:	b142      	cbz	r2, 800784e <__ascii_mbtowc+0x1a>
 800783c:	b14b      	cbz	r3, 8007852 <__ascii_mbtowc+0x1e>
 800783e:	7813      	ldrb	r3, [r2, #0]
 8007840:	600b      	str	r3, [r1, #0]
 8007842:	7812      	ldrb	r2, [r2, #0]
 8007844:	1e10      	subs	r0, r2, #0
 8007846:	bf18      	it	ne
 8007848:	2001      	movne	r0, #1
 800784a:	b002      	add	sp, #8
 800784c:	4770      	bx	lr
 800784e:	4610      	mov	r0, r2
 8007850:	e7fb      	b.n	800784a <__ascii_mbtowc+0x16>
 8007852:	f06f 0001 	mvn.w	r0, #1
 8007856:	e7f8      	b.n	800784a <__ascii_mbtowc+0x16>

08007858 <__ascii_wctomb>:
 8007858:	b149      	cbz	r1, 800786e <__ascii_wctomb+0x16>
 800785a:	2aff      	cmp	r2, #255	; 0xff
 800785c:	bf85      	ittet	hi
 800785e:	238a      	movhi	r3, #138	; 0x8a
 8007860:	6003      	strhi	r3, [r0, #0]
 8007862:	700a      	strbls	r2, [r1, #0]
 8007864:	f04f 30ff 	movhi.w	r0, #4294967295
 8007868:	bf98      	it	ls
 800786a:	2001      	movls	r0, #1
 800786c:	4770      	bx	lr
 800786e:	4608      	mov	r0, r1
 8007870:	4770      	bx	lr
	...

08007874 <fiprintf>:
 8007874:	b40e      	push	{r1, r2, r3}
 8007876:	b503      	push	{r0, r1, lr}
 8007878:	4601      	mov	r1, r0
 800787a:	ab03      	add	r3, sp, #12
 800787c:	4805      	ldr	r0, [pc, #20]	; (8007894 <fiprintf+0x20>)
 800787e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007882:	6800      	ldr	r0, [r0, #0]
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	f7ff fd37 	bl	80072f8 <_vfiprintf_r>
 800788a:	b002      	add	sp, #8
 800788c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007890:	b003      	add	sp, #12
 8007892:	4770      	bx	lr
 8007894:	2000005c 	.word	0x2000005c

08007898 <abort>:
 8007898:	b508      	push	{r3, lr}
 800789a:	2006      	movs	r0, #6
 800789c:	f000 f82c 	bl	80078f8 <raise>
 80078a0:	2001      	movs	r0, #1
 80078a2:	f7fb fa57 	bl	8002d54 <_exit>

080078a6 <_raise_r>:
 80078a6:	291f      	cmp	r1, #31
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4604      	mov	r4, r0
 80078ac:	460d      	mov	r5, r1
 80078ae:	d904      	bls.n	80078ba <_raise_r+0x14>
 80078b0:	2316      	movs	r3, #22
 80078b2:	6003      	str	r3, [r0, #0]
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	bd38      	pop	{r3, r4, r5, pc}
 80078ba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80078bc:	b112      	cbz	r2, 80078c4 <_raise_r+0x1e>
 80078be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078c2:	b94b      	cbnz	r3, 80078d8 <_raise_r+0x32>
 80078c4:	4620      	mov	r0, r4
 80078c6:	f000 f831 	bl	800792c <_getpid_r>
 80078ca:	462a      	mov	r2, r5
 80078cc:	4601      	mov	r1, r0
 80078ce:	4620      	mov	r0, r4
 80078d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d4:	f000 b818 	b.w	8007908 <_kill_r>
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d00a      	beq.n	80078f2 <_raise_r+0x4c>
 80078dc:	1c59      	adds	r1, r3, #1
 80078de:	d103      	bne.n	80078e8 <_raise_r+0x42>
 80078e0:	2316      	movs	r3, #22
 80078e2:	6003      	str	r3, [r0, #0]
 80078e4:	2001      	movs	r0, #1
 80078e6:	e7e7      	b.n	80078b8 <_raise_r+0x12>
 80078e8:	2400      	movs	r4, #0
 80078ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078ee:	4628      	mov	r0, r5
 80078f0:	4798      	blx	r3
 80078f2:	2000      	movs	r0, #0
 80078f4:	e7e0      	b.n	80078b8 <_raise_r+0x12>
	...

080078f8 <raise>:
 80078f8:	4b02      	ldr	r3, [pc, #8]	; (8007904 <raise+0xc>)
 80078fa:	4601      	mov	r1, r0
 80078fc:	6818      	ldr	r0, [r3, #0]
 80078fe:	f7ff bfd2 	b.w	80078a6 <_raise_r>
 8007902:	bf00      	nop
 8007904:	2000005c 	.word	0x2000005c

08007908 <_kill_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4d07      	ldr	r5, [pc, #28]	; (8007928 <_kill_r+0x20>)
 800790c:	2300      	movs	r3, #0
 800790e:	4604      	mov	r4, r0
 8007910:	4608      	mov	r0, r1
 8007912:	4611      	mov	r1, r2
 8007914:	602b      	str	r3, [r5, #0]
 8007916:	f7fb fa0d 	bl	8002d34 <_kill>
 800791a:	1c43      	adds	r3, r0, #1
 800791c:	d102      	bne.n	8007924 <_kill_r+0x1c>
 800791e:	682b      	ldr	r3, [r5, #0]
 8007920:	b103      	cbz	r3, 8007924 <_kill_r+0x1c>
 8007922:	6023      	str	r3, [r4, #0]
 8007924:	bd38      	pop	{r3, r4, r5, pc}
 8007926:	bf00      	nop
 8007928:	20000360 	.word	0x20000360

0800792c <_getpid_r>:
 800792c:	f7fb b9fa 	b.w	8002d24 <_getpid>

08007930 <_init>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	bf00      	nop
 8007934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007936:	bc08      	pop	{r3}
 8007938:	469e      	mov	lr, r3
 800793a:	4770      	bx	lr

0800793c <_fini>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	bf00      	nop
 8007940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007942:	bc08      	pop	{r3}
 8007944:	469e      	mov	lr, r3
 8007946:	4770      	bx	lr
